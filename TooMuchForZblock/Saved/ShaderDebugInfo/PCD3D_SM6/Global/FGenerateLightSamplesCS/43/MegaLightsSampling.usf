#line 1 "MoveShaderParametersToRootConstantBuffer"
cbuffer _RootShaderParameters
{
uint bSceneLightingChannelsValid : packoffset(c14);
uint2 DownsampledViewMin : packoffset(c18);
uint2 DownsampledViewSize : packoffset(c18.z);
uint2 NumSamplesPerPixel : packoffset(c19);
uint MegaLightsStateFrameIndex : packoffset(c20.w);
float MinSampleWeight : packoffset(c21);
uint DownsampledTileDataStride : packoffset(c21.z);
uint bOverrideCursorPosition : packoffset(c22.y);
int DebugMode : packoffset(c22.z);
uint DebugLightId : packoffset(c22.w);
uint DebugVisualizeLight : packoffset(c23);
int UseIESProfiles : packoffset(c23.y);
int UseLightFunctionAtlas : packoffset(c23.z);
}

// DebugHash_30ce7051777f3a9e212c6ab0341ea49a9e550060abbc158b72779ea8d27ddfd4
#line 1 "__UE_FILENAME_SENTINEL"
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}
float UnpackUnorm10(uint In)
{
	return float(In & 0x3FF) * (1.0f / 1023.0f);
}
const static float PI = 3.1415926535897932f;
uint3 Rand3DPCG16(int3 p)
{
	uint3 v = uint3(p);
	v = v * 1664525u + 1013904223u;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	return v >> 16u;
}
struct FDFScalar;
FDFScalar DFAdd(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFAdd(FDFScalar Lhs, float Rhs);
FDFScalar DFSubtract(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFSubtract(FDFScalar Lhs, float Rhs);
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs);
FDFScalar DFDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFDivide(FDFScalar Lhs, float Rhs);
FDFScalar DFNegate(FDFScalar V);
float DFDemote(FDFScalar V);
struct FDFScalar
{
	float High;
	float Low;
	float Demote() { return DFDemote(this); }
};
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFScalar DFPromote(FDFScalar Value) { return Value; }
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }
float DFDemote(FDFScalar Value) { return Value.High + Value.Low; }
float DFDemote(float Value) { return Value; }
FDFScalar DFNegate(FDFScalar Value)
{
	return MakeDFScalar(-Value.High, -Value.Low);
}
FDFScalar DFTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);
}
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);
}
FDFScalar DFAdd(float Lhs, float Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFScalar DFAdd(FDFScalar Lhs, FDFScalar Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFScalar T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFScalar DFAdd(FDFScalar Lhs, float Rhs)
{
	const FDFScalar S = DFTwoSum(Lhs.High, Rhs);
	const float T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFScalar DFAdd(float Lhs, FDFScalar Rhs) { return DFAdd(Rhs, Lhs); }
float DFAddDemote(FDFScalar Lhs, FDFScalar Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFScalar T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;
}
float DFAddDemote(FDFScalar Lhs, float Rhs)
{
	const FDFScalar S = DFTwoSum(Lhs.High, Rhs);
	const float T = Lhs.Low + S.Low;
	return S.High + T;
}
float DFAddDemote(float Lhs, FDFScalar Rhs) { return DFAddDemote(Rhs, Lhs); }
float DFAddDemote(float Lhs, float Rhs) { return Lhs + Rhs; }
float DFFastAddDemote(FDFScalar Lhs, FDFScalar Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;
}
float DFFastAddDemote(FDFScalar Lhs, float Rhs) { return DFAddDemote(Lhs, Rhs); }
float DFFastAddDemote(float Lhs, FDFScalar Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float DFFastAddDemote(float Lhs, float Rhs) { return Rhs + Lhs; }
FDFScalar DFSubtract(float Lhs, float Rhs) { return DFAdd(Lhs, -Rhs); }
FDFScalar DFSubtract(FDFScalar Lhs, FDFScalar Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFScalar DFSubtract(FDFScalar Lhs, float Rhs) { return DFAdd(Lhs, -Rhs); }
FDFScalar DFSubtract(float Lhs, FDFScalar Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{
	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);
}
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{
	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{
	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float)1 ) ) );
	const float Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFScalar E = DFFastTwoSum(Rh, Rl);
	const FDFScalar D = DFMultiply(E, Th);
	const FDFScalar M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFScalar DFDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar P = DFTwoProduct(Th, Rhs);
	const float Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFDivide(float Lhs, float Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFScalar DFDivide(float Lhs, FDFScalar Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFGetComponent(float V, int C) { return MakeDFScalar(V, 0); }
FDFScalar DFGetComponent(FDFScalar V, int C) { return V; }
struct FDFVector2;
FDFVector2 DFBroadcast2(FDFScalar V);
float2 DFBroadcast2(float V);
FDFScalar DFGetComponent(FDFVector2 V, int C);
FDFVector2 DFNegate(FDFVector2 In);
FDFVector2 DFAdd (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, float Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, float Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, float Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, float Rhs);
float2 DFDemote(FDFVector2 In);
struct FDFVector2
{
	float2 High;
	float2 Low;
	float2 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector2 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }
float2 DFDemote(FDFVector2 Value) { return Value.High + Value.Low; }
float2 DFDemote(float2 Value) { return Value; }
FDFVector2 DFNegate(FDFVector2 Value)
{
	return MakeDFVector2(-Value.High, -Value.Low);
}
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);
}
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);
}
FDFVector2 DFAdd(float2 Lhs, float2 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector2 DFAdd(FDFVector2 Lhs, FDFVector2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector2 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector2 DFAdd(FDFVector2 Lhs, float2 Rhs)
{
	const FDFVector2 S = DFTwoSum(Lhs.High, Rhs);
	const float2 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector2 DFAdd(float2 Lhs, FDFVector2 Rhs) { return DFAdd(Rhs, Lhs); }
float2 DFAddDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector2 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;
}
float2 DFAddDemote(FDFVector2 Lhs, float2 Rhs)
{
	const FDFVector2 S = DFTwoSum(Lhs.High, Rhs);
	const float2 T = Lhs.Low + S.Low;
	return S.High + T;
}
float2 DFAddDemote(float2 Lhs, FDFVector2 Rhs) { return DFAddDemote(Rhs, Lhs); }
float2 DFAddDemote(float2 Lhs, float2 Rhs) { return Lhs + Rhs; }
float2 DFFastAddDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;
}
float2 DFFastAddDemote(FDFVector2 Lhs, float2 Rhs) { return DFAddDemote(Lhs, Rhs); }
float2 DFFastAddDemote(float2 Lhs, FDFVector2 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float2 DFFastAddDemote(float2 Lhs, float2 Rhs) { return Rhs + Lhs; }
FDFVector2 DFSubtract(float2 Lhs, float2 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector2 DFSubtract(FDFVector2 Lhs, FDFVector2 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector2 DFSubtract(FDFVector2 Lhs, float2 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector2 DFSubtract(float2 Lhs, FDFVector2 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{
	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);
}
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float2 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float2)1 ) ) );
	const float2 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector2 E = DFFastTwoSum(Rh, Rl);
	const FDFVector2 D = DFMultiply(E, Th);
	const FDFVector2 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector2 DFDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 P = DFTwoProduct(Th, Rhs);
	const float2 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float2 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float2 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFDivide(float2 Lhs, float2 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector2 DFDivide(float2 Lhs, FDFVector2 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}
FDFVector2  DFAdd (FDFScalar Lhs, FDFVector2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (float Lhs, FDFVector2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (FDFScalar Lhs, float2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (float Lhs, float2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (FDFVector2 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (FDFVector2 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (float2 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (float2 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (float Lhs, FDFVector2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (FDFScalar Lhs, float2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (float Lhs, float2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (FDFVector2 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (float2 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (float2 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (float Lhs, FDFVector2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (FDFScalar Lhs, float2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (float Lhs, float2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (FDFVector2 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (float2 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (float2 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (FDFScalar Lhs, FDFVector2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (float Lhs, FDFVector2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (FDFScalar Lhs, float2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (float Lhs, float2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (FDFVector2 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (FDFVector2 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (float2 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (float2 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (float Lhs, FDFVector2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (FDFScalar Lhs, float2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (float Lhs, float2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (FDFVector2 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (float2 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (float2 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
struct FDFVector3;
FDFVector3 DFBroadcast3(FDFScalar V);
float3 DFBroadcast3(float V);
FDFScalar DFGetComponent(FDFVector3 V, int C);
FDFVector3 DFNegate(FDFVector3 In);
FDFVector3 DFAdd (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, float Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, float Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, float Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, float Rhs);
float3 DFDemote(FDFVector3 In);
struct FDFVector3
{
	float3 High;
	float3 Low;
	float3 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector3 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }
float3 DFDemote(FDFVector3 Value) { return Value.High + Value.Low; }
float3 DFDemote(float3 Value) { return Value; }
FDFVector3 DFNegate(FDFVector3 Value)
{
	return MakeDFVector3(-Value.High, -Value.Low);
}
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);
}
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);
}
FDFVector3 DFAdd(float3 Lhs, float3 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector3 DFAdd(FDFVector3 Lhs, FDFVector3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector3 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector3 DFAdd(FDFVector3 Lhs, float3 Rhs)
{
	const FDFVector3 S = DFTwoSum(Lhs.High, Rhs);
	const float3 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector3 DFAdd(float3 Lhs, FDFVector3 Rhs) { return DFAdd(Rhs, Lhs); }
float3 DFAddDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector3 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;
}
float3 DFAddDemote(FDFVector3 Lhs, float3 Rhs)
{
	const FDFVector3 S = DFTwoSum(Lhs.High, Rhs);
	const float3 T = Lhs.Low + S.Low;
	return S.High + T;
}
float3 DFAddDemote(float3 Lhs, FDFVector3 Rhs) { return DFAddDemote(Rhs, Lhs); }
float3 DFAddDemote(float3 Lhs, float3 Rhs) { return Lhs + Rhs; }
float3 DFFastAddDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;
}
float3 DFFastAddDemote(FDFVector3 Lhs, float3 Rhs) { return DFAddDemote(Lhs, Rhs); }
float3 DFFastAddDemote(float3 Lhs, FDFVector3 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float3 DFFastAddDemote(float3 Lhs, float3 Rhs) { return Rhs + Lhs; }
FDFVector3 DFSubtract(float3 Lhs, float3 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector3 DFSubtract(FDFVector3 Lhs, FDFVector3 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector3 DFSubtract(FDFVector3 Lhs, float3 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector3 DFSubtract(float3 Lhs, FDFVector3 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{
	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);
}
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float3 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float3)1 ) ) );
	const float3 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector3 E = DFFastTwoSum(Rh, Rl);
	const FDFVector3 D = DFMultiply(E, Th);
	const FDFVector3 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector3 DFDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 P = DFTwoProduct(Th, Rhs);
	const float3 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float3 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float3 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFDivide(float3 Lhs, float3 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector3 DFDivide(float3 Lhs, FDFVector3 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}
FDFVector3  DFAdd (FDFScalar Lhs, FDFVector3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (float Lhs, FDFVector3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (FDFScalar Lhs, float3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (float Lhs, float3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (FDFVector3 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (FDFVector3 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (float3 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (float3 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (float Lhs, FDFVector3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (FDFScalar Lhs, float3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (float Lhs, float3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (FDFVector3 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (float3 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (float3 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (float Lhs, FDFVector3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (FDFScalar Lhs, float3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (float Lhs, float3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (FDFVector3 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (float3 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (float3 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (FDFScalar Lhs, FDFVector3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (float Lhs, FDFVector3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (FDFScalar Lhs, float3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (float Lhs, float3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (FDFVector3 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (FDFVector3 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (float3 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (float3 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (float Lhs, FDFVector3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (FDFScalar Lhs, float3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (float Lhs, float3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (FDFVector3 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (float3 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (float3 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
struct FDFVector4;
FDFVector4 DFBroadcast4(FDFScalar V);
float4 DFBroadcast4(float V);
FDFScalar DFGetComponent(FDFVector4 V, int C);
FDFVector4 DFNegate(FDFVector4 In);
FDFVector4 DFAdd (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, float Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, float Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, float Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, float Rhs);
float4 DFDemote(FDFVector4 In);
struct FDFVector4
{
	float4 High;
	float4 Low;
	float4 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector4 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }
float4 DFDemote(FDFVector4 Value) { return Value.High + Value.Low; }
float4 DFDemote(float4 Value) { return Value; }
FDFVector4 DFNegate(FDFVector4 Value)
{
	return MakeDFVector4(-Value.High, -Value.Low);
}
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);
}
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);
}
FDFVector4 DFAdd(float4 Lhs, float4 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector4 DFAdd(FDFVector4 Lhs, FDFVector4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector4 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector4 DFAdd(FDFVector4 Lhs, float4 Rhs)
{
	const FDFVector4 S = DFTwoSum(Lhs.High, Rhs);
	const float4 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector4 DFAdd(float4 Lhs, FDFVector4 Rhs) { return DFAdd(Rhs, Lhs); }
float4 DFAddDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector4 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;
}
float4 DFAddDemote(FDFVector4 Lhs, float4 Rhs)
{
	const FDFVector4 S = DFTwoSum(Lhs.High, Rhs);
	const float4 T = Lhs.Low + S.Low;
	return S.High + T;
}
float4 DFAddDemote(float4 Lhs, FDFVector4 Rhs) { return DFAddDemote(Rhs, Lhs); }
float4 DFAddDemote(float4 Lhs, float4 Rhs) { return Lhs + Rhs; }
float4 DFFastAddDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;
}
float4 DFFastAddDemote(FDFVector4 Lhs, float4 Rhs) { return DFAddDemote(Lhs, Rhs); }
float4 DFFastAddDemote(float4 Lhs, FDFVector4 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float4 DFFastAddDemote(float4 Lhs, float4 Rhs) { return Rhs + Lhs; }
FDFVector4 DFSubtract(float4 Lhs, float4 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector4 DFSubtract(FDFVector4 Lhs, FDFVector4 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector4 DFSubtract(FDFVector4 Lhs, float4 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector4 DFSubtract(float4 Lhs, FDFVector4 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{
	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);
}
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float4 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float4)1 ) ) );
	const float4 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector4 E = DFFastTwoSum(Rh, Rl);
	const FDFVector4 D = DFMultiply(E, Th);
	const FDFVector4 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector4 DFDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 P = DFTwoProduct(Th, Rhs);
	const float4 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float4 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float4 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFDivide(float4 Lhs, float4 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector4 DFDivide(float4 Lhs, FDFVector4 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}
FDFVector4  DFAdd (FDFScalar Lhs, FDFVector4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (float Lhs, FDFVector4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (FDFScalar Lhs, float4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (float Lhs, float4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (FDFVector4 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (FDFVector4 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (float4 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (float4 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (float Lhs, FDFVector4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (FDFScalar Lhs, float4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (float Lhs, float4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (FDFVector4 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (float4 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (float4 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (float Lhs, FDFVector4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (FDFScalar Lhs, float4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (float Lhs, float4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (FDFVector4 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (float4 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (float4 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (FDFScalar Lhs, FDFVector4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (float Lhs, FDFVector4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (FDFScalar Lhs, float4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (float Lhs, float4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (FDFVector4 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (FDFVector4 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (float4 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (float4 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (float Lhs, FDFVector4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (FDFScalar Lhs, float4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (float Lhs, float4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (FDFVector4 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (float4 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (float4 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 
};
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;
	return Result;
}
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);
	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;
	Result[3].xyz += Translation;
	return Result;
}
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }
float4x4 DFDemote(FDFMatrix V)
{
	return MultiplyTranslation(V.M, V.PostTranslation);
}
float4x4 DFDemote(float4x4 V)
{
	return V;
}
float4x4 DFDemote(FDFInverseMatrix V)
{
	return MultiplyTranslation(-V.PreTranslation, V.M);
}
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}
struct FLightSceneData
{
	FDFVector3 WorldPosition;
	float InvRadius;
	float FalloffExponent;
	float4 Color;
	float3 Direction;
	float SpecularScale;
	float DiffuseScale;
	float3 Tangent;
	float SourceRadius;
	float2 SpotAngles;
	float SoftSourceRadius;
	float SourceLength;
	float RectLightBarnCosAngle;
	float RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float RectLightAtlasMaxLevel;
	float InverseExposureBlend;
	float IESAtlasIndex;
	uint LightTypeAndShadowMapChannelMaskPacked;
	float2 Padding;
};
cbuffer View {
	 float4x4    View_TranslatedWorldToClip ;
	 float4x4    View_RelativeWorldToClip ;
	 float4x4    View_ClipToRelativeWorld ;
	 float4x4    View_TranslatedWorldToView ;
	 float4x4    View_ViewToTranslatedWorld ;
	 float4x4    View_TranslatedWorldToCameraView ;
	 float4x4    View_CameraViewToTranslatedWorld ;
	 float4x4    View_ViewToClip ;
	 float4x4    View_ViewToClipNoAA ;
	 float4x4    View_ClipToView ;
	 float4x4    View_ClipToTranslatedWorld ;
	 float4x4    View_SVPositionToTranslatedWorld ;
	 float4x4    View_ScreenToRelativeWorld ;
	 float4x4    View_ScreenToTranslatedWorld ;
	 float4x4    View_MobileMultiviewShadowTransform ;
	 float4x4    View_MobileMultiviewDecalTransform ;
	 float4x4    View_FirstPersonTransform ;
	 float4x4    View_PrevFirstPersonTransform ;
	 float3    View_ViewOriginHigh ;
	 float    View_Padding1164 ;
	 float3    View_ViewForward ;
	 float    View_Padding1180 ;
	 float3    View_ViewUp ;
	 float    View_Padding1196 ;
	 float3    View_ViewRight ;
	 float    View_Padding1212 ;
	 float3    View_HMDViewNoRollUp ;
	 float    View_Padding1228 ;
	 float3    View_HMDViewNoRollRight ;
	 float    View_Padding1244 ;
	 float4    View_InvDeviceZToWorldZTransform ;
	 float4    View_ScreenPositionScaleBias ;
	 float3    View_ViewOriginLow ;
	 float    View_Padding1292 ;
	 float3    View_TranslatedWorldCameraOrigin ;
	 float    View_Padding1308 ;
	 float3    View_WorldViewOriginHigh ;
	 float    View_Padding1324 ;
	 float3    View_WorldViewOriginLow ;
	 float    View_Padding1340 ;
	 float3    View_PreViewTranslationHigh ;
	 float    View_Padding1356 ;
	 float3    View_PreViewTranslationLow ;
	 float    View_Padding1372 ;
	 float4x4    View_PrevViewToClip ;
	 float4x4    View_PrevClipToView ;
	 float4x4    View_PrevTranslatedWorldToClip ;
	 float4x4    View_PrevTranslatedWorldToView ;
	 float4x4    View_PrevViewToTranslatedWorld ;
	 float4x4    View_PrevTranslatedWorldToCameraView ;
	 float4x4    View_PrevCameraViewToTranslatedWorld ;
	 float3    View_PrevTranslatedWorldCameraOrigin ;
	 float    View_Padding1836 ;
	 float3    View_PrevWorldCameraOriginHigh ;
	 float    View_Padding1852 ;
	 float3    View_PrevWorldCameraOriginLow ;
	 float    View_Padding1868 ;
	 float3    View_PrevWorldViewOriginHigh ;
	 float    View_Padding1884 ;
	 float3    View_PrevWorldViewOriginLow ;
	 float    View_Padding1900 ;
	 float3    View_PrevPreViewTranslationHigh ;
	 float    View_Padding1916 ;
	 float3    View_PrevPreViewTranslationLow ;
	 float    View_Padding1932 ;
	 float3    View_ViewTilePosition ;
	 float    View_Padding1948 ;
	 float3    View_RelativeWorldCameraOriginTO ;
	 float    View_Padding1964 ;
	 float3    View_RelativeWorldViewOriginTO ;
	 float    View_Padding1980 ;
	 float3    View_RelativePreViewTranslationTO ;
	 float    View_Padding1996 ;
	 float3    View_PrevRelativeWorldCameraOriginTO ;
	 float    View_Padding2012 ;
	 float3    View_PrevRelativeWorldViewOriginTO ;
	 float    View_Padding2028 ;
	 float3    View_RelativePrevPreViewTranslationTO ;
	 float    View_Padding2044 ;
	 float4x4    View_PrevClipToRelativeWorld ;
	 float4x4    View_PrevScreenToTranslatedWorld ;
	 float4x4    View_ClipToPrevClip ;
	 float4x4    View_ClipToPrevClipWithAA ;
	 float4    View_TemporalAAJitter ;
	 float4    View_GlobalClippingPlane ;
	 float2    View_FieldOfViewWideAngles ;
	 float2    View_PrevFieldOfViewWideAngles ;
	 float4    View_ViewRectMin ;
	 float4    View_ViewSizeAndInvSize ;
	 uint4    View_ViewRectMinAndSize ;
	 float4    View_LightProbeSizeRatioAndInvSizeRatio ;
	 float4    View_BufferSizeAndInvSize ;
	 float4    View_BufferBilinearUVMinMax ;
	 float4    View_ScreenToViewSpace ;
	 float2    View_BufferToSceneTextureScale ;
	 float2    View_ResolutionFractionAndInv ;
	 int    View_NumSceneColorMSAASamples ;
	 float    View_ProjectionDepthThicknessScale ;
	 float    View_PreExposure ;
	 float    View_OneOverPreExposure ;
	 float4    View_DiffuseOverrideParameter ;
	 float4    View_SpecularOverrideParameter ;
	 float4    View_NormalOverrideParameter ;
	 float2    View_RoughnessOverrideParameter ;
	 float    View_PrevFrameGameTime ;
	 float    View_PrevFrameRealTime ;
	 float    View_OutOfBoundsMask ;
	 float    View_Padding2564 ;
	 float    View_Padding2568 ;
	 float    View_Padding2572 ;
	 float3    View_WorldCameraMovementSinceLastFrame ;
	 float    View_CullingSign ;
	 float    View_NearPlane ;
	 float    View_OrthoFarPlane ;
	 float    View_GameTime ;
	 float    View_RealTime ;
	 float    View_DeltaTime ;
	 float    View_MaterialTextureMipBias ;
	 float    View_MaterialTextureDerivativeMultiply ;
	 uint    View_Random ;
	 uint    View_FrameNumber ;
	 uint    View_FrameCounter ;
	 uint    View_StateFrameIndexMod8 ;
	 uint    View_StateFrameIndex ;
	 uint    View_StateOutputFrameIndex ;
	 uint    View_DebugViewModeMask ;
	 uint    View_WorldIsPaused ;
	 float    View_CameraCut ;
	 float    View_UnlitViewmodeMask ;
	 float    View_Padding2660 ;
	 float    View_Padding2664 ;
	 float    View_Padding2668 ;
	 float4    View_DirectionalLightColor ;
	 float3    View_DirectionalLightDirection ;
	 float    View_Padding2700 ;
	 float4    View_TranslucencyLightingVolumeMin[2] ;
	 float4    View_TranslucencyLightingVolumeInvSize[2] ;
	 float4    View_TemporalAAParams ;
	 float4    View_CircleDOFParams ;
	 float    View_DepthOfFieldSensorWidth ;
	 float    View_DepthOfFieldFocalDistance ;
	 float    View_DepthOfFieldScale ;
	 float    View_DepthOfFieldFocalLength ;
	 float    View_DepthOfFieldFocalRegion ;
	 float    View_DepthOfFieldNearTransitionRegion ;
	 float    View_DepthOfFieldFarTransitionRegion ;
	 float    View_MotionBlurNormalizedToPixel ;
	 float    View_GeneralPurposeTweak ;
	 float    View_GeneralPurposeTweak2 ;
	 float    View_DemosaicVposOffset ;
	 float    View_DecalDepthBias ;
	 float3    View_IndirectLightingColorScale ;
	 float    View_Padding2860 ;
	 float3    View_PrecomputedIndirectLightingColorScale ;
	 float    View_Padding2876 ;
	 float3    View_PrecomputedIndirectSpecularColorScale ;
	 float    View_Padding2892 ;
	 float4    View_AtmosphereLightDirection[2] ;
	 float4    View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    View_AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    View_AtmosphereLightDiscLuminance[2] ;
	 float4    View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    View_SkyViewLutSizeAndInvSize ;
	 float3    View_SkyCameraTranslatedWorldOrigin ;
	 float    View_Padding3084 ;
	 float4    View_SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    View_SkyViewLutReferential ;
	 float4    View_SkyAtmosphereSkyLuminanceFactor ;
	 float    View_SkyAtmospherePresentInScene ;
	 float    View_SkyAtmosphereHeightFogContribution ;
	 float    View_SkyAtmosphereBottomRadiusKm ;
	 float    View_SkyAtmosphereTopRadiusKm ;
	 float4    View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    View_SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    View_SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    View_Padding3240 ;
	 float    View_Padding3244 ;
	 float3    View_NormalCurvatureToRoughnessScaleBias ;
	 float    View_RenderingReflectionCaptureMask ;
	 float    View_RealTimeReflectionCapture ;
	 float    View_RealTimeReflectionCapturePreExposure ;
	 float    View_Padding3272 ;
	 float    View_Padding3276 ;
	 float4    View_AmbientCubemapTint ;
	 float    View_AmbientCubemapIntensity ;
	 float    View_SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    View_SkyLightAffectReflectionFlag ;
	 float    View_SkyLightAffectGlobalIlluminationFlag ;
	 float4    View_SkyLightColor ;
	 float    View_SkyLightVolumetricScatteringIntensity ;
	 float    View_Padding3332 ;
	 float    View_Padding3336 ;
	 float    View_Padding3340 ;
	 float4    View_MobileSkyIrradianceEnvironmentMap[8] ;
	 float    View_MobilePreviewMode ;
	 float    View_HMDEyePaddingOffset ;
	 float    View_ReflectionCubemapMaxMip ;
	 float    View_ShowDecalsMask ;
	 uint    View_DistanceFieldAOSpecularOcclusionMode ;
	 float    View_IndirectCapsuleSelfShadowingIntensity ;
	 float    View_Padding3496 ;
	 float    View_Padding3500 ;
	 float3    View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    View_StereoPassIndex ;
	 float4    View_GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    View_GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    View_GlobalDistanceFieldMipFactor ;
	 float    View_GlobalDistanceFieldMipTransition ;
	 int    View_GlobalDistanceFieldClipmapSizeInPages ;
	 int    View_Padding3916 ;
	 float3    View_GlobalDistanceFieldInvPageAtlasSize ;
	 float    View_Padding3932 ;
	 float3    View_GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    View_GlobalVolumeDimension ;
	 float    View_GlobalVolumeTexelSize ;
	 float    View_MaxGlobalDFAOConeDistance ;
	 uint    View_NumGlobalSDFClipmaps ;
	 float    View_CoveredExpandSurfaceScale ;
	 float    View_NotCoveredExpandSurfaceScale ;
	 float    View_NotCoveredMinStepScale ;
	 float    View_DitheredTransparencyStepThreshold ;
	 float    View_DitheredTransparencyTraceThreshold ;
	 float    View_ViewportScaleUI ;
	 float    View_Padding3988 ;
	 int2    View_CursorPosition ;
	 float    View_bCheckerboardSubsurfaceProfileRendering ;
	 float    View_Padding4004 ;
	 float    View_Padding4008 ;
	 float    View_Padding4012 ;
	 float3    View_VolumetricFogInvGridSize ;
	 float    View_Padding4028 ;
	 float3    View_VolumetricFogGridZParams ;
	 float    View_Padding4044 ;
	 float2    View_VolumetricFogSVPosToVolumeUV ;
	 float2    View_VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    View_VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    View_VolumetricFogPrevUVMax ;
	 float2    View_VolumetricFogPrevUVMaxForTemporalBlend ;
	 float    View_Padding4088 ;
	 float    View_Padding4092 ;
	 float3    View_VolumetricFogPrevResourceGridSize ;
	 float    View_Padding4108 ;
	 float2    View_VolumetricFogScreenToResourceUV ;
	 float2    View_VolumetricFogUVMax ;
	 float    View_VolumetricFogMaxDistance ;
	 float    View_Padding4132 ;
	 float    View_Padding4136 ;
	 float    View_Padding4140 ;
	 float3    View_VolumetricLightmapWorldToUVScale ;
	 float    View_Padding4156 ;
	 float3    View_VolumetricLightmapWorldToUVAdd ;
	 float    View_Padding4172 ;
	 float3    View_VolumetricLightmapIndirectionTextureSize ;
	 float    View_VolumetricLightmapBrickSize ;
	 float3    View_VolumetricLightmapBrickTexelSize ;
	 float    View_IndirectLightingCacheShowFlag ;
	 float    View_EyeToPixelSpreadAngle ;
	 float    View_Padding4212 ;
	 float    View_Padding4216 ;
	 float    View_Padding4220 ;
	 float4    View_XRPassthroughCameraUVs[2] ;
	 float    View_GlobalVirtualTextureMipBias ;
	 uint    View_VirtualTextureFeedbackShift ;
	 uint    View_VirtualTextureFeedbackMask ;
	 uint    View_VirtualTextureFeedbackStride ;
	 uint    View_VirtualTextureFeedbackJitterOffset ;
	 uint    View_VirtualTextureFeedbackSampleOffset ;
	 uint    View_Padding4280 ;
	 uint    View_Padding4284 ;
	 float4    View_RuntimeVirtualTextureMipLevel ;
	 float2    View_RuntimeVirtualTexturePackHeight ;
	 float    View_Padding4312 ;
	 float    View_Padding4316 ;
	 float4    View_RuntimeVirtualTextureDebugParams ;
	 int    View_FarShadowStaticMeshLODBias ;
	 float    View_MinRoughness ;
	 float    View_Padding4344 ;
	 float    View_Padding4348 ;
	 float4    View_HairRenderInfo ;
	 uint    View_EnableSkyLight ;
	 uint    View_HairRenderInfoBits ;
	 uint    View_HairComponents ;
	 float    View_bSubsurfacePostprocessEnabled ;
	 float4    View_SSProfilesTextureSizeAndInvSize ;
	 float4    View_SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    View_SpecularProfileTextureSizeAndInvSize ;
	 float3    View_PhysicsFieldClipmapCenter ;
	 float    View_PhysicsFieldClipmapDistance ;
	 int    View_PhysicsFieldClipmapResolution ;
	 int    View_PhysicsFieldClipmapExponent ;
	 int    View_PhysicsFieldClipmapCount ;
	 int    View_PhysicsFieldTargetCount ;
	 int4    View_PhysicsFieldTargets[32] ;
	 uint    View_GPUSceneViewId ;
	 float    View_ViewResolutionFraction ;
	 float    View_SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    View_Padding4988 ;
	 float4    View_TanAndInvTanHalfFOV ;
	 float4    View_PrevTanAndInvTanHalfFOV ;
	 float2    View_WorldDepthToPixelWorldRadius ;
	 float    View_Padding5032 ;
	 float    View_Padding5036 ;
	 float4    View_ScreenRayLengthMultiplier ;
	 float4    View_GlintLUTParameters0 ;
	 float4    View_GlintLUTParameters1 ;
	 float    View_MaterialMaxEmissiveValue ;
	 int    View_PostVolumeUserFlags ;
	 int    View_Padding5096 ;
	 int    View_Padding5100 ;
	 int4    View_EnvironmentComponentsFlags ;
	 uint    BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint    View_Padding5124 ;
	 uint    BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint    View_Padding5132 ;
	 uint    BindlessSRV_View_VolumetricLightmapIndirectionTexture ;
	 uint    View_Padding5140 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickAmbientVector ;
	 uint    View_Padding5148 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    View_Padding5156 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    View_Padding5164 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    View_Padding5172 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    View_Padding5180 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    View_Padding5188 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    View_Padding5196 ;
	 uint    BindlessSRV_View_SkyBentNormalBrickTexture ;
	 uint    View_Padding5204 ;
	 uint    BindlessSRV_View_DirectionalLightShadowingBrickTexture ;
	 uint    View_Padding5212 ;
	 uint    BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    View_Padding5220 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint    View_Padding5228 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint    View_Padding5236 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint    View_Padding5244 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint    View_Padding5252 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint    View_Padding5260 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint    View_Padding5268 ;
	 uint    BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint    View_Padding5276 ;
	 uint    BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint    View_Padding5284 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint    View_Padding5292 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    View_Padding5300 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldPageTableTexture ;
	 uint    View_Padding5308 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldMipTexture ;
	 uint    View_Padding5316 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    View_Padding5324 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    View_Padding5332 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint    View_Padding5340 ;
	 uint    BindlessSRV_View_AtmosphereTransmittanceTexture ;
	 uint    View_Padding5348 ;
	 uint    BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint    View_Padding5356 ;
	 uint    BindlessSRV_View_AtmosphereIrradianceTexture ;
	 uint    View_Padding5364 ;
	 uint    BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint    View_Padding5372 ;
	 uint    BindlessSRV_View_AtmosphereInscatterTexture ;
	 uint    View_Padding5380 ;
	 uint    BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint    View_Padding5388 ;
	 uint    BindlessSRV_View_PerlinNoiseGradientTexture ;
	 uint    View_Padding5396 ;
	 uint    BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint    View_Padding5404 ;
	 uint    BindlessSRV_View_PerlinNoise3DTexture ;
	 uint    View_Padding5412 ;
	 uint    BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint    View_Padding5420 ;
	 uint    BindlessSRV_View_SobolSamplingTexture ;
	 uint    View_Padding5428 ;
	 uint    BindlessSampler_View_SharedPointWrappedSampler ;
	 uint    View_Padding5436 ;
	 uint    BindlessSampler_View_SharedPointClampedSampler ;
	 uint    View_Padding5444 ;
	 uint    BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint    View_Padding5452 ;
	 uint    BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint    View_Padding5460 ;
	 uint    BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint    View_Padding5468 ;
	 uint    BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint    View_Padding5476 ;
	 uint    BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint    View_Padding5484 ;
	 uint    BindlessSRV_View_PreIntegratedBRDF ;
	 uint    View_Padding5492 ;
	 uint    BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint    View_Padding5500 ;
	 uint    BindlessSRV_View_SkyIrradianceEnvironmentMap ;
	 uint    View_Padding5508 ;
	 uint    BindlessSRV_View_TransmittanceLutTexture ;
	 uint    View_Padding5516 ;
	 uint    BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint    View_Padding5524 ;
	 uint    BindlessSRV_View_SkyViewLutTexture ;
	 uint    View_Padding5532 ;
	 uint    BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint    View_Padding5540 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolume ;
	 uint    View_Padding5548 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint    View_Padding5556 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    View_Padding5564 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    View_Padding5572 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    View_Padding5580 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    View_Padding5588 ;
	 uint    BindlessSRV_View_DistantSkyLightLutBufferSRV ;
	 uint    View_Padding5596 ;
	 uint    BindlessSRV_View_MobileDistantSkyLightLutBufferSRV ;
	 uint    View_Padding5604 ;
	 uint    BindlessSRV_View_HairScatteringLUTTexture ;
	 uint    View_Padding5612 ;
	 uint    BindlessSampler_View_HairScatteringLUTSampler ;
	 uint    View_Padding5620 ;
	 uint    BindlessSRV_View_GGXLTCMatTexture ;
	 uint    View_Padding5628 ;
	 uint    BindlessSampler_View_GGXLTCMatSampler ;
	 uint    View_Padding5636 ;
	 uint    BindlessSRV_View_GGXLTCAmpTexture ;
	 uint    View_Padding5644 ;
	 uint    BindlessSampler_View_GGXLTCAmpSampler ;
	 uint    View_Padding5652 ;
	 uint    BindlessSRV_View_SheenLTCTexture ;
	 uint    View_Padding5660 ;
	 uint    BindlessSampler_View_SheenLTCSampler ;
	 uint    View_Padding5668 ;
	 uint    View_bShadingEnergyConservation ;
	 uint    View_bShadingEnergyPreservation ;
	 uint    BindlessSRV_View_ShadingEnergyGGXSpecTexture ;
	 uint    View_Padding5684 ;
	 uint    BindlessSRV_View_ShadingEnergyGGXGlassTexture ;
	 uint    View_Padding5692 ;
	 uint    BindlessSRV_View_ShadingEnergyClothSpecTexture ;
	 uint    View_Padding5700 ;
	 uint    BindlessSRV_View_ShadingEnergyDiffuseTexture ;
	 uint    View_Padding5708 ;
	 uint    BindlessSampler_View_ShadingEnergySampler ;
	 uint    View_Padding5716 ;
	 uint    BindlessSRV_View_GlintTexture ;
	 uint    View_Padding5724 ;
	 uint    BindlessSampler_View_GlintSampler ;
	 uint    View_Padding5732 ;
	 uint    BindlessSRV_View_SimpleVolumeTexture ;
	 uint    View_Padding5740 ;
	 uint    BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint    View_Padding5748 ;
	 uint    BindlessSRV_View_SimpleVolumeEnvTexture ;
	 uint    View_Padding5756 ;
	 uint    BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint    View_Padding5764 ;
	 uint    BindlessSRV_View_SSProfilesTexture ;
	 uint    View_Padding5772 ;
	 uint    BindlessSampler_View_SSProfilesSampler ;
	 uint    View_Padding5780 ;
	 uint    BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint    View_Padding5788 ;
	 uint    BindlessSRV_View_SSProfilesPreIntegratedTexture ;
	 uint    View_Padding5796 ;
	 uint    BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint    View_Padding5804 ;
	 uint    BindlessSRV_View_SpecularProfileTexture ;
	 uint    View_Padding5812 ;
	 uint    BindlessSampler_View_SpecularProfileSampler ;
	 uint    View_Padding5820 ;
	 uint    BindlessSRV_View_WaterIndirection ;
	 uint    View_Padding5828 ;
	 uint    BindlessSRV_View_WaterData ;
	 uint    View_Padding5836 ;
	 int    View_WaterInfoTextureViewIndex ;
	 int    View_Padding5844 ;
	 int    View_Padding5848 ;
	 int    View_Padding5852 ;
	 float4    View_RectLightAtlasSizeAndInvSize ;
	 float    View_RectLightAtlasMaxMipLevel ;
	 float    View_Padding5876 ;
	 uint    BindlessSRV_View_RectLightAtlasTexture ;
	 uint    View_Padding5884 ;
	 uint    BindlessSampler_View_RectLightAtlasSampler ;
	 uint    View_Padding5892 ;
	 uint    View_Padding5896 ;
	 uint    View_Padding5900 ;
	 float4    View_IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_View_IESAtlasTexture ;
	 uint    View_Padding5924 ;
	 uint    BindlessSampler_View_IESAtlasSampler ;
	 uint    View_Padding5932 ;
	 uint    BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint    View_Padding5940 ;
	 uint    BindlessSRV_View_LandscapeIndirection ;
	 uint    View_Padding5948 ;
	 uint    BindlessSRV_View_LandscapePerComponentData ;
	 uint    View_Padding5956 ;
	 uint    BindlessUAV_View_VTFeedbackBuffer ;
	 uint    View_Padding5964 ;
	 uint    BindlessSRV_View_PhysicsFieldClipmapBuffer ;
	 uint    View_Padding5972 ;
	 uint    View_Padding5976 ;
	 uint    View_Padding5980 ;
	 float3    View_TLASPreViewTranslationHigh ;
	 float    View_Padding5996 ;
	 float3    View_TLASPreViewTranslationLow ;
 }
Texture2D<uint>  View_SobolSamplingTexture;
SamplerState  View_SharedBilinearClampedSampler;
Texture2D  View_PreIntegratedBRDF;
SamplerState  View_PreIntegratedBRDFSampler;
Texture2D  View_GGXLTCMatTexture;
Texture2D  View_GGXLTCAmpTexture;
Texture2D  View_SSProfilesTexture;
Texture2DArray<float>  View_IESAtlasTexture;
cbuffer BlueNoise {
	 int3    BlueNoise_Dimensions ;
	 int    BlueNoise_Padding12 ;
	 int3    BlueNoise_ModuloMasks ;
	 int    BlueNoise_Padding28 ;
	 uint    BindlessSRV_BlueNoise_ScalarTexture ;
	 uint    BlueNoise_Padding36 ;
	 uint    BindlessSRV_BlueNoise_Vec2Texture ;
 }
Texture2D  BlueNoise_ScalarTexture;
Texture2D  BlueNoise_Vec2Texture;
Texture2D  SceneTexturesStruct_SceneDepthTexture;
Texture2D  SceneTexturesStruct_GBufferATexture;
Texture2D  SceneTexturesStruct_GBufferBTexture;
Texture2D  SceneTexturesStruct_GBufferCTexture;
Texture2D  SceneTexturesStruct_GBufferDTexture;
Texture2D  SceneTexturesStruct_GBufferFTexture;
Texture2D  SceneTexturesStruct_CustomDepthTexture;
Texture2D<uint2>  SceneTexturesStruct_CustomStencilTexture;
SamplerState  SceneTexturesStruct_PointClampSampler;
cbuffer ForwardLightData {
	 uint    ForwardLightData_NumLocalLights ;
	 uint    ForwardLightData_NumReflectionCaptures ;
	 uint    ForwardLightData_HasDirectionalLight ;
	 uint    ForwardLightData_NumGridCells ;
	 int3    ForwardLightData_CulledGridSize ;
	 uint    ForwardLightData_MaxCulledLightsPerCell ;
	 uint    ForwardLightData_LightGridPixelSizeShift ;
	 uint    ForwardLightData_Padding36 ;
	 uint    ForwardLightData_Padding40 ;
	 uint    ForwardLightData_Padding44 ;
	 float3    ForwardLightData_LightGridZParams ;
	 float    ForwardLightData_Padding60 ;
	 float3    ForwardLightData_DirectionalLightDirection ;
	 float    ForwardLightData_DirectionalLightSourceRadius ;
	 float    ForwardLightData_DirectionalLightSoftSourceRadius ;
	 float    ForwardLightData_Padding84 ;
	 float    ForwardLightData_Padding88 ;
	 float    ForwardLightData_Padding92 ;
	 float3    ForwardLightData_DirectionalLightColor ;
	 float    ForwardLightData_DirectionalLightVolumetricScatteringIntensity ;
	 float    ForwardLightData_DirectionalLightSpecularScale ;
	 float    ForwardLightData_DirectionalLightDiffuseScale ;
	 uint    ForwardLightData_DirectionalLightShadowMapChannelMask ;
	 uint    ForwardLightData_Padding124 ;
	 float2    ForwardLightData_DirectionalLightDistanceFadeMAD ;
	 uint    ForwardLightData_NumDirectionalLightCascades ;
	 int    ForwardLightData_DirectionalLightVSM ;
	 float4    ForwardLightData_CascadeEndDepths ;
	 float4x4    ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4] ;
	 float4    ForwardLightData_DirectionalLightShadowmapMinMax[4] ;
	 float4    ForwardLightData_DirectionalLightShadowmapAtlasBufferSize ;
	 float    ForwardLightData_DirectionalLightDepthBias ;
	 uint    ForwardLightData_DirectionalLightUseStaticShadowing ;
	 uint    ForwardLightData_SimpleLightsEndIndex ;
	 uint    ForwardLightData_ClusteredDeferredSupportedEndIndex ;
	 uint    ForwardLightData_MegaLightsSupportedStartIndex ;
	 uint    ForwardLightData_Padding516 ;
	 uint    ForwardLightData_Padding520 ;
	 uint    ForwardLightData_Padding524 ;
	 float4    ForwardLightData_DirectionalLightStaticShadowBufferSize ;
	 float4x4    ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow ;
	 uint    ForwardLightData_DirectLightingShowFlag ;
	 uint    ForwardLightData_LightFunctionAtlasLightIndex ;
	 uint    ForwardLightData_bAffectsTranslucentLighting ;
	 uint    ForwardLightData_Padding620 ;
	 uint    BindlessSRV_ForwardLightData_DirectionalLightShadowmapAtlas ;
	 uint    ForwardLightData_Padding628 ;
	 uint    BindlessSampler_ForwardLightData_ShadowmapSampler ;
	 uint    ForwardLightData_Padding636 ;
	 uint    BindlessSRV_ForwardLightData_DirectionalLightStaticShadowmap ;
	 uint    ForwardLightData_Padding644 ;
	 uint    BindlessSampler_ForwardLightData_StaticShadowmapSampler ;
	 uint    ForwardLightData_Padding652 ;
	 uint    BindlessSRV_ForwardLightData_ForwardLocalLightBuffer ;
	 uint    ForwardLightData_Padding660 ;
	 uint    BindlessSRV_ForwardLightData_NumCulledLightsGrid ;
	 uint    ForwardLightData_Padding668 ;
	 uint    BindlessSRV_ForwardLightData_CulledLightDataGrid32Bit ;
	 uint    ForwardLightData_Padding676 ;
	 uint    BindlessSRV_ForwardLightData_CulledLightDataGrid16Bit ;
 }
StructuredBuffer<float4>  ForwardLightData_ForwardLocalLightBuffer;
StructuredBuffer<uint>  ForwardLightData_NumCulledLightsGrid;
Buffer<uint>  ForwardLightData_CulledLightDataGrid16Bit;
cbuffer LightFunctionAtlas {
	 uint    BindlessSRV_LightFunctionAtlas_LightFunctionAtlasTexture ;
	 uint    LightFunctionAtlas_Padding4 ;
	 uint    BindlessSRV_LightFunctionAtlas_LightInfoDataBuffer ;
	 uint    LightFunctionAtlas_Padding12 ;
	 uint    BindlessSampler_LightFunctionAtlas_LightFunctionAtlasSampler ;
	 uint    LightFunctionAtlas_Padding20 ;
	 float    LightFunctionAtlas_Slot_UVSize ;
 }
Texture2D<float4>  LightFunctionAtlas_LightFunctionAtlasTexture;
StructuredBuffer<float4>  LightFunctionAtlas_LightInfoDataBuffer;
cbuffer ShaderPrintData {
	 int2    ShaderPrintData_Resolution ;
	 int2    ShaderPrintData_CursorCoord ;
	 float3    ShaderPrintData_TranslatedWorldOffset ;
	 float    ShaderPrintData_Padding28 ;
	 float2    ShaderPrintData_FontSize ;
	 float2    ShaderPrintData_FontSpacing ;
	 uint    ShaderPrintData_MaxCharacterCount ;
	 uint    ShaderPrintData_MaxSymbolCount ;
	 uint    ShaderPrintData_MaxStateCount ;
	 uint    ShaderPrintData_MaxLineCount ;
	 uint    ShaderPrintData_MaxTriangleCount ;
	 uint    ShaderPrintData_IsDrawLocked ;
 }
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float4x4 MobileMultiviewDecalTransform;
	float4x4 FirstPersonTransform;
	float4x4 PrevFirstPersonTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float OrthoFarPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint StateOutputFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	float ViewportScaleUI;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float3 VolumetricFogPrevResourceGridSize;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	float MaterialMaxEmissiveValue;
	int PostVolumeUserFlags;
	int4 EnvironmentComponentsFlags;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.MobileMultiviewDecalTransform = View_MobileMultiviewDecalTransform;
	Result.FirstPersonTransform = View_FirstPersonTransform;
	Result.PrevFirstPersonTransform = View_PrevFirstPersonTransform;
	Result.ViewOriginHigh = View_ViewOriginHigh;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.ViewOriginLow = View_ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View_WorldViewOriginHigh;
	Result.WorldViewOriginLow = View_WorldViewOriginLow;
	Result.PreViewTranslationHigh = View_PreViewTranslationHigh;
	Result.PreViewTranslationLow = View_PreViewTranslationLow;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View_PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View_PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View_PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View_PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View_PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View_PrevPreViewTranslationLow;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View_RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View_RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View_RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View_PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View_PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View_RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.OrthoFarPlane = View_OrthoFarPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.StateOutputFrameIndex = View_StateOutputFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View_SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.ViewportScaleUI = View_ViewportScaleUI;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View_VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogPrevResourceGridSize = View_VolumetricFogPrevResourceGridSize;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View_WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View_ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	Result.MaterialMaxEmissiveValue = View_MaterialMaxEmissiveValue;
	Result.PostVolumeUserFlags = View_PostVolumeUserFlags;
	Result.EnvironmentComponentsFlags = View_EnvironmentComponentsFlags;
	FinalizeViewState(Result);
	return Result;
}
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);
	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);
	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);
}
static ViewState ResolvedView = (ViewState)0.0f;
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float3 LuminanceFactors()
{
		return float3(0.2126390059, 0.7151686788, 0.0721923154);
}
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3(LuminanceFactors()));
}
float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}
float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}
float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}
float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}
float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}
float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}
float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}
float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}
float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}
float Square( float x )
{
	return x*x;
}
float2 Square( float2 x )
{
	return x*x;
}
float3 Square( float3 x )
{
	return x*x;
}
float4 Square( float4 x )
{
	return x*x;
}
float Pow2( float x )
{
	return x*x;
}
float2 Pow2( float2 x )
{
	return x*x;
}
float3 Pow2( float3 x )
{
	return x*x;
}
float4 Pow2( float4 x )
{
	return x*x;
}
float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}
float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}
float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}
float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip._44 >= 1.0f;
}
bool IsOrthoProjection(ViewState InView)
{
	return IsOrthoProjection(InView.ViewToClip);
}
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}
float ConvertFromDeviceZ(float DeviceZ)
{
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}
float3 GetCameraVector(ViewState InView, float3 Position, float3 CameraPosition)
{
	return  select_internal( IsOrthoProjection(InView) , InView.ViewForward , normalize(Position - CameraPosition) );
}
float3 GetCameraVector(float3 Position, float3 CameraPosition)
{
	return GetCameraVector(GetPrimaryView(), Position, CameraPosition);
}
float3 GetCameraVectorFromTranslatedWorldPosition(ViewState InView, float3 TranslatedWorldPosition)
{
	return GetCameraVector(TranslatedWorldPosition, InView.TranslatedWorldCameraOrigin);
}
float3 GetCameraVectorFromTranslatedWorldPosition(float3 TranslatedWorldPosition)
{
	return GetCameraVectorFromTranslatedWorldPosition(GetPrimaryView(), TranslatedWorldPosition);
}
float2 GetScreenPositionForProjectionType(float2 ScreenPosition, float SceneDepth)
{
	return  select_internal( IsOrthoProjection() , ScreenPosition , ScreenPosition * SceneDepth );
}
float BlueNoiseScalar(uint2 ScreenCoord, uint FrameIndex)
{
	uint3 WrappedCoordinate = uint3(ScreenCoord, FrameIndex) & BlueNoise_ModuloMasks;
	uint3 TextureCoordinate = uint3(WrappedCoordinate.x, WrappedCoordinate.z * BlueNoise_Dimensions.y + WrappedCoordinate.y, 0);
	return BlueNoise_ScalarTexture.Load(TextureCoordinate, 0).x;
}
float2 BlueNoiseVec2(uint2 ScreenCoord, uint FrameIndex)
{
	uint3 WrappedCoordinate = uint3(ScreenCoord, FrameIndex) & BlueNoise_ModuloMasks;
	uint3 TextureCoordinate = uint3(WrappedCoordinate.x, WrappedCoordinate.z * BlueNoise_Dimensions.y + WrappedCoordinate.y, 0);
	return BlueNoise_Vec2Texture.Load(TextureCoordinate, 0).xy;
}
bool IsSimpleShadingTileType(uint TileType)
{
	return TileType == 0
		|| TileType == 2
		|| TileType == 4;
}
bool IsRectLightTileType(uint TileType)
{
	return TileType == 2
		|| TileType == 3
		|| TileType == 4
		|| TileType == 5;
}
bool IsTexturedLightTileType(uint TileType)
{ 
	return TileType == 4
		|| TileType == 5;
}
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;
	bool bClampBSDFValue;
	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;
	uint ScatteringComponent;
};
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;
	o.bClampBSDFValue = true;
	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);
	return o;
}
float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};
FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}
struct FRectLightData
{
	float		 BarnCosAngle;
	float		 BarnLength;
	FRectTexture AtlasData;
};
FRectLightData UnpackRectLightData(uint In0, uint In1, uint In2)
{
	FRectLightData Out;
	Out.AtlasData.AtlasUVOffset	= float2(f16tof32(In0 & 0xFFFF), f16tof32(In0 >> 16));
	Out.AtlasData.AtlasUVScale	= float2(f16tof32(In1 & 0xFFFF), f16tof32(In1 >> 16));
	Out.BarnLength				= f16tof32(In2 & 0xFFFF);			
	Out.BarnCosAngle			= UnpackUnorm10(In2 >> 16);			
	Out.AtlasData.AtlasMaxLevel = float(In2 >> 26);					
	return Out;
}
struct FDirectionalLightData
{
	uint   HasDirectionalLight;
	uint   DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	float3 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float  DirectionalLightSourceRadius;
	float  DirectionalLightSoftSourceRadius;
	float  DirectionalLightSpecularScale;
	float  DirectionalLightDiffuseScale;
	uint  LightFunctionAtlasLightIndex;
	uint  bAffectsTranslucentLighting;
};
struct FLocalLightData
{
	float4 LightPositionAndInvRadius;
	float4 LightColorAndIdAndFalloffExponent;
	float4 SpotAnglesAndSourceRadiusPacked;
	float4 LightDirectionAndShadowMask;
	float4 LightTangentAndIESDataAndSpecularScale;
	float3 RectData;
	bool bClusteredDeferredSupported;
	bool bMegaLightsSupported;
	bool bIsSimpleLight;
	int  VirtualShadowMapId;
	int  PrevLocalLightIndex;
	int LightSceneId;
};
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  DiffuseScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
	uint  LightFunctionAtlasLightIndex;
	uint  bAffectsTranslucentLighting;
};
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	float   InvRadius;
	float3 Color;
	float   FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float  SoftSourceRadius;
	float2  SpotAngles;
	float  SourceRadius;
	float  SourceLength;
	float   SpecularScale;
	float   DiffuseScale;
	float  ContactShadowLength;
	float ContactShadowCastingIntensity;
	float ContactShadowNonCastingIntensity;
	float2 DistanceFadeMAD;
	float4  ShadowMapChannelMask;
	bool   ContactShadowLengthInWS;
	bool   bInverseSquared;
	bool   bRadialLight;
	bool   bSpotLight;
	bool   bRectLight;
	uint   ShadowedBits;
	FRectLightData RectLightData;
	float  IESAtlasIndex;
	uint  LightFunctionAtlasLightIndex;
	FHairTransmittanceData HairTransmittance;
	uint  bAffectsTranslucentLighting;
};
float3 UnpackLightColor(float2 In)
{
	float3 Dir = float3(
		((asuint(In.y) >> 0) & 0x3FF),
		((asuint(In.y) >> 10) & 0x3FF),
		((asuint(In.y) >> 20) & 0x3FF));
	return In.x * Dir;
}
float4 UnpackShadowMapChannelMask(uint In)
{
	return float4((In & 0x1), (In & 0x2) >> 1, (In & 0x4) >> 2, (In & 0x8) >> 3);
}
uint UnpackLightingChannelMask(uint In)
{
	return (In >> 8) & 0x7;
}
uint UnpackLightingChannelMask(FLocalLightData In)
{
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	return UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
}
uint UnpackLightType(uint InShadowMapChannelMaskPacked)
{
	return (InShadowMapChannelMaskPacked >> 16) & 0x3;
}
bool UnpackCastShadow(uint InShadowMapChannelMaskPacked)
{
	return ((InShadowMapChannelMaskPacked >> 18) & 0x1) != 0;
}
uint UnpackLightFunctionAtlasIndex(uint InShadowMapChannelMaskPacked)
{
	return ((InShadowMapChannelMaskPacked >> 20) & 0xFF);
}
uint UnpackLightFunctionAtlasIndex(FLocalLightData In)
{
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	return UnpackLightFunctionAtlasIndex(LightTypeAndPackedShadowMapChannelMask);
}
uint UnpackAffectsTranslucentLighting(uint InShadowMapChannelMaskPacked)
{
	return ((InShadowMapChannelMaskPacked >> 28) & 0x1);
}
uint UnpackAffectsTranslucentLighting(FLocalLightData In)
{
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	return UnpackAffectsTranslucentLighting(LightTypeAndPackedShadowMapChannelMask);
}
float UnpackLightSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) & 0xFFFF);
}
float UnpackLightSoftSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) >> 16);
}
float UnpackLightSourceLength(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.w));
}
float2 GetLightSpotAngles(FLocalLightData In)
{
	return In.SpotAnglesAndSourceRadiusPacked.xy;
}
float UnpackLightSpecularScale(FLocalLightData In)
{
	return UnpackUnorm10(asuint(In.LightTangentAndIESDataAndSpecularScale.w));
}
float UnpackLightDiffuseScale(FLocalLightData In)
{
	return UnpackUnorm10(asuint(In.LightTangentAndIESDataAndSpecularScale.w)>>10);
}
float UnpackLigthIESAtlasIndex(FLocalLightData In)
{
	return int(asuint(In.LightTangentAndIESDataAndSpecularScale.w) >> 20) - 1;
}
FRectTexture ConvertToRectTexture(FDeferredLightData In)
{
	FRectTexture Output;
	Output.AtlasUVOffset = In.RectLightData.AtlasData.AtlasUVOffset;
	Output.AtlasUVScale  = In.RectLightData.AtlasData.AtlasUVScale;
	Output.AtlasMaxLevel = In.RectLightData.AtlasData.AtlasMaxLevel;
	return Output;
}
FDeferredLightData ConvertToDeferredLight(
	const FLocalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint  OutLightingChannelMask)
{
	FDeferredLightData Out = (FDeferredLightData)0;
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	const uint LightType = UnpackLightType(LightTypeAndPackedShadowMapChannelMask);
	Out.TranslatedWorldPosition = In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= UnpackLightColor(In.LightColorAndIdAndFalloffExponent.xy);
	Out.FalloffExponent			= In.LightColorAndIdAndFalloffExponent.w;
	Out.Direction				= In.LightDirectionAndShadowMask.xyz;
	Out.SpotAngles				= GetLightSpotAngles(In);
	Out.SourceRadius			= UnpackLightSourceRadius(In);
	Out.SourceLength			= UnpackLightSourceLength(In);
	Out.Tangent					= In.LightTangentAndIESDataAndSpecularScale.xyz;
	Out.SoftSourceRadius		= UnpackLightSoftSourceRadius(In);
	Out.bInverseSquared			= Out.FalloffExponent == 0;
	Out.SpecularScale			= UnpackLightSpecularScale(In) * InSpecularScale;
	Out.DiffuseScale			= UnpackLightDiffuseScale(In);
	Out.bRadialLight			= true;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();
	Out.RectLightData			= UnpackRectLightData(
									asuint(In.RectData.x),
									asuint(In.RectData.y),
									asuint(In.RectData.z));
	Out.IESAtlasIndex			= UnpackLigthIESAtlasIndex(In);
	Out.LightFunctionAtlasLightIndex = UnpackLightFunctionAtlasIndex(In);
	Out.bAffectsTranslucentLighting = UnpackAffectsTranslucentLighting(In);
	Out.ShadowedBits				= (LightTypeAndPackedShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
	return Out;
}
FDeferredLightData ConvertToDeferredLight(const FLocalLightData In)
{
	float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	return ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
}
FLightShaderParameters ConvertToLightShaderParameters(FDeferredLightData In)
{
	FLightShaderParameters Out;
	Out.TranslatedWorldPosition	= In.TranslatedWorldPosition;
	Out.InvRadius				= In.InvRadius;
	Out.Color					= In.Color;
	Out.FalloffExponent			= In.FalloffExponent;
	Out.Direction				= In.Direction;
	Out.Tangent					= In.Tangent;
	Out.SpotAngles				= In.SpotAngles;
	Out.SpecularScale			= 1;
	Out.DiffuseScale			= 1;
	Out.SourceRadius			= In.SourceRadius;
	Out.SoftSourceRadius		= In.SoftSourceRadius;
	Out.SourceLength			= In.SourceLength;
	Out.RectLightBarnCosAngle	= In.RectLightData.BarnCosAngle;
	Out.RectLightBarnLength		= In.RectLightData.BarnLength;
	Out.RectLightAtlasUVOffset	= In.RectLightData.AtlasData.AtlasUVOffset;
	Out.RectLightAtlasUVScale	= In.RectLightData.AtlasData.AtlasUVScale;
	Out.RectLightAtlasMaxLevel	= In.RectLightData.AtlasData.AtlasMaxLevel;
	return Out;
}
FDeferredLightData ConvertToDeferredLight(
	FDirectionalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint OutLightingChannelMask)
{
	FDeferredLightData Out	= (FDeferredLightData)0;
	Out.Color				= In.DirectionalLightColor;
	Out.FalloffExponent		= 0;
	Out.Direction			= In.DirectionalLightDirection;
	Out.DistanceFadeMAD		= In.DirectionalLightDistanceFadeMAD;
	Out.bRadialLight		= false;
	Out.SpecularScale		= In.DirectionalLightSpecularScale * InSpecularScale;
	Out.DiffuseScale		= In.DirectionalLightDiffuseScale;
	Out.ShadowedBits		= (In.DirectionalLightShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.HairTransmittance	= InitHairTransmittanceData();
	Out.SourceRadius		= In.DirectionalLightSourceRadius;
	Out.SoftSourceRadius	= In.DirectionalLightSoftSourceRadius;
	Out.LightFunctionAtlasLightIndex = In.LightFunctionAtlasLightIndex;
	Out.bAffectsTranslucentLighting = In.bAffectsTranslucentLighting;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(In.DirectionalLightShadowMapChannelMask);
	return Out;
}
FDeferredLightData ConvertToDeferredLight(FLightSceneData In)
{
	FDeferredLightData Out = (FDeferredLightData)0;
	const uint LightType = UnpackLightType(In.LightTypeAndShadowMapChannelMaskPacked);
	Out.TranslatedWorldPosition = DFFastAddDemote(In.WorldPosition, GetPrimaryView().PreViewTranslation);
	Out.InvRadius				= In.InvRadius;
	Out.Color					= In.Color.xyz;
	Out.FalloffExponent			= In.FalloffExponent;
	Out.Direction				= In.Direction;
	Out.SpotAngles				= In.SpotAngles;
	Out.SourceRadius			= In.SourceRadius;
	Out.SourceLength			= In.SourceLength;
	Out.Tangent					= In.Tangent;
	Out.SoftSourceRadius		= In.SoftSourceRadius;
	Out.bInverseSquared			= In.FalloffExponent == 0;
	Out.SpecularScale			= In.SpecularScale;
	Out.DiffuseScale			= In.DiffuseScale;
	Out.bRadialLight			= true;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();
	Out.RectLightData.BarnCosAngle = In.RectLightBarnCosAngle;
	Out.RectLightData.BarnLength = In.RectLightBarnLength;
	Out.RectLightData.AtlasData.AtlasMaxLevel = In.RectLightAtlasMaxLevel;
	Out.RectLightData.AtlasData.AtlasUVOffset = In.RectLightAtlasUVOffset;
	Out.RectLightData.AtlasData.AtlasUVScale = In.RectLightAtlasUVScale;
	Out.IESAtlasIndex					= In.IESAtlasIndex;
	Out.LightFunctionAtlasLightIndex	= UnpackLightFunctionAtlasIndex(In.LightTypeAndShadowMapChannelMaskPacked);
	Out.bAffectsTranslucentLighting = UnpackAffectsTranslucentLighting(In.LightTypeAndShadowMapChannelMaskPacked);
	Out.ShadowedBits				= (In.LightTypeAndShadowMapChannelMaskPacked & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(In.LightTypeAndShadowMapChannelMaskPacked);
	return Out;
}
FLightShaderParameters ConvertToLightShaderParameters(FLightSceneData In)
{
	FLightShaderParameters Out;
	Out.TranslatedWorldPosition	= DFFastAddDemote(In.WorldPosition, GetPrimaryView().PreViewTranslation);
	Out.InvRadius				= In.InvRadius;
	Out.Color					= In.Color.xyz;
	Out.FalloffExponent			= In.FalloffExponent;
	Out.Direction				= In.Direction;
	Out.Tangent					= In.Tangent;
	Out.SpotAngles				= In.SpotAngles;
	Out.SpecularScale			= 1.0f; 
	Out.DiffuseScale			= In.DiffuseScale;
	Out.SourceRadius			= In.SourceRadius;
	Out.SoftSourceRadius		= In.SoftSourceRadius;
	Out.SourceLength			= In.SourceLength;
	Out.RectLightBarnCosAngle	= In.RectLightBarnCosAngle;
	Out.RectLightBarnLength		= In.RectLightBarnLength;
	Out.RectLightAtlasUVOffset	= In.RectLightAtlasUVOffset;
	Out.RectLightAtlasUVScale	= In.RectLightAtlasUVScale;
	Out.RectLightAtlasMaxLevel	= In.RectLightAtlasMaxLevel;
	return Out;
}
uint GetCulledLightDataGrid(uint GridIndex)
{
	return ForwardLightData_CulledLightDataGrid16Bit[GridIndex];
}
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};
FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;
		Result.LightGridPixelSizeShift = ForwardLightData_LightGridPixelSizeShift;
		Result.LightGridZParams = ForwardLightData_LightGridZParams;
		Result.CulledGridSize = ForwardLightData_CulledGridSize;
	return Result;
}
uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}
uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}
uint GetNumLocalLights(uint EyeIndex)
{
	return ForwardLightData_NumLocalLights;
}
uint GetMaxLightsPerCell(uint EyeIndex)
{
	return ForwardLightData_MaxCulledLightsPerCell ;
}
void UnpackCulledLightsGridHeader0(uint PackedData0, out uint NumVisibleLights, out uint NumVisibleMegaLights)
{
	NumVisibleLights = PackedData0 & 0xFFFF;
	NumVisibleMegaLights = (PackedData0 >> 16) & 0xFFFF;
}
void UnpackCulledLightsGridHeader1(uint PackedData1, out uint CulledLightDataStart, out bool bHasRectLight, out bool bHasTexturedLight)
{
	CulledLightDataStart = (PackedData1 & 0x3FFFFFFF);
	bHasRectLight = (PackedData1 & 0x40000000) != 0;
	bHasTexturedLight = (PackedData1 & 0x80000000) != 0;
}
struct FCulledLightsGridHeader
{
	uint NumLights;
	uint NumMegaLights;
	uint DataStartIndex;
	uint MegaLightsDataStartIndex;
	bool bHasRectLight;
	bool bHasTexturedLight;
};
FCulledLightsGridHeader GetCulledLightsGridHeader(uint GridIndex, uint EyeIndex)
{
	FCulledLightsGridHeader Result;
		const uint PackedData0 = ForwardLightData_NumCulledLightsGrid[GridIndex * 2 + 0];
		UnpackCulledLightsGridHeader0(PackedData0, Result.NumLights, Result.NumMegaLights);
		Result.NumLights = min(Result.NumLights, ForwardLightData_NumLocalLights);
		Result.NumMegaLights = min(Result.NumMegaLights, ForwardLightData_NumLocalLights);
		const uint PackedData1 = ForwardLightData_NumCulledLightsGrid[GridIndex * 2 + 1];
		UnpackCulledLightsGridHeader1(PackedData1, Result.DataStartIndex, Result.bHasRectLight, Result.bHasTexturedLight);
		Result.MegaLightsDataStartIndex = Result.DataStartIndex + Result.NumLights - Result.NumMegaLights;
	return Result;
}
FLocalLightData GetLocalLightData_Internal(
	uint LocalLightIndex,
	uint ClusteredDeferredSupportedEndIndex,
	uint MegaLightsSupportedStartIndex,
	uint SimpleLightsEndIndex,
	float4 InData0, float4 InData1, float4 InData2, float4 InData3, float4 InData4, float4 InData5)
{
	FLocalLightData Out = (FLocalLightData)0;
	Out.bClusteredDeferredSupported				= LocalLightIndex <  ClusteredDeferredSupportedEndIndex;
	Out.bMegaLightsSupported					= LocalLightIndex >= MegaLightsSupportedStartIndex;
	Out.bIsSimpleLight							= LocalLightIndex <  SimpleLightsEndIndex;
	Out.LightPositionAndInvRadius				= InData0;
	Out.LightColorAndIdAndFalloffExponent		= InData1;
	Out.LightDirectionAndShadowMask				= InData2;
	Out.SpotAnglesAndSourceRadiusPacked			= InData3;
	Out.LightTangentAndIESDataAndSpecularScale	= InData4;
	Out.RectData								= InData5.xyz;
	Out.VirtualShadowMapId						= int(asuint(InData5.w) >> 16U) - 1;
	Out.PrevLocalLightIndex						= int(asuint(InData5.w) & 0xFFFF) - 1;
	Out.LightSceneId							= int(Out.LightColorAndIdAndFalloffExponent.z);
	return Out;
}
FLocalLightData GetLocalLightDataNonStereo(uint LocalLightIndex)
{
	FLocalLightData Out;
	uint LocalLightBaseIndex = LocalLightIndex * 6;
	Out = GetLocalLightData_Internal(
		LocalLightIndex,
		ForwardLightData_ClusteredDeferredSupportedEndIndex,
		ForwardLightData_MegaLightsSupportedStartIndex,
		ForwardLightData_SimpleLightsEndIndex,
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 0],
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 1],
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 2],
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 3],
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 4],
		ForwardLightData_ForwardLocalLightBuffer[LocalLightBaseIndex + 5]);
	return Out;
}
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}
struct FLightAccumulator
{
	float3 TotalLight;
	float TotalLightLuminance;
	float ScatterableLightLuma;
	float3 ScatterableLight;
	float EstimatedCost;
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;
};
struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
	float LightingLuminance;
};
void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;
	In.TotalLightLuminance += Luminance((DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier);
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}
	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}
float4 ConvertEstimatedCostToColor(float EstimatedCost)
{
	return 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * EstimatedCost;
}
FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;
	if (0 == 1)
	{
		RetDiffuse  = ConvertEstimatedCostToColor(In.EstimatedCost);
		RetSpecular = RetDiffuse;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);
		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0 && View_bSubsurfacePostprocessEnabled)
			{
				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			RetDiffuse.a = Luminance(In.ScatterableLight);
		}
	}
	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;
	Ret.LightingLuminance = In.TotalLightLuminance;
	return Ret;
}
float CalcSceneDepth(float2 ScreenUV)
{
	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct_PointClampSampler, ScreenUV, 0).r);
}
float CalcSceneDepth(uint2 PixelPos)
{
	float DeviceZ = SceneTexturesStruct_SceneDepthTexture.Load(int3(PixelPos, 0)).r;
	return ConvertFromDeviceZ(DeviceZ);
}
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };
	return float3x3( TangentX, TangentY, TangentZ );
}
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}
float3 ConcentricDiskSamplingHelper(float2 E)
{
	float2 p = 2 * E - 0.99999994;
	float2 a = abs(p);
	float Lo = min(a.x, a.y);
	float Hi = max(a.x, a.y);
	float Epsilon = 5.42101086243e-20; 
	float Phi = (PI / 4) * (Lo / (Hi + Epsilon) + 2 * float(a.y >= a.x));
	float Radius = Hi;
	const uint SignMask = 0x80000000;
	float2 Disk = asfloat((asuint(float2(cos(Phi), sin(Phi))) & ~SignMask) | (asuint(p) & SignMask));
	return float3(Disk, Radius);
}
float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );
	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	float PDF = 1.0 / (4 * PI);
	return float4( H, PDF );
}
float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);
	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;
	float PDF = CosTheta * (1.0 / PI);
	return float4(H, PDF);
}
float4 CosineSampleHemisphere( float2 E, float3 N ) 
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );
	float PDF = dot(H, N) * (1.0 /  PI);
	return float4( H, PDF );
}
float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);
	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);
	return float4(L, PDF);
}
float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}
float4 UniformSampleConeConcentricRobust(float2 E, float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z * sqrt(SinThetaMax2);
	float CosTheta = sqrt(1 - SinTheta * SinTheta);
	float3 L = float3(Result.xy * SinTheta, CosTheta);
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);
	return float4(L, PDF);
}
float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );
	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;
	return float4( H, PDF );
}
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}
                                 
Texture2D<uint> SceneLightingChannels;
float3 EncodeNormal( float3 N )
{
	return N * 0.5 + 0.5;
}
float3 DecodeNormal( float3 N )
{
	return N * 2 - 1;
}
void EncodeNormal( inout float3 N, out uint Face )
{
	uint Axis = 2;
	if( abs(N.x) >= abs(N.y) && abs(N.x) >= abs(N.z) )
	{
		Axis = 0;
	}
	else if( abs(N.y) > abs(N.z) )
	{
		Axis = 1;
	}
	Face = Axis * 2;
	N = Axis == 0 ? N.yzx : N;
	N = Axis == 1 ? N.xzy : N;
	float MaxAbs = 1.0 / sqrt(2.0);
	Face += N.z > 0 ? 0 : 1;
	N.xy *= N.z > 0 ? 1 : -1;
	N.xy = N.xy * (0.5 / MaxAbs) + 0.5;
}
void DecodeNormal( inout float3 N, in uint Face )
{
	uint Axis = Face >> 1;
	float MaxAbs = 1.0 / sqrt(2.0);
	N.xy = N.xy * (2 * MaxAbs) - (1 * MaxAbs);
	N.z = sqrt( 1 - dot( N.xy, N.xy ) );
	N = Axis == 0 ? N.zxy : N;
	N = Axis == 1 ? N.xzy : N;
	N *= (Face & 1) ? -1 : 1;
}
bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}
bool HasCustomGBufferData(int ShadingModelID)
{
	return ShadingModelID == 2
		|| ShadingModelID == 3
		|| ShadingModelID == 4
		|| ShadingModelID == 5
		|| ShadingModelID == 6
		|| ShadingModelID == 7
		|| ShadingModelID == 8
		|| ShadingModelID == 9;
}
struct FGBufferData
{
	float3 WorldNormal;
	float3 WorldTangent;
	float3 DiffuseColor;
	float3 SpecularColor;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float4 CustomData;
	float GenericAO;
	float IndirectIrradiance;
	float4 PrecomputedShadowFactors;
	float Roughness;
	float Anisotropy;
	float GBufferAO;
	uint DiffuseIndirectSampleOcclusion;
	uint ShadingModelID;
	uint SelectiveOutputMask;
	float PerObjectGBufferData;
	float CustomDepth;
	uint CustomStencil;
	float Depth;
	float4 Velocity;
	float3 StoredBaseColor;
	float StoredSpecular;
	float StoredMetallic;
	float Curvature;
};
bool CheckerFromPixelPos(uint2 PixelPos)
{
	uint TemporalAASampleIndex = uint(View_TemporalAAParams.x);
	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;
}
bool CheckerFromSceneColorUV(float2 UVSceneColor)
{
	uint2 PixelPos = uint2(UVSceneColor * View_BufferSizeAndInvSize.xy);
	return CheckerFromPixelPos(PixelPos);
}
float3 DecodeNormalHelper(float3 SrcNormal)
{
	return SrcNormal * 2.0f - 1.0f;
}
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{
	return;
}
void GBufferPostDecode(inout FGBufferData Ret, bool bChecker, bool bGetNormalizedNormal)
{
	Ret.CustomData = HasCustomGBufferData(Ret.ShadingModelID) ? Ret.CustomData : float(0.0f);
	Ret.PrecomputedShadowFactors = !(Ret.SelectiveOutputMask & 0x2) ? Ret.PrecomputedShadowFactors : ((Ret.SelectiveOutputMask & 0x4) ? float(0.0f) : float(1.0f));
	Ret.Velocity = !(Ret.SelectiveOutputMask & 0x8) ? Ret.Velocity : float(0.0f);
	bool bHasAnisotropy = (Ret.SelectiveOutputMask & 0x1);
	Ret.StoredBaseColor = Ret.BaseColor;
	Ret.StoredMetallic = Ret.Metallic;
	Ret.StoredSpecular = Ret.Specular;
	Ret.GBufferAO = Ret.GenericAO;
	Ret.DiffuseIndirectSampleOcclusion = 0x0;
	Ret.IndirectIrradiance = 1;
	if(bGetNormalizedNormal)
	{
		Ret.WorldNormal = normalize(Ret.WorldNormal);
	}
	[flatten]
	if( Ret.ShadingModelID == 9 )
	{
		Ret.Metallic = 0.0;
	}
	{
		Ret.SpecularColor = ComputeF0(Ret.Specular, Ret.BaseColor, Ret.Metallic);
		if (UseSubsurfaceProfile(Ret.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(Ret.BaseColor, Ret.SpecularColor, Ret.Specular, bChecker);
		}
		Ret.DiffuseColor = Ret.BaseColor - Ret.BaseColor * Ret.Metallic;
		{
			Ret.DiffuseColor = Ret.DiffuseColor * View_DiffuseOverrideParameter.www + View_DiffuseOverrideParameter.xyz;
			Ret.SpecularColor = Ret.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
		}
	}
	if (bHasAnisotropy)
	{
		Ret.WorldTangent = float3(DecodeNormal(Ret.WorldTangent));
		Ret.Anisotropy = float(Ret.Anisotropy * 2.0f - 1.0f);
		if(bGetNormalizedNormal)
		{
			Ret.WorldTangent = normalize(Ret.WorldTangent);
		}
	}
	else
	{
		Ret.WorldTangent = 0;
		Ret.Anisotropy = 0;
	}
	Ret.SelectiveOutputMask = Ret.SelectiveOutputMask << 4;
}
FGBufferData  DecodeGBufferDataDirect(float4 InMRT1,
	float4 InMRT2,
	float4 InMRT3,
	float4 InMRT4,
	float CustomNativeDepth,
	float4 AnisotropicData,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData Ret = (FGBufferData)0;
	float3 WorldNormal_Compressed = 0.0f;
	WorldNormal_Compressed.x = InMRT1.x;
	WorldNormal_Compressed.y = InMRT1.y;
	WorldNormal_Compressed.z = InMRT1.z;
	Ret.PerObjectGBufferData.x = InMRT1.w;
	Ret.Metallic.x = InMRT2.x;
	Ret.Specular.x = InMRT2.y;
	Ret.Roughness.x = InMRT2.z;
	Ret.ShadingModelID.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 0) & 0x0f) << 0);
	Ret.SelectiveOutputMask.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 4) & 0x0f) << 0);
	Ret.BaseColor.x = InMRT3.x;
	Ret.BaseColor.y = InMRT3.y;
	Ret.BaseColor.z = InMRT3.z;
	Ret.GenericAO.x = InMRT3.w;
	Ret.CustomData.x = InMRT4.x;
	Ret.CustomData.y = InMRT4.y;
	Ret.CustomData.z = InMRT4.z;
	Ret.CustomData.w = InMRT4.w;
	Ret.WorldNormal = DecodeNormalHelper(WorldNormal_Compressed);
	Ret.WorldTangent = AnisotropicData.xyz;
	Ret.Anisotropy = AnisotropicData.w;
	GBufferPostDecode(Ret,bChecker,bGetNormalizedNormal);
	Ret.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	Ret.CustomStencil = CustomStencil;
	Ret.Depth = SceneDepth;
	return Ret;
}
FGBufferData DecodeGBufferDataUV(float2 UV, bool bGetNormalizedNormal = true)
{
	float CustomNativeDepth = Texture2DSampleLevel(SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct_PointClampSampler, UV, 0).r;
	int2 IntUV = (int2)trunc(UV * View_BufferSizeAndInvSize.xy * View_BufferToSceneTextureScale.xy);
	uint CustomStencil = SceneTexturesStruct_CustomStencilTexture.Load(int3(IntUV, 0)) .g;
	float SceneDepth = CalcSceneDepth(UV);
	float4 AnisotropicData = Texture2DSampleLevel(SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct_PointClampSampler, UV, 0).xyzw;
	float4 InMRT1 = Texture2DSampleLevel(SceneTexturesStruct_GBufferATexture, SceneTexturesStruct_PointClampSampler, UV, 0).xyzw;
	float4 InMRT2 = Texture2DSampleLevel(SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct_PointClampSampler, UV, 0).xyzw;
	float4 InMRT3 = Texture2DSampleLevel(SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct_PointClampSampler, UV, 0).xyzw;
	float4 InMRT4 = Texture2DSampleLevel(SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct_PointClampSampler, UV, 0).xyzw;
	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));
	return Ret;
}
float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}
uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}
uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}
uint GetSceneLightingChannel(uint2 PixelCoord)
{
	[branch]
	if (bSceneLightingChannelsValid)
	{
		return SceneLightingChannels.Load(uint3(PixelCoord, 0)).x;
	}
	return ~0;
}
FGBufferData GetGBufferData(float2 UV, bool bGetNormalizedNormal = true)
{
	return DecodeGBufferDataUV(UV,bGetNormalizedNormal);
}
float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}
float RadialAttenuation(float3 WorldLightVector, float FalloffExponent)
{
	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);
}
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}
float ComputeLightProfileMultiplier(float3 WorldPosition, float3 LightPosition, float3 LightDirection, float3 LightTangent, float InIESAtlasIndex)
{
	float Out = 1.0f;
	if (InIESAtlasIndex >= 0)
	{
		float3 LightBitangent = normalize( cross( LightTangent, LightDirection ) );
		float4x4 LightTransform = float4x4( float4(LightDirection.xyz, 0), float4(LightBitangent.xyz, 0), float4(LightTangent.xyz, 0), float4(0, 0, 0, 1) );
		float4x4 InvLightTransform = transpose(LightTransform);
		float3 ToLight = normalize(LightPosition - WorldPosition);
		float3 LocalToLight = mul(float4(ToLight.xyz, 0), InvLightTransform).xyz;
		float DotProd = dot(ToLight, LightDirection);
		float Angle = asin(DotProd);
		float NormAngle = Angle / PI + 0.5f;
		float TangentAngle = atan2( -LocalToLight.z, -LocalToLight.y ); 
		float NormTangentAngle = TangentAngle / (PI * 2.f) + 0.5f;
		Out = View_IESAtlasTexture.SampleLevel(View_SharedBilinearClampedSampler, float3(NormAngle, NormTangentAngle, InIESAtlasIndex), 0);
	}
	return Out;
}
struct FCapsuleLight
{
	float3	LightPos[2];
	float	Length;
	float	Radius;
	float	SoftRadius;
	float	DistBiasSqr;
};
float3 ClosestPointLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;
	float A = Square( Length );
	float B = dot( R, Line01 );
	float t = saturate( dot( Line0, B*R - Line01 ) / (A - B*B) );
	return Line0 + t * Line01;
}
float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;
	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );
	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{
	float SinAlpha = sqrt( SinAlphaSqr );
	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );
	}
	return NoL;
}
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};
float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{
	return 1;
}
float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );		
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );		
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );		
	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;
	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );
	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );	
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );	
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );	
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );	
	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( max(c01 + 1, 1.0e-4f) );	
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( max(c12 + 1, 1.0e-4f) );	
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( max(c23 + 1, 1.0e-4f) );	
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( max(c30 + 1, 1.0e-4f) );	
	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	
	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];	
	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;
	L *= InvLength;
	BaseIrradiance = 0.5 * Length;
	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);
	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );
	return L;
}
float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{
	return 1;
}
float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );
	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( max(1 - c01 * c01, 1.0e-4f)  ) - w01;
	return w01;
}
float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	
	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );
	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	
	return L;
}
struct FRectLTC
{
	float3x3 LTC;
	float3x3 InvLTC;
	float3 IrradianceScale;
};
FRectLTC GetRectLTC_GGX(float Roughness, float3 F0, float3 F90, float NoV)
{
	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);
	float4 LTCMat = View_GGXLTCMatTexture.SampleLevel( View_SharedBilinearClampedSampler, UV, 0 );
	float4 LTCAmp = View_GGXLTCAmpTexture.SampleLevel( View_SharedBilinearClampedSampler, UV, 0 );
	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};
	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;
	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};
	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	return Out;
}
FRectLTC GetRectLTC_GGX( float Roughness, float3 SpecularColor, float NoV)
{
	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);
	return GetRectLTC_GGX(Roughness, F0, F90, NoV);
}
float3 RectApproxLTC(FRectLTC In, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;
	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );
	In.LTC = mul( In.LTC, TangentBasis );
	In.InvLTC = mul( transpose( TangentBasis ), In.InvLTC );
	float3 Poly[4];
	Poly[0] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	float3 L = PolygonIrradiance( Poly );
	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;
	L *= InvLength;
	float SinAlphaSqr = Length;
	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;
	Irradiance = -min(-Irradiance, 0.0);
	L = mul( In.InvLTC, L );
	OutMeanLightWorldDirection = L;
	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );
	return LightColor * Irradiance * In.IrradianceScale;
}
float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;
	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );
	const FRectLTC LTC = GetRectLTC_GGX(Roughness, SpecularColor, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}
float3 RectGGXApproxLTC(float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, SpecularColor, N, V, Rect, RectTexture, MeanLightWorldDirection);
}
float3 RectGGXApproxLTC(float Roughness, float3 F0, float3 F90, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;
	const float NoV = saturate(abs(dot(N, V)) + 1e-5);
	const FRectLTC LTC = GetRectLTC_GGX(Roughness, F0, F90, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}
float3 RectGGXApproxLTC(float Roughness, float3 F0, float3 F90, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, F0, F90, N, V, Rect, RectTexture, MeanLightWorldDirection);
}
struct FSphericalRect
{
	float3x3	Axis;
	float		x0;
	float		x1;
	float		y0;
	float		y1;
	float		z0;
	float		b0;
	float		b1;
	float		k;
	float		SolidAngle;
};
float SphericalRectAsin(float x)
{
	const float HalfPI = PI / 2;
	float a = saturate(abs(x));
	bool inner = a < 0.5f;
	float a2 = inner ? a * a : 0.5 - 0.5 * a;
	a = inner ? a : sqrt(a2);
	float r = 0.100323f;
	r = mad(r, a2, 0.163288f);
	r = mad(r, a2, 1.00011f) * a;
	r = inner ? r : HalfPI - 2 * r;
	return asfloat(asuint(r) ^ (asuint(x) & 0x80000000u)); 
}
FSphericalRect BuildSphericalRect( FRect Rect )
{
	FSphericalRect SphericalRect;
	SphericalRect.Axis = Rect.Axis;
	float3 LocalPosition = mul(Rect.Axis, Rect.Origin);
	SphericalRect.x0 = LocalPosition.x - Rect.Extent.x;
	SphericalRect.x1 = LocalPosition.x + Rect.Extent.x;
	SphericalRect.y0 = LocalPosition.y - Rect.Extent.y;
	SphericalRect.y1 = LocalPosition.y + Rect.Extent.y;
	SphericalRect.z0 = -abs( LocalPosition.z );
	SphericalRect.Axis[2] *= LocalPosition.z > 0 ? -1 : 1;
	float z0sq = LocalPosition.z * LocalPosition.z;
	float n0z = -SphericalRect.y0 * rsqrt(z0sq + SphericalRect.y0 * SphericalRect.y0);
	float n1z =  SphericalRect.x1 * rsqrt(z0sq + SphericalRect.x1 * SphericalRect.x1);
	float n2z =  SphericalRect.y1 * rsqrt(z0sq + SphericalRect.y1 * SphericalRect.y1);
	float n3z = -SphericalRect.x0 * rsqrt(z0sq + SphericalRect.x0 * SphericalRect.x0);
	float G0G1 = SphericalRectAsin(n0z * n1z) + SphericalRectAsin(n1z * n2z);
	float G2G3 = SphericalRectAsin(n2z * n3z) + SphericalRectAsin(n3z * n0z);
	SphericalRect.b0 = n0z;
	SphericalRect.b1 = n2z;
	SphericalRect.k = G2G3;
	SphericalRect.SolidAngle = G0G1 + SphericalRect.k;
	return SphericalRect;
}
struct FSphericalRectSample {
	float3 Direction;
	float  Distance;
	float2 UV;
	float  InvPdf;
};
float GetSphericalRectInversePdf(float3 Direction, float DistanceSquared, FSphericalRect Rect)
{
	if (Rect.SolidAngle > 1e-3)
	{
		return Rect.SolidAngle;
	}
	else
	{
		float Area = (Rect.y1 - Rect.y0) * (Rect.x1 - Rect.x0);
		float NoL = abs(dot(Direction, Rect.Axis[2]));
		return Area * NoL / DistanceSquared;
	}
}
FSphericalRectSample UniformSampleSphericalRect(float2 E, FSphericalRect Rect)
{
	float xu, yv;
	if (Rect.SolidAngle > 1e-3)
	{
		float au = E.x * Rect.SolidAngle - Rect.k;
		float fu = (cos(au) * Rect.b0 + Rect.b1) / sin(au);
		float cu = rsqrt(fu * fu + Rect.b0 * Rect.b0) * (fu > 0 ? 1 : -1);
		cu = clamp(cu, -1, 1);				
		xu = -(cu * Rect.z0) * rsqrt(1 - cu * cu);
		xu = clamp(xu, Rect.x0, Rect.x1);	
		float d2 = xu * xu + Rect.z0 * Rect.z0;
		float h0 = Rect.y0 * rsqrt(d2 + Rect.y0 * Rect.y0);
		float h1 = Rect.y1 * rsqrt(d2 + Rect.y1 * Rect.y1);
		float hv = h0 + E.y * (h1 - h0);
		float rv = 1.0 - hv * hv;
		yv = (rv > 0) ? (hv * d2 * rsqrt(rv * d2)) : Rect.y1;
	}
	else
	{
		xu = lerp(Rect.x0, Rect.x1, E.x);
		yv = lerp(Rect.y0, Rect.y1, E.y);
	}
	FSphericalRectSample Result;
	Result.Direction = mul(float3(xu, yv, Rect.z0), Rect.Axis);
	Result.UV = float2(xu - Rect.x0, yv - Rect.y0) / float2(Rect.x1 - Rect.x0, Rect.y1 - Rect.y0);
	float DistanceSquared = xu * xu + yv * yv + Rect.z0 * Rect.z0;
	float InvDistance = rsqrt(DistanceSquared);
	Result.Distance = DistanceSquared * InvDistance;
	Result.Direction *= InvDistance;
	Result.InvPdf = GetSphericalRectInversePdf(Result.Direction, DistanceSquared, Rect);
	return Result;
}
FRect GetRect(
	float3 ToLight, 
	float3 LightDataDirection, 
	float3 LightDataTangent, 
	float LightDataSourceRadius, 
	float LightDataSourceLength, 
	float LightDataRectLightBarnCosAngle, 
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{
	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;
	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;
		float3 S_Light = mul(Rect.Axis, ToLight);
		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / max(0.0001f, CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;
		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);
		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);
		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;
		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0,  SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);
		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}
	return Rect;
}
FRect GetRect(FLightShaderParameters In, float3 TranslatedWorldPosition)
{
	return GetRect(In.TranslatedWorldPosition - TranslatedWorldPosition,
		In.Direction,
		In.Tangent,
		In.SourceRadius,
		In.SourceLength,
		In.RectLightBarnCosAngle,
		In.RectLightBarnLength,
		true);
}
bool IsRectVisible(FRect Rect)
{
	return Rect.Extent.x != 0 && Rect.Extent.y != 0;
}
struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;
	float3		FalloffColor;
	FRect		Rect;
	FRectTexture Texture;
	uint		IsRectAndDiffuseMicroReflWeight;
};
struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};
void SetIsRectLight(inout FAreaLight AreaLight, bool bIsRectLight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0xFFFFFFFE) | (bIsRectLight ? 0x1 : 0x0);
}
bool IsRectLight(FAreaLight AreaLight)
{
	return (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) == 0x1;
}
void SetAreaLightDiffuseMicroReflWeight(inout FAreaLight AreaLight, float Weight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) | (asuint(Weight) << 1);
}
FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{
	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;
};
void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}
void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}
void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );
			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );
			if (bNewtonIteration)
			{
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );
				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;
				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;
				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;
				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}
			Context.NoL = Context.NoL * CosAlpha + NoTr; 
			Context.VoL = Context.VoL * CosAlpha + VoTr;
			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}
float3 Diffuse_Burley( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float FD90 = 0.5 + 2 * VoH * VoH * Roughness;
	float FdV = 1 + (FD90 - 1) * Pow5( 1 - NoV );
	float FdL = 1 + (FD90 - 1) * Pow5( 1 - NoL );
	return DiffuseColor * ( (1 / PI) * FdV * FdL );
}
float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}
float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{
	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);
	return (1.0f / PI) * a2 * Square(a2 / S);
}
float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}
float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}
float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}
float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}
void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{
	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);
}
float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{
	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}
float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}
float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}
float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;
	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));
		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);
		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);
		Transmittance = exp(-OpticalDepth);
		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}
	return Transmittance;
}
float4 GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{
	return View_SSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));
}
float4 GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{
	return InSSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));
}
void GetSubsurfaceProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{
	const float4 Data = GetSubsurfaceProfileTexture((((((0+1)+1)+1)+1)+1), SubsurfaceProfileInt);
	float MaterialRoughnessToLobeRoughness0 = lerp(1.0f, Data.x * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	float MaterialRoughnessToLobeRoughness1 = lerp(1.0f, Data.y * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	LobeMix = Data.z;
	LobeRoughness0 = max(saturate(Roughness * MaterialRoughnessToLobeRoughness0), 0.02f);
	LobeRoughness1 = saturate(Roughness * MaterialRoughnessToLobeRoughness1);
}
float Hair_g(float B, float Theta, bool bClampBSDFValue)
{
	const float DenominatorB = bClampBSDFValue ? max(B, 0.01f) : B;
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * DenominatorB);
}
float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}
float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow)
{
	float KajiyaDiffuse = 1 - abs(dot(N, L));
	float3 FakeNormal = normalize(V - N * dot(V, N));
	N = FakeNormal;
	float MinValue = 0.0001f;
	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
    float3 BaseOverLuma = abs(GBuffer.BaseColor / max(Luma, MinValue));
	float3 ScatterTint = Shadow < 1 ? pow(BaseOverLuma, 1 - Shadow) : 1;
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}
float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}
float3 HairShading( FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{
	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);
	const float Backlit	= min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);
	const float VoL       = dot(V,L);                                                      
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );
	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );
	float n = 1.55;
	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;
	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};	
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};
	float3 S = 0;
	if (HairTransmittance.ScatteringComponent & 0x1u)
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float ShiftR = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - ShiftR, HairTransmittance.bClampBSDFValue);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}
	if (HairTransmittance.ScatteringComponent & 0x2u)
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1], HairTransmittance.bClampBSDFValue);
		float a = 1 / n_prime;
		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );
		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);
		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{
			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}
		float Np = exp( -3.65 * CosPhi - 3.98 );
		S += Mp * Np * Fp * Tp * Backlit;
	}
	if (HairTransmittance.ScatteringComponent & 0x4u)
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2], HairTransmittance.bClampBSDFValue);
		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;
		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );
		float Np = exp( 17 * CosPhi - 16.78 );
		S += Mp * Np * Fp * Tp;
	}
	if (HairTransmittance.ScatteringComponent & 0x20u)
	{
		S  = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}
	S = -min(-S, 0.0);
	return S;
}
float3   GetF0F90RGB(float3 InF0)
{
	return InF0;
}
struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;
	{
		Out.W = 1.0f;
		Out.E =   GetF0F90RGB(F0);
	}
	return Out;
}
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}
float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return 1.0f;
}
float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}
struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};
FBxDFEnergyTermsA   ComputeClothEnergyTermsA(float Roughness, float NoV)
{
	  FBxDFEnergyTermsA Out;
	{
		Out.W = 1.0f;
		Out.E = 1.0f;
	}
	return Out;
}
float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return 1.0f;
}
float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}
float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{
	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}
float3 ExtinctionToTransmittance(in float3 Extinction, in float ThicknessMeters)
{
	return exp(-Extinction * ThicknessMeters);
}
float3 HUE_2_LinearRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}
float3 HSV_2_LinearRGB(in float3 HSV)
{
	float3 RGB = HUE_2_LinearRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGB_2_HCV(in float3 RGB)
{
	float4 P = (RGB.g < RGB.b)	? float4(RGB.bg, -1.0f, 2.0f / 3.0f): float4(RGB.gb, 0.0f, -1.0f / 3.0f);
	float4 Q = (RGB.r < P.x)	? float4(P.xyw, RGB.r)				: float4(RGB.r, P.yzx);
	float Chroma = Q.x - min(Q.w, Q.y);
	float Hue = abs((Q.w - Q.y) / (6.0f * Chroma + 1e-10f) + Q.z);
	return float3(Hue, Chroma, Q.x);
}
float3 LinearRGB_2_HSV(in float3 RGB)
{
	float3 HCV = RGB_2_HCV(RGB);
	float s = HCV.y / (HCV.z + 1e-10f);
	return float3(HCV.x, s, HCV.z);
}
struct FDirectLighting
{
	float3	Diffuse;
	float3	Specular;
	float3	Transmission;
};
struct FShadowTerms
{
	float	SurfaceShadow;
	float	TransmissionShadow;
	float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};
FDirectLighting HairBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)
{
	const float3 BsdfValue = HairShading(GBuffer, L, V, N, Shadow.TransmissionShadow, Shadow.HairTransmittance, 0, 0, uint2(0, 0));
	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * BsdfValue;
	return Lighting;
}
float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );
}
float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{
		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}
	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}
	if( AreaLight.LineCosSubtended < 1 )
	{
		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );
	}
	return Energy;
}
float3 SpecularGGX(float Roughness, float Anisotropy, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float Alpha = Roughness * Roughness;
	float a2 = Alpha * Alpha;
	FAreaLight Punctual = AreaLight;
	Punctual.SphereSinAlpha = 0;
	Punctual.SphereSinAlphaSoft = 0;
	Punctual.LineCosSubtended = 1;
	Punctual.Rect = (FRect)0;
	Punctual.IsRectAndDiffuseMicroReflWeight = 0;
	float Energy = EnergyNormalization(a2, Context.VoH, Punctual);
	float ax = 0;
	float ay = 0;
	GetAnisotropicRoughness(Alpha, Anisotropy, ax, ay);
	float3 D = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH) * Energy;
	float3 Vis = Vis_SmithJointAniso(ax, ay, Context.NoV, NoL, Context.XoV, Context.XoL, Context.YoV, Context.YoL);
	float3 F = F_Schlick( SpecularColor, Context.VoH );
	return (D * Vis) * F;
}
float3 SpecularGGX( float Roughness, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight )
{
	float a2 = Pow4( Roughness );
	float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
	float D = D_GGX( a2, Context.NoH ) * Energy;
	float Vis = Vis_SmithJointApprox( a2, Context.NoV, NoL );
	float3 F = F_Schlick( SpecularColor, Context.VoH );
	return (D * Vis) * F;
}
float3 DualSpecularGGX(float AverageRoughness, float Lobe0Roughness, float Lobe1Roughness, float LobeMix, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float AverageAlpha2 = Pow4(AverageRoughness);
	float Lobe0Alpha2 = Pow4(Lobe0Roughness);
	float Lobe1Alpha2 = Pow4(Lobe1Roughness);
	float Lobe0Energy = EnergyNormalization(Lobe0Alpha2, Context.VoH, AreaLight);
	float Lobe1Energy = EnergyNormalization(Lobe1Alpha2, Context.VoH, AreaLight);
	float D = lerp(D_GGX(Lobe0Alpha2, Context.NoH) * Lobe0Energy, D_GGX(Lobe1Alpha2, Context.NoH) * Lobe1Energy, LobeMix);
	float Vis = Vis_SmithJointApprox(AverageAlpha2, Context.NoV, NoL); 
	float3 F = F_Schlick(SpecularColor, Context.VoH);
	return (D * Vis) * F;
}
FDirectLighting DefaultLitBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = 0;
	[branch]
	if (NoL > 0.0f)
	{
		bool bHasAnisotropy = false;
		float NoV, VoH, NoH;
		[branch]
		if (bHasAnisotropy)
		{
			float3 X = GBuffer.WorldTangent;
			float3 Y = normalize(cross(N, X));
			Init(Context, N, X, Y, V, L);
			NoV = Context.NoV;
			VoH = Context.VoH;
			NoH = Context.NoH;
		}
		else
		{
			Init(Context, N, V, L);
			NoV = Context.NoV;
			VoH = Context.VoH;
			NoH = Context.NoH;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);
		}
		Context.NoV = saturate(abs( Context.NoV ) + 1e-5);
		Lighting.Diffuse = Diffuse_Lambert(GBuffer.DiffuseColor);
		Lighting.Diffuse *= AreaLight.FalloffColor * (Falloff * NoL);
		[branch]
		if (bHasAnisotropy)
		{
			Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.Anisotropy, GBuffer.SpecularColor, Context, NoL, AreaLight);
		}
		else
		{
			if( IsRectLight(AreaLight) )
			{
				Lighting.Specular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
			}
			else
			{
				Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);
			}
		}
		FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
		Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);
		Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);
		Lighting.Transmission = 0;
	}
	return Lighting;
}
float RefractBlendClearCoatApprox(float VoH)
{
	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}
BxDFContext RefractClearCoatContext(BxDFContext Context)
{
	BxDFContext RefractedContext = Context;
	float Eta = 1.0 / 1.5;
	float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}
FDirectLighting ClearCoatBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float ClearCoat			= GBuffer.CustomData.x;
	const float ClearCoatRoughness	= max(GBuffer.CustomData.y, 0.02f);
	FDirectLighting Lighting = {
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0)
	};
	BxDFContext Context;
	float3 Nspec = N;
	if (0)
	{
		Nspec = GBuffer.WorldNormal;
	}
	bool bHasAnisotropy = false;
	float3 X = 0;
	float3 Y = 0;
	Init(Context, Nspec, V, L);
	float SphereSinAlpha = AreaLight.SphereSinAlpha;
	float RoughnessCompensation = 1 - Pow2(GBuffer.Roughness);
	float Alpha = ClearCoatRoughness * ClearCoatRoughness;
	RoughnessCompensation = RoughnessCompensation > 0.0 ? (1 - Alpha) / RoughnessCompensation : 0.0;
	AreaLight.SphereSinAlpha = saturate(AreaLight.SphereSinAlpha * RoughnessCompensation);
	SphereMaxNoH(Context, AreaLight.SphereSinAlpha, 0 == 0);
	Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;
	float F0 = 0.04;
	float Fc = Pow5(1 - Context.VoH);
	float F = Fc + (1 - Fc) * F0;
	FBxDFEnergyTermsRGB EnergyTermsCoat   = ComputeGGXSpecEnergyTermsRGB(ClearCoatRoughness, Context.NoV, F0);
	if (bIsRect)
	{
		Lighting.Specular = ClearCoat * RectGGXApproxLTC(ClearCoatRoughness, F0, Nspec, V, AreaLight.Rect, AreaLight.Texture);
	}
	else
	{
		float a2 = Pow2(Alpha);
		float ClearCoatEnergy = EnergyNormalization(a2, Context.VoH, AreaLight);
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
		float D = D_GGX(a2, Context.NoH) * ClearCoatEnergy;
		float Fr1 = (D * Vis) * F;
		Lighting.Specular = ClearCoat * AreaLight.FalloffColor * (Falloff * NoL * Fr1);
	}
	Lighting.Specular *= ComputeEnergyConservation(EnergyTermsCoat);
	AreaLight.SphereSinAlpha = SphereSinAlpha;
	Alpha = Pow2(GBuffer.Roughness);
	float FresnelCoeff = 1.0 - F;
	FresnelCoeff *= FresnelCoeff;
	if (0)
	{
		BxDFContext TempContext;
		[branch]
		if (bHasAnisotropy)
		{
			Init(TempContext, N, X, Y, V, L);
		}
		else
		{
			Init(TempContext, Nspec, V, L);
		}
		float3 H = normalize(V + L);
		Context.NoH = saturate(dot(N, H));
		Context.NoV = saturate(dot(N, V));
		Context.NoL = saturate(dot(N, L));
		Context.VoL = saturate(dot(V, L));
		Context.VoH = saturate(dot(V, H));
		Context.XoV = TempContext.XoV;
		Context.XoL = TempContext.XoL;
		Context.XoH = TempContext.XoH;
		Context.YoV = TempContext.YoV;
		Context.YoL = TempContext.YoL;
		Context.YoH = TempContext.YoH;
		if (!bHasAnisotropy)
		{
			bool bNewtonIteration = true;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, bNewtonIteration);
		}
		Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	}
	if (bHasAnisotropy)
	{
		X = GBuffer.WorldTangent;
		Y = normalize(cross(N, X));
		Init(Context, Nspec, X, Y, V, L);
	}
	BxDFContext BottomContext = RefractClearCoatContext(Context);
	BottomContext.VoH = bIsRect ? BottomContext.NoV : BottomContext.VoH;
	FBxDFEnergyTermsRGB EnergyTermsBottom = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, BottomContext.NoV, GBuffer.SpecularColor);
	float3 Transmission = SimpleClearCoatTransmittance(BottomContext.NoL, BottomContext.NoV, GBuffer.Metallic, GBuffer.BaseColor);
	float3 DefaultDiffuse = (Falloff * NoL) * AreaLight.FalloffColor * Diffuse_Lambert(GBuffer.DiffuseColor) * ComputeEnergyPreservation(EnergyTermsBottom);
	float3 RefractedDiffuse = FresnelCoeff * Transmission * DefaultDiffuse;
	Lighting.Diffuse = lerp(DefaultDiffuse, RefractedDiffuse, ClearCoat);
	if (!bHasAnisotropy && bIsRect)
	{
		float3 DefaultSpecular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 RefractedSpecular = FresnelCoeff * Transmission * DefaultSpecular;
		Lighting.Specular += lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	else
	{
		float a2 = Pow4(GBuffer.Roughness);
		float D2 = 0;
		float Vis2 = 0;
		[branch]
		if (bHasAnisotropy)
		{
			float ax = 0;
			float ay = 0;
			GetAnisotropicRoughness(Alpha, GBuffer.Anisotropy, ax, ay); 
			D2 = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH);
			Vis2 = Vis_SmithJointAniso(ax, ay, BottomContext.NoV, BottomContext.NoL, BottomContext.XoV, BottomContext.XoL, BottomContext.YoV, BottomContext.YoL);
		}
		else
		{
			Vis2 = Vis_SmithJointApprox(a2, BottomContext.NoV, NoL);
			D2 = D_GGX(a2, BottomContext.NoH);
		}
		float3 F_Bot = F_Schlick(GBuffer.SpecularColor, BottomContext.VoH);
		float3 F_DefaultLit = F_Schlick(GBuffer.SpecularColor, Context.VoH);
		float Energy = 0;
		[branch]
		if (bHasAnisotropy)
		{
			FAreaLight Punctual = AreaLight;
			Punctual.SphereSinAlpha = 0;
			Punctual.SphereSinAlphaSoft = 0;
			Punctual.LineCosSubtended = 1;
			Punctual.Rect = (FRect)0;
			Punctual.IsRectAndDiffuseMicroReflWeight = 0;
			Energy = EnergyNormalization(a2, Context.VoH, Punctual);
		}
		else
		{
			Energy = EnergyNormalization(a2, Context.VoH, AreaLight);
		}
		float3 CommonSpecular = (Energy * Falloff * NoL * D2 * Vis2) * AreaLight.FalloffColor;
		float3 DefaultSpecular = F_DefaultLit;
		float3 RefractedSpecular = FresnelCoeff * Transmission * F_Bot;
		Lighting.Specular += CommonSpecular * lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	return Lighting;
}
void GetProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{
	GetSubsurfaceProfileDualSpecular(SubsurfaceProfileInt, Roughness, Opacity, LobeRoughness0, LobeRoughness1, LobeMix);
}
FDirectLighting SubsurfaceProfileBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	uint SubsurfaceProfileId = ExtractSubsurfaceProfileInt(GBuffer);
	float Opacity = GBuffer.CustomData.a;
	float Roughness = GBuffer.Roughness;
	float Lobe0Roughness = 0;
	float Lobe1Roughness = 0;
	float LobeMix = 0;
	GetProfileDualSpecular(SubsurfaceProfileId, Roughness, Opacity, Lobe0Roughness, Lobe1Roughness, LobeMix);
	float AverageRoughness = lerp(Lobe0Roughness, Lobe1Roughness, LobeMix);
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(AverageRoughness, Context.NoV, GBuffer.SpecularColor);
	FDirectLighting Lighting;
	const float3 DiffuseReflection = Diffuse_Burley(GBuffer.DiffuseColor, GBuffer.Roughness, Context.NoV, NoL, Context.VoH);
	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * DiffuseReflection;
	if (IsRectLight(AreaLight))
	{
		float3 Lobe0Specular = RectGGXApproxLTC(Lobe0Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 Lobe1Specular = RectGGXApproxLTC(Lobe1Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		Lighting.Specular = lerp(Lobe0Specular, Lobe1Specular, LobeMix);
	}
	else
	{
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * DualSpecularGGX(AverageRoughness, Lobe0Roughness, Lobe1Roughness, LobeMix, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}
	Lighting.Diffuse  *= ComputeEnergyPreservation(EnergyTerms);
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);
	Lighting.Transmission = 0;
	return Lighting;
}
FDirectLighting ClothBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 FuzzColor	= ExtractSubsurfaceColor(GBuffer);
	const float  Cloth		= saturate(GBuffer.CustomData.a);
	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	float3 Spec1;
	if(IsRectLight(AreaLight))
		Spec1 = RectGGXApproxLTC( GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture );
	else
		Spec1 = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX( GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight );
	const FBxDFEnergyTermsRGB EnergyTerms1 = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
	Spec1 *= ComputeEnergyConservation(EnergyTerms1);
	float D2 = D_InvGGX( Pow4( GBuffer.Roughness ), Context.NoH );
	float Vis2 = Vis_Cloth( Context.NoV, NoL );
	float3 F2 = F_Schlick( FuzzColor, Context.VoH );
	float3 Spec2 = AreaLight.FalloffColor * (Falloff * NoL) * (D2 * Vis2) * F2;
	const FBxDFEnergyTermsA EnergyTerms2 = ComputeClothEnergyTermsA(GBuffer.Roughness, Context.NoV);
	Spec2 *= ComputeEnergyConservation(EnergyTerms2);
	FDirectLighting Lighting;
	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert( GBuffer.DiffuseColor ); 
	Lighting.Specular = lerp( Spec1, Spec2, Cloth );
	Lighting.Transmission = 0;
	Lighting.Diffuse *= lerp(ComputeEnergyPreservation(EnergyTerms1), ComputeEnergyPreservation(EnergyTerms2), Cloth);
	return Lighting;
}
FDirectLighting SubsurfaceBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);
	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;
	float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity);
	const float WrappedDiffuse = pow(saturate(dot(N, L) * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
	const float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
	const float BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * 2);
	const float3 ExtinctionCoefficients = TransmittanceToExtinction(SubsurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
	const float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
	const float3 TransmittedColor = HSV_2_LinearRGB(float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubsurfaceColor).z));
	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * lerp(BackScatter, 1, InScatter)) * lerp(TransmittedColor, SubsurfaceColor, Shadow.TransmissionThickness);
	return Lighting;
}
FDirectLighting TwoSidedBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Wrap = 0.5;
	float WrapNoL = saturate( ( -dot(N, L) + Wrap ) / Square( 1 + Wrap ) );
	float VoL = dot(V, L);
	float Scatter = D_GGX( 0.6*0.6, saturate( -VoL ) );
	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * WrapNoL * Scatter) * SubsurfaceColor;
	return Lighting;
}
FDirectLighting EyeBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 IrisNormal		= OctahedronToUnitVector( GBuffer.CustomData.yz * 2 - 1 );
	const float  IrisDistance	= GBuffer.StoredMetallic;
	const float  IrisMask		= 1.0f - GBuffer.CustomData.w;
	const float3 CausticNormal = normalize(lerp(IrisNormal, -N, IrisMask*IrisDistance));
	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, false );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;
	float F0 = GBuffer.Specular * 0.08;
	float Fc = Pow5( 1 - Context.VoH );
	float F = Fc + (1 - Fc) * F0;
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, F0);
	FDirectLighting Lighting;
	if( bIsRect )
	{
		Lighting.Specular = RectGGXApproxLTC( GBuffer.Roughness, F0, N, V, AreaLight.Rect, AreaLight.Texture );
	}
	else
	{
		float a2 = Pow4( GBuffer.Roughness );
		float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
		float D = D_GGX(a2, Context.NoH) * Energy;
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * D * Vis * F;
	}
	float IrisNoL = saturate( dot( IrisNormal, L ) );
	float Power = lerp( 12, 1, IrisNoL );
	float Caustic = 0.8 + 0.2 * ( Power + 1 ) * pow( saturate( dot( CausticNormal, L ) ), Power );
	float Iris = IrisNoL * Caustic;
	float Sclera = NoL;
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);
	const float EnergyPreservation = 1.0f - F;
	Lighting.Diffuse = 0;
	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp( Sclera, Iris, IrisMask ) * EnergyPreservation ) * Diffuse_Lambert( GBuffer.DiffuseColor );
	return Lighting;
}
FDirectLighting PreintegratedSkinBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;
	float3 PreintegratedBRDF = Texture2DSampleLevel(View_PreIntegratedBRDF, View_PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * PreintegratedBRDF * SubsurfaceColor;
	return Lighting;
}
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	switch( GBuffer.ShadingModelID )
	{
		case 1:
		case 10:
		case 11:
			return DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 2:
			return SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 3:
			return PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 4:
			return ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 5:
			return SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 6:
			return TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 7:
			return HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 8:
			return ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 9:
			return EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		default:
			return (FDirectLighting)0;
	}
}
FDirectLighting EvaluateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float NoL, FShadowTerms Shadow )
{
	FAreaLight AreaLight;
	AreaLight.SphereSinAlpha = 0;
	AreaLight.SphereSinAlphaSoft = 0;
	AreaLight.LineCosSubtended = 1;
	AreaLight.FalloffColor = 1;
	AreaLight.Rect = (FRect)0;
	AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	AreaLight.Texture = InitRectTexture();
	return IntegrateBxDF( GBuffer, N, V, L, 1, NoL, AreaLight, Shadow );
}
float SqrtOneMinusX(float x)
{
	return x < 0.01 ? 1 - x * (0.5 + x * 0.125) : sqrt(1 - x);
}
struct FCapsuleSphericalBounds
{
	FSphericalRect SphericalRect;
	float3 ConeAxis;
	float ConeSinThetaMax2;
	float ConeSolidAngle;
};
float GetCapsuleBoundsInversePdf(float3 Direction, FCapsuleSphericalBounds Bounds)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return Bounds.ConeSolidAngle;
	}
	float LocalDirZ = dot(Direction, Bounds.SphericalRect.Axis[2]);
	float DistanceSquared = Square(Bounds.SphericalRect.z0 / LocalDirZ);
	return GetSphericalRectInversePdf(Direction, DistanceSquared, Bounds.SphericalRect);
}
float4 SampleCapsuleBounds(FCapsuleSphericalBounds Bounds, float2 E)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return float4(TangentToWorld(UniformSampleConeRobust(E, Bounds.ConeSinThetaMax2).xyz, Bounds.ConeAxis), Bounds.ConeSolidAngle);
	}
	else
	{
		FSphericalRectSample Result = UniformSampleSphericalRect(E, Bounds.SphericalRect);
		return float4(Result.Direction, Result.InvPdf);
	}
}
FCapsuleSphericalBounds CapsuleGetSphericalBounds(float3 Origin, float3 Axis, float Radius, float Length)
{
	float h = dot(Axis, Origin);
	float3 ClosestPointOnAxis = Origin - Axis * h;
	float DistanceToAxisSqr = dot(ClosestPointOnAxis, ClosestPointOnAxis);
	float RadiusSqr = Pow2(Radius);
	if (DistanceToAxisSqr <= RadiusSqr)
	{
		float3 CapCenter = Origin - Axis * Length * 0.5 * sign(h);
		float LightDistanceSquared = dot(CapCenter, CapCenter);
		float SinThetaMax2 = saturate(RadiusSqr / LightDistanceSquared);
		FCapsuleSphericalBounds Result;
		Result.SphericalRect = (FSphericalRect)0;
		Result.SphericalRect.SolidAngle = (asfloat(0x7F800000)); 
		Result.ConeAxis = normalize(CapCenter);
		Result.ConeSinThetaMax2 = SinThetaMax2;
		Result.ConeSolidAngle = UniformConeSolidAngle(SinThetaMax2);
		return Result;
	}
	FRect Rect;
	Rect.Origin = Origin;
	Rect.Axis[1] = Axis;
	Rect.Axis[2] = normalize(-ClosestPointOnAxis);
	Rect.Axis[0] = cross(Rect.Axis[1], Rect.Axis[2]);
	float SinCylinderAngle = Radius * rsqrt(DistanceToAxisSqr);
	float RectRadius = Radius * rsqrt(1 - Pow2(SinCylinderAngle));
	float Extension[2];
	for (int i = 0; i < 2; i++)
	{
		float hi = Length * (i > 0 ? 0.5 : -0.5);
		float3 PointPos = Origin + Axis * hi;
		float InverseDist = rsqrt(dot(PointPos, PointPos));
		float SinSphereAngle = saturate(Radius * InverseDist);
		float CosSphereAngle = SqrtOneMinusX(Pow2(SinSphereAngle));
		float CosAxisAngle = -dot(Axis, PointPos) * InverseDist;
		CosAxisAngle = sign(CosAxisAngle * hi) * saturate(abs(CosAxisAngle));
		float SinAxisAngle = SqrtOneMinusX(Pow2(CosAxisAngle));
		float CosExtension = SinAxisAngle * CosSphereAngle + CosAxisAngle * SinSphereAngle;
		Extension[i] = Radius / CosExtension;
	}
	float Translate = 0.5 * (Extension[1] - Extension[0]);
	float Extend = 0.5 * (Extension[0] + Extension[1]);
	Rect.Origin += Translate * Rect.Axis[1];
	Rect.Extent = float2(RectRadius, 0.5 * Length + Extend);
	float3 R0 = Rect.Origin - Rect.Axis[1] * Rect.Extent.y;
	float3 R1 = Rect.Origin + Rect.Axis[1] * Rect.Extent.y;
	float InvDistR0 = rsqrt(dot(R0, R0));
	float InvDistR1 = rsqrt(dot(R1, R1));
	FCapsuleSphericalBounds Result;
	Result.SphericalRect = BuildSphericalRect(Rect);
	Result.ConeAxis = normalize(lerp(R0, R1, saturate(InvDistR1 / (InvDistR0 + InvDistR1))));
	Result.ConeSinThetaMax2 = saturate(0.5 - 0.5 * dot(R0, R1) * InvDistR0 * InvDistR1); 
	Result.ConeSolidAngle = UniformConeSolidAngle(Result.ConeSinThetaMax2);
	return Result;
}
float CapsuleTest(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{
	float B = dot(Rd, Axis);
	float t = clamp(dot(Center, B * Rd - Axis) / (1 - B * B), -0.5 * Length, 0.5 * Length);
	float3 ToSphere = Center + t * Axis;
	float3 C = cross(Rd, ToSphere);
	return dot(C, C) <= Radius2 ? length(ToSphere) : -1.0;
}
uint2 SobolPixel(uint2 Pixel)
{
	int3 SobolLo = int3(Pixel & 0xfu, 0);
	int3 SobolHi = int3((Pixel >> 4u) & 0xfu, 0) + int3(16, 0, 0);
	uint Packed = View_SobolSamplingTexture.Load(SobolLo) ^ View_SobolSamplingTexture.Load(SobolHi);
	return uint2(Packed, Packed << 8u) & 0xff00u;
}
uint2 SobolIndex(uint2 Base, int Index, int Bits = 10)
{
	uint2 SobolNumbers[10] = {
		uint2(0x8680u, 0x4c80u), uint2(0xf240u, 0x9240u), uint2(0x8220u, 0x0e20u), uint2(0x4110u, 0x1610u), uint2(0xa608u, 0x7608u),
		uint2(0x8a02u, 0x280au), uint2(0xe204u, 0x9e04u), uint2(0xa400u, 0x4682u), uint2(0xe300u, 0xa74du), uint2(0xb700u, 0x9817u),
	};
	uint2 Result = Base;
	[unroll] for (int b = 0; b < 10 && b < Bits; ++b)
	{
		Result ^= (Index & (1u << b)) ? SobolNumbers[b] : 0;
	}
	return Result;
}
FAreaLightIntegrateContext CreateCapsuleIntegrateContext(float Roughness, float3 N, float3 V, FCapsuleLight Capsule, bool bInverseSquared )
{
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();
	float NoL;
	float Falloff;
	float LineCosSubtended = 1;
	[branch]
	if( Capsule.Length > 0 )
	{
		LineIrradiance( N, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float DistSqr = dot( Capsule.LightPos[0], Capsule.LightPos[0] );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );
		float3 L = Capsule.LightPos[0] * rsqrt( DistSqr );
		NoL = dot( N, L );
	}
	if( Capsule.Radius > 0 )
	{
		float SinAlphaSqr = saturate( Pow2( Capsule.Radius ) * Falloff );
		NoL = SphereHorizonCosWrap( NoL, SinAlphaSqr );
	}
	NoL = saturate( NoL );
	Falloff = bInverseSquared ? Falloff : 1;
	float3 ToLight = Capsule.LightPos[0];
	if( Capsule.Length > 0 )
	{
		float3 R = reflect( -V, N );
		ToLight = ClosestPointLineToRay( Capsule.LightPos[0], Capsule.LightPos[1], Capsule.Length, R );
	}
	float DistSqr = dot( ToLight, ToLight );
	float InvDist = rsqrt( DistSqr );
	float3 L = ToLight * InvDist;
	Roughness = max( Roughness, View_MinRoughness );
	float a = Pow2( Roughness );
	const float SizeFadesOutDiffuseMicroRefl = 20.0;
	Out.AreaLight.SphereSinAlpha = saturate( Capsule.Radius * InvDist * (1 - a) );
	Out.AreaLight.SphereSinAlphaSoft = saturate( Capsule.SoftRadius * InvDist );
	Out.AreaLight.LineCosSubtended = LineCosSubtended;
	Out.AreaLight.FalloffColor = 1;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, false);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, saturate(1.0f - max(Capsule.Length, Capsule.Radius) / SizeFadesOutDiffuseMicroRefl));
	Out.NoL = NoL;
	Out.Falloff = Falloff;	
	Out.L = L;
	return Out;
}
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, bool bInverseSquared )
{
	GBuffer.Roughness = max( GBuffer.Roughness, View_MinRoughness );
	FAreaLightIntegrateContext Context = CreateCapsuleIntegrateContext(GBuffer.Roughness, N, V, Capsule, bInverseSquared);
	return IntegrateBxDF( GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow );
}
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;
	Capsule.Radius = max( 1, Capsule.Radius );
	const float SphereArea = (4*PI) * Pow2( Capsule.Radius );
	const float CylinderArea = (2*PI) * Capsule.Radius * Capsule.Length;
	const float SurfaceArea = SphereArea + CylinderArea;
	const float SurfaceColor = 4.0 / SurfaceArea;
	float3 ToLight = 0.5 * ( Capsule.LightPos[0] + Capsule.LightPos[1] );
	float3 CapsuleAxis = normalize( Capsule.LightPos[1] - Capsule.LightPos[0] );
	float DistanceSqr = dot( ToLight, ToLight );
	float3 ConeAxis = ToLight * rsqrt( DistanceSqr );
	float SineConeSqr = saturate(Pow2(Capsule.Radius) / DistanceSqr);
	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(ToLight, CapsuleAxis, Capsule.Radius, Capsule.Length);
	const uint NumSets = 3;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		16,	
	};
	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );
	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;
			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			float3 L, H;
			if( Set == 0 )
			{
				L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
				H = normalize(V + L);
			}
			else if( Set == 1 )
			{
				H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
				L = 2 * dot( V, H ) * H - V;
			}
			else
			{
				if( Capsule.Length > 0 )
				{
					float3 ToArea = SampleCapsuleBounds(CapsuleBounds, E).xyz;
					L = normalize( ToArea );
					H = normalize( V + L );
				}
				else
				{
					L = TangentToWorld( UniformSampleConeRobust( E, SineConeSqr).xyz, ConeAxis );
					H = normalize(V + L);
				}
			}
			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );
			if( NoL > 0 && VoH > 0 )
			{
				{
					if (CapsuleTest(L, ToLight, CapsuleAxis, Pow2(Capsule.Radius), Capsule.Length) > 0)
					{
						continue;
					}
				}
				float PDF[] =
				{
					NoL / PI,
					D_GGX(Pow4(GBuffer.Roughness), NoH) * NoH / (4 * VoH),
					rcp(GetCapsuleBoundsInversePdf(L, CapsuleBounds))
				};
				if( Capsule.Length == 0 )
				{
					PDF[2] = 1.0 / UniformConeSolidAngle(SineConeSqr);
				}
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];
				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );
				Lighting.Diffuse		+= SurfaceColor * Weight * LightingSample.Diffuse;
				Lighting.Specular		+= SurfaceColor * Weight * LightingSample.Specular;
				Lighting.Transmission	+= SurfaceColor * Weight * LightingSample.Transmission;
			}
		}
	}
	return Lighting;
}
FAreaLightIntegrateContext CreateRectIntegrateContext( float Roughness, float3 N, float3 V, FRect Rect, FRectTexture SourceTexture )
{
	float NoL = 0;
	float Falloff = 0;
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();
	float3 L = RectIrradianceLambert( N, Rect, Falloff, NoL );
	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture );
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 1;
	Out.AreaLight.FalloffColor = FalloffColor;
	Out.AreaLight.Rect = Rect;
	Out.AreaLight.Texture = SourceTexture;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, true);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, 0.0);
	Out.L = L;
	Out.NoL = NoL;
	Out.Falloff = Falloff;
	return Out;
}
FDirectLighting IntegrateBxDF(FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture)
{
	const float Distance = dot(Rect.Axis[2], Rect.Origin);
	FDirectLighting Out = (FDirectLighting)0;
	if (IsRectVisible(Rect) && Distance > 0.001f)
	{
		FAreaLightIntegrateContext Context = CreateRectIntegrateContext(GBuffer.Roughness, N, V, Rect, SourceTexture);
		GBuffer.Roughness = max(GBuffer.Roughness, 0.02);
		Out = IntegrateBxDF(GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow);
	}
	return Out;
}
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;
	const float SurfaceArea = 4 * Rect.Extent.x * Rect.Extent.y;
	const float SurfaceColor = 2.0 / SurfaceArea;
	if( dot( Rect.Axis[2], Rect.Origin ) < 0 )
		return Lighting;
	if (!IsRectVisible(Rect))
		return Lighting;
	FSphericalRect SphericalRect = BuildSphericalRect( Rect );
	const uint NumSets = 4;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		0,	
		16,	
	};
	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );
	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;
			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			float3 L, H;
			switch( Set )
			{
				case 0:
				{
					L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
					H = normalize( V + L );
					break;
				}
				case 1:
				{
					H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
					L = 2 * dot( V, H ) * H - V;
					break;
				}
				case 2:
				{
					float3 ToArea = Rect.Origin;
					ToArea += (E.x * 2 - 1) * Rect.Axis[0] * Rect.Extent.x;
					ToArea += (E.y * 2 - 1) * Rect.Axis[1] * Rect.Extent.y;
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
				case 3:
				{
					L = UniformSampleSphericalRect( E, SphericalRect ).Direction;
					H = normalize( V + L );
					break;
				}
			}
			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );
			if( NoL > 0 && VoH > 0 )
			{
				float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
				float3 PointOnPlane = L * t;
				float2 PointInRect;
				PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
				PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );
				float2 RectUV = PointInRect / Rect.Extent * float2( 0.5, -0.5 ) + 0.5;
				float3 LightColor = SampleRectTexture(SourceTexture, RectUV, 0, true);
				if( Set == 0 || Set == 1 )
				{
					bool InExtentX = abs( PointInRect.x ) <= Rect.Extent.x;
					bool InExtentY = abs( PointInRect.y ) <= Rect.Extent.y;
					[branch]
					if( t < 0 || !InExtentX || !InExtentY )
					{
						continue;
					}
				}
				float PDF[] =
				{
					NoL * (1 / PI),
					D_GGX( Pow4(GBuffer.Roughness), NoH ) * NoH / (4 * VoH),
					dot( PointOnPlane, PointOnPlane ) / ( SurfaceArea * abs( dot( L, Rect.Axis[2] ) ) ),
					1.0 / SphericalRect.SolidAngle,
				};
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];
				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );
				Lighting.Diffuse		+= ( LightColor * Weight ) * LightingSample.Diffuse;
				Lighting.Specular		+= ( LightColor * Weight ) * LightingSample.Specular;
				Lighting.Transmission	+= ( LightColor * Weight ) * LightingSample.Transmission;
			}
		}
	}
	return Lighting;
}
float GetLocalLightFunctionCommon(float3 TranslatedWorldPosition, uint LightFunctionAtlasLightIndex)
{
	if (LightFunctionAtlasLightIndex == 0)
	{
		return 1.0f;
	}
	const uint BaseBufferIndex = LightFunctionAtlasLightIndex * 5; 
	float4 LightFunctionLightDataParameters = LightFunctionAtlas_LightInfoDataBuffer[BaseBufferIndex + 0];
	const float  FadeDistance				= LightFunctionLightDataParameters.x;
	const uint   PackedLightInfoDataParams0 = asuint(LightFunctionLightDataParameters.y);
	const uint   PackedLightInfoDataParams1 = asuint(LightFunctionLightDataParameters.z);
	const float	 TanOuterAngle				= LightFunctionLightDataParameters.w;
	const uint   LightType					= PackedLightInfoDataParams0 & 0xFF;
	const float  DisabledBrightness			= f16tof32((PackedLightInfoDataParams0 >> 8) & 0xFFFF);
	const float2 Slot_MinUV					= float2(((PackedLightInfoDataParams1) & 0xFFFF) * rcp(65536.0f), ((PackedLightInfoDataParams1 >> 16) & 0xFFFF) * rcp(65536.0f));
	float4x4 ActualLightFunctionMatrix = float4x4(
		LightFunctionAtlas_LightInfoDataBuffer[BaseBufferIndex + 1],
		LightFunctionAtlas_LightInfoDataBuffer[BaseBufferIndex + 2],
		LightFunctionAtlas_LightInfoDataBuffer[BaseBufferIndex + 3],
		LightFunctionAtlas_LightInfoDataBuffer[BaseBufferIndex + 4]);
	float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPosition, 1), ActualLightFunctionMatrix);
	float3 LightVector = HomogeneousShadowPosition.zyx / HomogeneousShadowPosition.w;
	float2 LightFunctionUV = LightVector.xy;
	switch (LightType)
	{
	case 2:
	{
		LightFunctionUV = LightVector.xy / (LightVector.z * TanOuterAngle) * .5f + .5f;
		break;
	}
	case 1:
	{
		float3 UnitLightVector = normalize(LightVector);
		LightFunctionUV = float2((atan2(UnitLightVector.y, UnitLightVector.x) + PI) / (2 * PI), acos(UnitLightVector.z) / PI);
		break;
	}
	case 3:
	{
		if (TanOuterAngle > 0.0f)
		{
			LightFunctionUV = LightVector.xy / (LightVector.z * TanOuterAngle) * .5f + .5f;
		}
		break;
	}
	default:
	{
		break;
	}
	}
	LightFunctionUV = frac(LightFunctionUV);
	float2 AtlasUV = Slot_MinUV + saturate(LightFunctionUV) * LightFunctionAtlas_Slot_UVSize.xx;
	float LightFunctionColor = Texture2DSampleLevel(LightFunctionAtlas_LightFunctionAtlasTexture, View_SharedBilinearClampedSampler, AtlasUV, 0).x;
	LightFunctionColor = LightFunctionColor * LightFunctionColor; 
	float ViewDistance = length(GetPrimaryView().TranslatedWorldCameraOrigin - TranslatedWorldPosition);
	float DistanceFadeAlpha = saturate((FadeDistance - ViewDistance) / (FadeDistance * .2f));
	LightFunctionColor = lerp(DisabledBrightness, LightFunctionColor, DistanceFadeAlpha);
	const float ShadowFadeFraction = 1.0f; 
	LightFunctionColor = LightFunctionColor; 
	return LightFunctionColor;
}
float DistanceFromCameraFade(float SceneDepth, FDeferredLightData LightData)
{
	float Fade = saturate(SceneDepth * LightData.DistanceFadeMAD.x + LightData.DistanceFadeMAD.y);
	return Fade * Fade;
}
void GetShadowTermsBase(
	float SceneDepth, 
	float4 PrecomputedShadowFactors, 
	FDeferredLightData LightData, 
	float4 LightAttenuation, 
	inout FShadowTerms OutShadow)
{
	[branch]
	if (LightData.ShadowedBits)
	{
		float StaticShadowing = 1.0f;
		if (LightData.bRadialLight || 0)
		{
			OutShadow.SurfaceShadow = LightAttenuation.z * StaticShadowing;
			OutShadow.TransmissionShadow = LightAttenuation.w * StaticShadowing;
			OutShadow.TransmissionThickness = LightAttenuation.w;
		}
		else
		{
			float DynamicShadowFraction = DistanceFromCameraFade(SceneDepth, LightData);
			OutShadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);
			OutShadow.TransmissionShadow = min(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);
			OutShadow.SurfaceShadow *= LightAttenuation.z;
			OutShadow.TransmissionShadow *= LightAttenuation.z;
			OutShadow.TransmissionThickness = min(LightAttenuation.y, LightAttenuation.w);
		}
	}
	OutShadow.HairTransmittance = LightData.HairTransmittance;
	OutShadow.HairTransmittance.OpaqueVisibility = OutShadow.SurfaceShadow;
}
void ApplyContactShadowWithShadowTerms(
	float SceneDepth, 
	uint ShadingModelID, 
	float ContactShadowOpacity, 
	FDeferredLightData LightData, 
	float3 TranslatedWorldPosition, 
	float3 L, 
	float Dither, 
	inout FShadowTerms OutShadow)
{
}
void GetShadowTerms(
	float SceneDepth,
	float4 PrecomputedShadowFactors,
	uint ShadingModelID,
	float ContactShadowOpacity,
	FDeferredLightData LightData,
	float3 TranslatedWorldPosition,
	float3 L,
	float4 LightAttenuation,
	float Dither,
	inout FShadowTerms OutShadow)
{
	GetShadowTermsBase(SceneDepth, PrecomputedShadowFactors, LightData, LightAttenuation, OutShadow);
	ApplyContactShadowWithShadowTerms (SceneDepth, ShadingModelID, ContactShadowOpacity, LightData, TranslatedWorldPosition, L, Dither, OutShadow);
}
float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition, 
	FDeferredLightData LightData, 
	inout float3 ToLight, 
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );
	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}
	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}
	if( LightData.bRectLight )
	{
		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}
	return LightMask;
}
FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight, 
		LightData.Direction, 
		LightData.Tangent, 
		LightData.SourceRadius, 
		LightData.SourceLength, 
		LightData.RectLightData.BarnCosAngle, 
		LightData.RectLightData.BarnLength,
		1);
}
FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}
FLightAccumulator AccumulateDynamicLighting(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion,
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = (FLightAccumulator)0;
	float3 V = -CameraVector;
	float3 N = GBuffer.WorldNormal;
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		N = OctahedronToUnitVector(oct1);			
	}
	float3 L = LightData.Direction;	
	float3 ToLight = L;
	float3 MaskedLightColor = LightData.Color;
	float LightMask = 1;
	if (LightData.bRadialLight)
	{
		LightMask = GetLocalLightAttenuation( TranslatedWorldPosition, LightData, ToLight, L );
		MaskedLightColor *= LightMask;
	}
	LightAccumulator.EstimatedCost += 0.3f;		
	[branch]
	if( LightMask > 0 )
	{
		FShadowTerms Shadow;
		Shadow.SurfaceShadow = AmbientOcclusion;
		Shadow.TransmissionShadow = 1;
		Shadow.TransmissionThickness = 1;
		Shadow.HairTransmittance.OpaqueVisibility = 1;
		const float ContactShadowOpacity = GBuffer.CustomData.a;
		GetShadowTerms(GBuffer.Depth, GBuffer.PrecomputedShadowFactors, GBuffer.ShadingModelID, ContactShadowOpacity,
			LightData, TranslatedWorldPosition, L, LightAttenuation, Dither, Shadow);
		SurfaceShadow = Shadow.SurfaceShadow;
		LightAccumulator.EstimatedCost += 0.3f;		
		[branch]
		if( Shadow.SurfaceShadow + Shadow.TransmissionShadow > 0 )
		{
			const bool bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);
			FDirectLighting Lighting;
			if (LightData.bRectLight)
			{
				FRect Rect = GetRect( ToLight, LightData );
				const FRectTexture SourceTexture = ConvertToRectTexture(LightData);
					Lighting = IntegrateBxDF( GBuffer, N, V, Rect, Shadow, SourceTexture);
			}
			else
			{
				FCapsuleLight Capsule = GetCapsule( ToLight, LightData );
					Lighting = IntegrateBxDF( GBuffer, N, V, Capsule, Shadow, LightData.bInverseSquared );
			}
			Lighting.Specular *= LightData.SpecularScale;
			Lighting.Diffuse  *= LightData.DiffuseScale;
			MaskedLightColor *= GetLocalLightFunctionCommon(TranslatedWorldPosition, LightData.LightFunctionAtlasLightIndex);
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, MaskedLightColor * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, 0.0f, Lighting.Transmission, MaskedLightColor * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );
			LightAccumulator.EstimatedCost += 0.4f;		
		}
	}
	return LightAccumulator;
}
FDeferredLightingSplit GetDynamicLightingSplit(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, 
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = AccumulateDynamicLighting(TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, LightData, LightAttenuation, Dither, SVPos, SurfaceShadow);
	return LightAccumulator_GetResultSplit(LightAccumulator);
}
uint PCGHash(uint Input)
{
    uint State = Input * 747796405u + 2891336453u;
    uint Word = ((State >> ((State >> 28u) + 4u)) ^ State) * 277803737u;
    return (Word >> 22u) ^ Word;
}
Buffer<uint> ShaderPrint_StateBuffer;
RWBuffer<uint> ShaderPrint_RWEntryBuffer;
uint GetSymbolOffset(uint InIndex)
{
	return 4 + 4 * InIndex; 
}
uint GetPrimitiveLineOffset(uint InIndex, uint MaxCharacterCount)
{
	return 4 + 4 * MaxCharacterCount + 8 * InIndex; 
}
struct FFontColor
{
	float3 Color;
};
FFontColor InitFontColor(float InX, float InY, float InZ)	{ FFontColor Out; Out.Color = float3(InX, InY, InZ); return Out; }
FFontColor InitFontColor(float3 In)							{ FFontColor Out; Out.Color = In; return Out; }
FFontColor GetDefaultFontColor()							{ FFontColor Out; Out.Color = float3(1,1,1); return Out; }
FFontColor Select(bool Condition, FFontColor A, FFontColor B)
{
	if (Condition)
	{
		return A;
	}
	return B; 
}
struct FShaderPrintItem
{
	float2 ScreenPos; 
	int Value;        
	int Type;         
	float3 Color;	  
	uint Metadata;	  
};
struct FPackedShaderPrintItem
{
	uint ScreenPos16bits; 
	uint Value;           
	uint TypeAndColor;    
	uint Metadata;	      
};
FPackedShaderPrintItem PackShaderPrintItem(FShaderPrintItem In)
{
	const uint3 Color8bits = saturate(In.Color) * 0xFF;
	const uint2 ScreenPos16bit = f32tof16(In.ScreenPos);
	FPackedShaderPrintItem Out;
	Out.ScreenPos16bits = ScreenPos16bit.x | (ScreenPos16bit.y<<16);
	Out.Value = asuint(In.Value);
	Out.TypeAndColor = (Color8bits.z << 24) | (Color8bits.y << 16) | (Color8bits.x << 8) | (In.Type & 0xFF);
	Out.Metadata = In.Metadata;
	return Out;
}
void WriteSymbol(uint Offset, FShaderPrintItem In, RWBuffer<uint> InRWBuffer)
{
	const uint Offset4 = GetSymbolOffset(Offset);
	const FPackedShaderPrintItem Packed = PackShaderPrintItem(In);
	InRWBuffer[Offset4 + 0] = Packed.ScreenPos16bits;
	InRWBuffer[Offset4 + 1] = Packed.Value;
	InRWBuffer[Offset4 + 2] = Packed.TypeAndColor;
	InRWBuffer[Offset4 + 3] = Packed.Metadata;
}
struct FShaderPrintConfig
{
	int2 Resolution;
	int2 CursorCoord;
	float3 TranslatedWorldOffset;
	float2 FontSize;
	float2 FontSpacing;
	uint MaxCharacterCount;
	uint MaxSymbolCount;
	uint MaxStateCount;
	uint MaxLineCount;
	uint MaxTriangleCount;
	bool bIsDrawLocked;
};
struct FShaderPrintBuffers
{
	Buffer<uint> StateBuffer;
	RWBuffer<uint> RWEntryBuffer;
};
struct FShaderPrintContext
{
	bool bIsActive;
	float2 StartPos;
	float2 Pos;
	FShaderPrintConfig Config;
	bool IsDrawLocked() { return Config.bIsDrawLocked; }
	FShaderPrintBuffers Buffers;
};
void WriteSymbol(uint Offset, FShaderPrintItem In, FShaderPrintContext Ctx) 
{
	const uint Offset4 = GetSymbolOffset(Offset);
	const FPackedShaderPrintItem Packed = PackShaderPrintItem(In);
	  Ctx .Buffers.RWEntryBuffer[ Offset4 + 0 ] = Packed.ScreenPos16bits;
	  Ctx .Buffers.RWEntryBuffer[ Offset4 + 1 ] = Packed.Value;
	  Ctx .Buffers.RWEntryBuffer[ Offset4 + 2 ] = Packed.TypeAndColor;
	  Ctx .Buffers.RWEntryBuffer[ Offset4 + 3 ] = Packed.Metadata;
}
void ShaderPrint_Internal(FShaderPrintContext Ctx, in FShaderPrintItem Item)
{
	if (!Ctx.bIsActive || Ctx.Config.MaxCharacterCount == 0)
	{
		return;
	}
	int IndexToStore = 0;
	 InterlockedAdd(   Ctx .Buffers.RWEntryBuffer[ 2 ] , 1 , IndexToStore );
	if (uint(IndexToStore) >= Ctx.Config.MaxCharacterCount)
	{
		return;
	}
	WriteSymbol(IndexToStore, Item, Ctx);
}
void ShaderPrint_Internal(FShaderPrintContext Ctx, in float2 ScreenPos, in int Value, in FFontColor FontColor, in uint Metadata, in int Type)
{
	FShaderPrintItem Item;
	Item.ScreenPos = ScreenPos;
	Item.Value = Value;
	Item.Type = Type;
	Item.Color = FontColor.Color;
	Item.Metadata = Metadata;
	ShaderPrint_Internal(Ctx, Item);
}
void Newline(inout FShaderPrintContext Ctx)
{
	if (Ctx.bIsActive)
	{
		Ctx.Pos.x = Ctx.StartPos.x;
		Ctx.Pos.y += Ctx.Config.FontSpacing.y;
	}
}
struct FShaderPrintText
{
	uint Index;
};
FShaderPrintText InitShaderPrintText(uint InIndex)
{
	FShaderPrintText Out;
	Out.Index = InIndex;
	return Out;
}
uint ShaderPrintGetChar(uint InIndex);
uint ShaderPrintGetOffset(FShaderPrintText InTextEntry);
float2 ShaderPrintText_Internal(FShaderPrintContext Ctx, bool bIsActive, float2 InPos, FShaderPrintText InTextEntry, FFontColor InColor)
{
	if (bIsActive && Ctx.Config.MaxCharacterCount > 0)
	{
		const uint Begin = ShaderPrintGetOffset(InTextEntry);
		const uint End   = ShaderPrintGetOffset(InitShaderPrintText(InTextEntry.Index + 1));
		const uint Count = End - Begin;
		int IndexToStore = 0;
		 InterlockedAdd(   Ctx .Buffers.RWEntryBuffer[ 2 ] , Count , IndexToStore );
		if (uint(IndexToStore + Count) < Ctx.Config.MaxCharacterCount)
		{
			for (uint i = Begin; i < End; ++i)
			{
				FShaderPrintItem Item;
				Item.ScreenPos = InPos;
				Item.Value = ShaderPrintGetChar(i);
				Item.Type = 0;
				Item.Color = InColor.Color;
				Item.Metadata = 0u;
				WriteSymbol(IndexToStore, Item, Ctx);
				++IndexToStore;
				InPos.x += Ctx.Config.FontSpacing.x;
			}	
		}
	}
	return InPos;
}
void Print(inout FShaderPrintContext Ctx, FShaderPrintText InTextEntry, FFontColor InColor)	{ Ctx.Pos = ShaderPrintText_Internal(Ctx, Ctx.bIsActive, Ctx.Pos, InTextEntry, InColor); }
void Print(inout FShaderPrintContext Ctx, FShaderPrintText InTextEntry)						{ Ctx.Pos = ShaderPrintText_Internal(Ctx, Ctx.bIsActive, Ctx.Pos, InTextEntry, GetDefaultFontColor()); }
float2 ShaderPrintValue_Internal(FShaderPrintContext Ctx, float2 ScreenPos, float Value, FFontColor Color, uint MaxDigit, uint MaxDecimal)  { ShaderPrint_Internal(Ctx, ScreenPos, asint(Value),           Color, MaxDecimal, 1); ScreenPos.x += Ctx.Config.FontSpacing.x * MaxDigit; return ScreenPos; }
float2 ShaderPrintValue_Internal(FShaderPrintContext Ctx, float2 ScreenPos, int   Value, FFontColor Color, uint MaxDigit, uint MaxDecimal)  { ShaderPrint_Internal(Ctx, ScreenPos, Value,                  Color, MaxDecimal, 2);   ScreenPos.x += Ctx.Config.FontSpacing.x * MaxDigit; return ScreenPos; }
float2 ShaderPrintValue_Internal(FShaderPrintContext Ctx, float2 ScreenPos, uint  Value, FFontColor Color, uint MaxDigit, uint MaxDecimal)  { ShaderPrint_Internal(Ctx, ScreenPos, asint(Value),           Color, MaxDecimal, 3);  ScreenPos.x += Ctx.Config.FontSpacing.x * MaxDigit; return ScreenPos; }
float2 ShaderPrintValue_Internal(FShaderPrintContext Ctx, float2 ScreenPos, bool  Value, FFontColor Color, uint MaxDigit, uint MaxDecimal)  { ShaderPrint_Internal(Ctx, ScreenPos, asint(Value ? 1u : 0u), Color, MaxDecimal, 3);  ScreenPos.x += Ctx.Config.FontSpacing.x * MaxDigit; return ScreenPos; }
void   Print(inout FShaderPrintContext Ctx, float Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, Color, MaxDigit, MaxDecimal); } }
void   Print(inout FShaderPrintContext Ctx, float Value)																						{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, GetDefaultFontColor(), 12u, 5u); } }
void   Print(inout FShaderPrintContext Ctx, float2 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, float2 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, float3 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, float3 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, float4 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, float4 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, uint Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, Color, MaxDigit, MaxDecimal); } }
void   Print(inout FShaderPrintContext Ctx, uint Value)																						{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, GetDefaultFontColor(), 12u, 5u); } }
void   Print(inout FShaderPrintContext Ctx, uint2 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, uint2 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, uint3 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, uint3 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, uint4 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, uint4 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, int Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, Color, MaxDigit, MaxDecimal); } }
void   Print(inout FShaderPrintContext Ctx, int Value)																						{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, GetDefaultFontColor(), 12u, 5u); } }
void   Print(inout FShaderPrintContext Ctx, int2 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, int2 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 2 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, int3 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, int3 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 3 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, int4 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], Color, MaxDigit, MaxDecimal); } } }
void   Print(inout FShaderPrintContext Ctx, int4 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompIt=0;CompIt< 4 ;++CompIt) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value[CompIt], GetDefaultFontColor(), 12u, 5u); } } }
void   Print(inout FShaderPrintContext Ctx, bool Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, Color, MaxDigit, MaxDecimal); } }
void   Print(inout FShaderPrintContext Ctx, bool Value)																						{ if (Ctx.bIsActive) { Ctx.Pos = ShaderPrintValue_Internal(Ctx, Ctx.Pos, Value, GetDefaultFontColor(), 12u, 5u); } }
void   Print(inout FShaderPrintContext Ctx, float3x3 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 3 ;++CompY) { Print(Ctx, Value[CompY], Color, MaxDigit, MaxDecimal); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
void   Print(inout FShaderPrintContext Ctx, float3x3 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 3 ;++CompY) { Print(Ctx, Value[CompY], GetDefaultFontColor(), 12u, 5u); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
void   Print(inout FShaderPrintContext Ctx, float4x3 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 3 ;++CompY) { Print(Ctx, Value[CompY], Color, MaxDigit, MaxDecimal); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
void   Print(inout FShaderPrintContext Ctx, float4x3 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 3 ;++CompY) { Print(Ctx, Value[CompY], GetDefaultFontColor(), 12u, 5u); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
void   Print(inout FShaderPrintContext Ctx, float4x4 Value, FFontColor Color, uint MaxDigit=12u, uint MaxDecimal=5u)	{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 4 ;++CompY) { Print(Ctx, Value[CompY], Color, MaxDigit, MaxDecimal); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
void   Print(inout FShaderPrintContext Ctx, float4x4 Value)																						{ if (Ctx.bIsActive) { [unroll] for (uint CompY=0;CompY< 4 ;++CompY) { Print(Ctx, Value[CompY], GetDefaultFontColor(), 12u, 5u); Ctx.Pos += float2(0.f, Ctx.Config.FontSpacing.y); } } }
struct FLineElement 
{
	float3 Pos0;
	float3 Pos1;
	float4 Color0;
	float4 Color1;
	bool bIsScreenSpace;
};
struct FPackedLineElement
{
	uint4 Packed0;
	uint4 Packed1;
};
FPackedLineElement PackLineElement(FLineElement In)
{
	uint4 PackedC0 = uint4(255.0f * saturate(In.Color0));
	uint4 PackedC1 = uint4(255.0f * saturate(In.Color1));
	PackedC1 = PackedC1 & 0xFE;
	PackedC1 = PackedC1 | (In.bIsScreenSpace ? 0x1 : 0x0);
	FPackedLineElement Out = (FPackedLineElement)0;
	Out.Packed0.x = asuint(In.Pos0.x);
	Out.Packed0.y = asuint(In.Pos0.y);
	Out.Packed0.z = asuint(In.Pos0.z);
	Out.Packed0.w = (PackedC0.x << 24) | (PackedC0.y << 16) | (PackedC0.z << 8) | (PackedC0.w);
	Out.Packed1.x = asuint(In.Pos1.x);
	Out.Packed1.y = asuint(In.Pos1.y);
	Out.Packed1.z = asuint(In.Pos1.z);
	Out.Packed1.w = (PackedC1.x << 24) | (PackedC1.y << 16) | (PackedC1.z << 8) | (PackedC1.w);
	return Out;
}
bool AllocateLineElement(FShaderPrintContext Ctx, uint Count, inout uint OutIndex)
{
	OutIndex = 0;
	if (Ctx.Config.MaxLineCount == 0)
	{
		return false;
	}
	 InterlockedAdd(   Ctx .Buffers.RWEntryBuffer[ 0 ] , Count , OutIndex );
	return (OutIndex + Count) < Ctx.Config.MaxLineCount;
}
void AddLineElement(FShaderPrintContext Ctx, FLineElement In, uint Index)
{
	const uint Index8 = GetPrimitiveLineOffset(Index, Ctx.Config.MaxCharacterCount);
	FPackedLineElement Out = PackLineElement(In);
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 0 ] = Out.Packed0.x;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 1 ] = Out.Packed0.y;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 2 ] = Out.Packed0.z;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 3 ] = Out.Packed0.w;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 4 ] = Out.Packed1.x;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 5 ] = Out.Packed1.y;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 6 ] = Out.Packed1.z;
	  Ctx .Buffers.RWEntryBuffer[ Index8 + 7 ] = Out.Packed1.w;
}
void AddLineTWS(FShaderPrintContext Ctx, float3 Pos0, float3 Pos1, float4 Color0, float4 Color1)
{
	if (Ctx.bIsActive)
	{
		uint Offset = 0;
		if (AllocateLineElement(Ctx, 1, Offset))
		{
			FLineElement Element;
			Element.Pos0 = Pos0;
			Element.Pos1 = Pos1;
			Element.Color0 = Color0;
			Element.Color1 = Color1;
			Element.bIsScreenSpace = false;
			AddLineElement(Ctx, Element, Offset);
		}
	}
}
void AddLineTWS(FShaderPrintContext Ctx, float3 Pos0, float3 Pos1, float4 Color)					{ AddLineTWS(Ctx, Pos0, Pos1, Color, Color); }
void AddCrossTWS(FShaderPrintContext Ctx, float3 Pos, float Size, float4 Color)
{
	if (Ctx.bIsActive)
	{
		AddLineTWS(Ctx, Pos - float3(Size,0,0), Pos + float3(Size,0,0), Color, Color);
		AddLineTWS(Ctx, Pos - float3(0,Size,0), Pos + float3(0,Size,0), Color, Color);
		AddLineTWS(Ctx, Pos - float3(0,0,Size), Pos + float3(0,0,Size), Color, Color);
	}
}
void AddCircleTWS(FShaderPrintContext Ctx, float3 Center, float3 Normal, float Radius, float4 Color, uint SegmentCount = 16)
{
	if (Ctx.bIsActive)
	{
		const float3 RefUp = abs(Normal.z) < 0.999f ? float3(0, 0, 1) : float3(1, 0, 0);
		float3 X = normalize(cross(RefUp, Normal));
		float3 Y = cross(Normal, X);
		X *= Radius;
		Y *= Radius;
		const float AngleStep = 2.0f * PI * rcp(float(SegmentCount-1));
		float Angle = 0.0f;
		float3 PrevP = Center + X;
		for (uint SegIt = 0; SegIt < SegmentCount; ++SegIt)
		{
			Angle += AngleStep;
			float S, C;
			sincos(Angle, S, C);
			float3 P = Center + X * C + Y * S;
			AddLineTWS(Ctx, PrevP, P, Color, Color);
			PrevP = P;
		}
	}
}
void AddSphereTWS(FShaderPrintContext Ctx, float3 Center, float Radius, float4 Color, uint SegmentCount = 16)
{
	AddCircleTWS(Ctx, Center, float3(1, 0, 0), Radius, Color, SegmentCount);
	AddCircleTWS(Ctx, Center, float3(0, 1, 0), Radius, Color, SegmentCount);
	AddCircleTWS(Ctx, Center, float3(0, 0, 1), Radius, Color, SegmentCount);
}
FShaderPrintBuffers InitShaderPrintContextBuffers()
{
	FShaderPrintBuffers Buffers;
	Buffers.StateBuffer = ShaderPrint_StateBuffer;
	Buffers.RWEntryBuffer = ShaderPrint_RWEntryBuffer;
	return Buffers;
}
FShaderPrintConfig InitShaderPrintContextConfig()
{
	FShaderPrintConfig Config;
	Config.Resolution = ShaderPrintData_Resolution;
	Config.CursorCoord = ShaderPrintData_CursorCoord;
	Config.TranslatedWorldOffset = ShaderPrintData_TranslatedWorldOffset;
	Config.FontSize = ShaderPrintData_FontSize;
	Config.FontSpacing = ShaderPrintData_FontSpacing;
	Config.MaxCharacterCount = ShaderPrintData_MaxCharacterCount;
	Config.MaxSymbolCount = ShaderPrintData_MaxSymbolCount;
	Config.MaxStateCount = ShaderPrintData_MaxStateCount;
	Config.MaxLineCount = ShaderPrintData_MaxLineCount;
	Config.MaxTriangleCount = ShaderPrintData_MaxTriangleCount;
	Config.bIsDrawLocked = ShaderPrintData_IsDrawLocked;
	return Config;
}
FShaderPrintContext InitShaderPrintContext(bool bActive, float2 InStartPos)
{
	FShaderPrintContext Out;
	Out.bIsActive = bActive;
	Out.StartPos = InStartPos;
	Out.Pos = InStartPos;
	Out.Config = InitShaderPrintContextConfig();
	Out.Buffers = InitShaderPrintContextBuffers();
	return Out;
}
FShaderPrintContext InitShaderPrintContext(bool bActive, uint2 InStartCoord) 
{
	FShaderPrintConfig Config = InitShaderPrintContextConfig();
	return InitShaderPrintContext(bActive, float2(InStartCoord) / float2(Config.Resolution));
}
FShaderPrintContext InitShaderPrintContext()
{
	return InitShaderPrintContext(true, float2(0, 0));
}
void AddLineTWS(float3 Pos0, float3 Pos1, float4 Color)
{
	AddLineTWS(InitShaderPrintContext(), Pos0, Pos1, Color);
}
void AddLineTWS(float3 Pos0, float3 Pos1, float4 Color0, float4 Color1)
{
	AddLineTWS(InitShaderPrintContext(), Pos0, Pos1, Color0, Color1);
}
void AddCrossTWS(float3 Pos, float Size, float4 Color) 
{
	AddCrossTWS(InitShaderPrintContext(), Pos, Size, Color);
}
float3 GetTranslatedWorldPositionFromScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 ScreenPosition = (ScreenUV - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	return mul(float4(GetScreenPositionForProjectionType(ScreenPosition, SceneDepth), SceneDepth, 1), GetPrimaryView().ScreenToTranslatedWorld).xyz;
}
void PrintTileTypeString(inout FShaderPrintContext Context, uint TileType, FFontColor InColor = InitFontColor(1, 1, 1))
{
	switch (TileType)
	{
		case 0:							Print(Context, InitShaderPrintText(0), InColor); break;
		case 1:							Print(Context, InitShaderPrintText(1), InColor); break;
		case 2:						Print(Context, InitShaderPrintText(2), InColor); break;
		case 3:					Print(Context, InitShaderPrintText(3), InColor); break;
		case 4:			Print(Context, InitShaderPrintText(4), InColor); break;
		case 5:			Print(Context, InitShaderPrintText(5), InColor); break;
		case 6:									Print(Context, InitShaderPrintText(6), InColor); break;
	}
}
struct FDebug
{
	bool bActive;
	FShaderPrintContext Context;
};
                             
int2 GetDebugScreenCoord()
{
	const int2 OverrideCursorPosition = View_ViewSizeAndInvSize.xy / 2;
	const int2 CursorPosition = bOverrideCursorPosition > 0 ? OverrideCursorPosition : View_CursorPosition * View_ViewResolutionFraction;
	const int2 DebugScreenCoord = CursorPosition.x >= 0 ? View_ViewRectMin.xy + CursorPosition : -1;	
	return DebugScreenCoord;
}
uint2 UnpackTile(uint PackedTile)
{
	return uint2(PackedTile & 0xFFFF, PackedTile >> 16);
}
struct FLightSample
{
	uint LocalLightIndex;
	float Weight;
	bool bVisible;
	bool bCompleted; 
	bool bGuidedAsVisible;
	bool bGuidedAsPartiallyVisibleLight;
	bool bSupportScreenTrace;
};
FLightSample InitLightSample()
{
	FLightSample LightSample;
	LightSample.LocalLightIndex = (4096 - 1);
	LightSample.Weight = 0.0f;
	LightSample.bVisible = false;
	LightSample.bCompleted = true;
	LightSample.bGuidedAsVisible = true;
	LightSample.bGuidedAsPartiallyVisibleLight = false;
	LightSample.bSupportScreenTrace = true;
	return LightSample;
}
uint PackLightSample(FLightSample LightSample)
{
	uint PackedLightSample = LightSample.LocalLightIndex & 0xFFF;
	PackedLightSample |= LightSample.bVisible ? 0x8000 : 0;
	PackedLightSample |= LightSample.bCompleted ? 0x4000 : 0;
	PackedLightSample |= LightSample.bGuidedAsVisible ? 0x2000 : 0;
	PackedLightSample |= LightSample.bGuidedAsPartiallyVisibleLight ? 0x1000 : 0;
	PackedLightSample |= LightSample.bSupportScreenTrace ? 0x10000 : 0;
	PackedLightSample |= (f32tof16(LightSample.Weight) & 0xFFFE) << 16;
	return PackedLightSample;
}
uint PackLightSampleUV(float2 UV)
{
	uint V;
	V = uint(UV.x * 255.0f + 0.5f);
	V |= uint(UV.y * 255.0f + 0.5f) << 8;
	return V;
}
                               
uint2 GetSampleScreenCoordJitter(uint2 DownsampledScreenCoord)
{
	uint2 CellIndex = DownsampledScreenCoord % 2;
	uint LinearIndex = CellIndex.x + CellIndex.y * 2;
	LinearIndex = (LinearIndex + MegaLightsStateFrameIndex) % 4;
	uint2 Jitter;
	Jitter.x = LinearIndex & 0x02 ? 1 : 0;
	Jitter.y = LinearIndex & 0x01 ? 0 : 1;
	return Jitter;
}
uint2 DownsampledScreenCoordToScreenCoord(uint2 DownsampledScreenCoord)
{
	return DownsampledScreenCoord * 2 + GetSampleScreenCoordJitter(DownsampledScreenCoord);
}
struct FMegaLightsMaterial
{
	float  Depth;
	float3 WorldNormal;
	float3 WorldNormalForPositionBias;
	float  Roughness;
	bool   bIsValid;
	bool   bIsSimple;
	bool   bIsHair;
	bool   bNeedsSeparateSubsurfaceLightAccumulation;
	bool   bAllowSpatialFilter;
	float3 DiffuseColor;
	float3 SpecularColor;
	bool IsValid()
	{
		return bIsValid;
	}
	bool IsSimple()
	{
		return bIsSimple;
	}
	void SetDepth(float In)
	{
		Depth = In;
		GBuffer.Depth = In;
	}
	FGBufferData GBuffer;
};
FMegaLightsMaterial LoadMaterial(float2 ScreenUV, uint2 ScreenCoord, bool bForceSimpleShading = false)
{
	FGBufferData GBuffer = GetGBufferData(ScreenUV);
	GBuffer.Roughness = max(GBuffer.Roughness, View_MinRoughness);
	const bool bIsLit = GBuffer.ShadingModelID != 0;
	if (bForceSimpleShading)
	{
		 { };
		GBuffer.ShadingModelID = 1;
	}
	FMegaLightsMaterial Out = (FMegaLightsMaterial)0;
	Out.bIsValid = bIsLit;
	Out.bIsSimple = GBuffer.ShadingModelID == 1;
	Out.bIsHair = GBuffer.ShadingModelID == 7;
	Out.bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);
	Out.WorldNormal = GBuffer.WorldNormal;
	Out.WorldNormalForPositionBias = GBuffer.WorldNormal;
	Out.Depth = GBuffer.Depth;
	Out.Roughness = GBuffer.Roughness;
	Out.DiffuseColor = GBuffer.DiffuseColor;
	Out.SpecularColor = GBuffer.SpecularColor;
	Out.GBuffer = GBuffer;
	Out.bAllowSpatialFilter = true;
	if (GBuffer.ShadingModelID == 7)
	{
		const float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, Out.Depth);
		const float3 V = -GetCameraVectorFromTranslatedWorldPosition(TranslatedWorldPosition);
		float3 FakeNormal = normalize(V - Out.WorldNormal * dot(V, Out.WorldNormal));
		Out.WorldNormalForPositionBias = FakeNormal;
	}
	return Out;
}
FDeferredLightingSplit GetMegaLightsSplitLighting(
	float3 TranslatedWorldPosition,
	float3 CameraVector,
	FMegaLightsMaterial Material,
	float AmbientOcclusion,
	FDeferredLightData LightData,
	float4 LightAttenuation,
	float Dither,
	uint2 ScreenCoord,
	inout float SurfaceShadow)
{
	return GetDynamicLightingSplit(
		TranslatedWorldPosition, CameraVector, Material.GBuffer, AmbientOcclusion,
		LightData, LightAttenuation, Dither, ScreenCoord,
		SurfaceShadow);
}
bool GenerateCapsuleLightOcclusionRayWithSolidAngleSampling(
	FLightShaderParameters LightParameters,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	float3 LightDirection = LightParameters.TranslatedWorldPosition - TranslatedWorldPosition;
	float RayLength2 = dot(LightDirection, LightDirection);
	float Radius = max(LightParameters.SourceRadius, 0.01); 
	float Radius2 = Radius * Radius;
	float SourceLength = LightParameters.SourceLength;
	float3 Axis = LightParameters.Tangent;
	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(LightDirection, Axis, Radius, SourceLength);
	float4 Result = SampleCapsuleBounds(CapsuleBounds, RandSample);
	float Distance = CapsuleTest(Result.xyz, LightDirection, Axis, Radius2, SourceLength);
	if (Distance > 0)
	{
		RayOrigin = TranslatedWorldPosition;
		RayDirection = Result.xyz;
		RayTMin = 0;
		RayTMax = Distance;
		RayPdf = Result.w;
		return true;
	}
	else
	{
		RayOrigin = 0;
		RayDirection = 0;
		RayTMin = 0;
		RayTMax = 0;
		RayPdf = 0;
		return false;
	}
}
bool GenerateSphereLightOcclusionRayWithAreaSampling(
	FLightShaderParameters LightParameters,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	float4 Result = UniformSampleSphere(RandSample);
	float3 LightNormal = Result.xyz;
	float3 TranslatedLightPosition = LightParameters.TranslatedWorldPosition + LightNormal * LightParameters.SourceRadius;
	float3 LightDirection = TranslatedLightPosition - TranslatedWorldPosition;
	float RayLength = length(LightDirection);
	LightDirection /= RayLength;
	RayOrigin = TranslatedWorldPosition;
	RayDirection = LightDirection;
	RayTMin = 0.0;
	RayTMax = RayLength;
	float SolidAnglePdf = Result.w * saturate(dot(LightNormal, -LightDirection)) / (RayLength * RayLength);
	RayPdf = SolidAnglePdf;
	return true;
}
bool GenerateSphereLightOcclusionRayWithSolidAngleSampling(
	FLightShaderParameters LightParameters,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
	)
{
	RayOrigin = 0.0;
	RayDirection = 0.0;
	RayTMin = 0.0;
	RayTMax = 0.0;
	RayPdf = 0.0;
	float3 LightDirection = LightParameters.TranslatedWorldPosition - TranslatedWorldPosition;
	float RayLength2 = dot(LightDirection, LightDirection);
	float Radius2 = LightParameters.SourceRadius * LightParameters.SourceRadius;
	[branch]
	if (RayLength2 <= Radius2)
	{
		return GenerateSphereLightOcclusionRayWithAreaSampling(LightParameters, TranslatedWorldPosition, WorldNormal, RandSample,
			RayOrigin, RayDirection, RayTMin, RayTMax, RayPdf);
	}
	float SinThetaMax2 = Radius2 / RayLength2;
	float4 DirAndPdf = UniformSampleConeConcentricRobust(RandSample, SinThetaMax2);
	float CosTheta = DirAndPdf.z;
	float SinTheta2 = 1.0 - CosTheta * CosTheta;
	RayOrigin = TranslatedWorldPosition;
	float RayLength = sqrt(RayLength2);
	LightDirection *= rcp(RayLength + 1e-4);
	RayDirection = TangentToWorld(DirAndPdf.xyz, LightDirection);
	RayTMin = 0.0;
	RayTMax = RayLength * (CosTheta - sqrt(max(SinThetaMax2 - SinTheta2, 0.0)));
	RayPdf = DirAndPdf.w;
	return true;
}
bool GenerateRectLightOcclusionRay(
	FLightShaderParameters LightParameters,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	RayOrigin = TranslatedWorldPosition;
	RayDirection = float3(0,0,0);
	RayTMin = 0.0;
	RayTMax = 0.0;
	RayPdf = 0.0;
	FRect Rect = GetRect(LightParameters, TranslatedWorldPosition);
	FSphericalRect SphericalRect = BuildSphericalRect(Rect);
	RayPdf = 1.0 / SphericalRect.SolidAngle;
	FSphericalRectSample Sample = UniformSampleSphericalRect(RandSample, SphericalRect);
	bool bIsValidRay = dot(Sample.Direction, LightParameters.Direction) >= 0.0;
	RayDirection = Sample.Direction;
	RayTMax = Sample.Distance;
	return bIsValidRay;
}
bool GenerateShadowRay(
	FLightShaderParameters LightParameters,
	bool bSpotLight,
	bool bRectLight,
	float3 TranslatedWorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax)
{
	float RayPdf = 0.0;
	if (bRectLight)
	{
		return GenerateRectLightOcclusionRay(
			LightParameters,
			TranslatedWorldPosition, WorldNormal,
			RandSample,
			 RayOrigin,
			 RayDirection,
			 RayTMin,
			 RayTMax,
			 RayPdf);
	}
	else
	{
		if (LightParameters.SourceLength > 0.0)
		{
			return GenerateCapsuleLightOcclusionRayWithSolidAngleSampling(
				LightParameters,
				TranslatedWorldPosition, WorldNormal,
				RandSample,
				 RayOrigin,
				 RayDirection,
				 RayTMin,
				 RayTMax,
				 RayPdf);
		}
		return GenerateSphereLightOcclusionRayWithSolidAngleSampling(
			LightParameters,
			TranslatedWorldPosition, WorldNormal,
			RandSample,
			 RayOrigin,
			 RayDirection,
			 RayTMin,
			 RayTMax,
			 RayPdf);
	}
}
struct FLightSampleTrace
{
	float3 Direction;
	float Distance;
};
FLightSampleTrace GetLightSampleTrace(float3 TranslatedWorldPosition, uint LocalLightIndex, float2 LightSampleUV)
{
	FLightSampleTrace LightSampleTrace;
	LightSampleTrace.Direction = 0.0f;
	LightSampleTrace.Distance = 0.0f;
	if (LocalLightIndex != (4096 - 1))
	{
		const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LocalLightIndex);
		const FDeferredLightData LightData = ConvertToDeferredLight(LocalLightData);
		const FLightShaderParameters LightParameters = ConvertToLightShaderParameters(LightData);
		float3 Unused;
		float Unused2;
		bool bValid = GenerateShadowRay(
			LightParameters,
			LightData.bSpotLight,
			LightData.bRectLight,
			TranslatedWorldPosition,
			float3(0, 0, 0),
			LightSampleUV,
			Unused,
			LightSampleTrace.Direction,
			Unused2,
			LightSampleTrace.Distance);
	}
	return LightSampleTrace;
}
struct FCandidateLightSample
{
	uint LocalLightIndex;
	bool bLightWasVisible;
	float Weight;
};
FCandidateLightSample InitCandidateLightSample()
{
	FCandidateLightSample LightSample;
	LightSample.LocalLightIndex = (4096 - 1);
	LightSample.bLightWasVisible = true;
	LightSample.Weight = 0.0f;
	return LightSample;
}
uint PackCandidateLightSample(FCandidateLightSample LightSample)
{
	uint PackedSample = LightSample.LocalLightIndex & 0xFFF;
	PackedSample |= LightSample.bLightWasVisible ? 0x8000 : 0;
	PackedSample |= f32tof16(LightSample.Weight) << 16;
	return PackedSample;
}
FCandidateLightSample UnpackCandidateLightSample(uint PackedSample)
{
	FCandidateLightSample LightSample;
	LightSample.LocalLightIndex = PackedSample & 0xFFF;
	LightSample.bLightWasVisible = PackedSample & 0x8000 ? true : false;
	LightSample.Weight = f16tof32(PackedSample >> 16);
	return LightSample;
}
struct FLightTargetPDF
{
	float Weight;
};
FLightTargetPDF InitLightTargetPDF()
{
	FLightTargetPDF LightTargetPDF;
	LightTargetPDF.Weight = 0.0f;
	return LightTargetPDF;
}
FLightTargetPDF GetLocalLightTargetPDF(FDeferredLightData LightData, float3 TranslatedWorldPosition, FMegaLightsMaterial Material, uint2 ScreenCoord, inout FDebug Debug)
{
	float3 CameraVector = normalize(TranslatedWorldPosition - View_TranslatedWorldCameraOrigin);
	float4 LightAttenuation = 1.0f;
	float Dither = 0.5f;
	float SurfaceShadow = 1.0f;
	float AmbientOcclusion = 1.0f;
	LightData.ShadowedBits = 0;
	FDeferredLightingSplit SplitLighting = GetMegaLightsSplitLighting(
		TranslatedWorldPosition, CameraVector, Material, AmbientOcclusion, 
		LightData, LightAttenuation, Dither, ScreenCoord, 
		SurfaceShadow);
	float Lum = SplitLighting.LightingLuminance * View_PreExposure;
	if (LightData.IESAtlasIndex >= 0 && Lum > 0.01f)
	{
		Lum *= ComputeLightProfileMultiplier(TranslatedWorldPosition, LightData.TranslatedWorldPosition, -LightData.Direction, LightData.Tangent, LightData.IESAtlasIndex);
	}
	FLightTargetPDF LightTargetPDF = InitLightTargetPDF();
	LightTargetPDF.Weight = log2(Lum + 1.0f);
	return LightTargetPDF;
}
                         
                          
                      
                         
                   
                          
              
                         
                  
RWTexture2D<float> RWDownsampledSceneDepth;
RWTexture2D<unorm float3> RWDownsampledSceneWorldNormal;
RWTexture2D<uint> RWLightSamples;
RWTexture2D<uint> RWLightSampleUV;
StructuredBuffer<uint> DownsampledTileAllocator;
StructuredBuffer<uint> DownsampledTileData;
                               
uint2 GetSampleCoord(uint2 DownsampledScreenCoord, uint LightSampleIndex)
{
	return DownsampledScreenCoord * NumSamplesPerPixel + uint2(LightSampleIndex % 2, LightSampleIndex / 2);
}
uint GetLightVisibilityMask(uint VisibleLightMaskHash[4], uint PrevLocalLightIndex)
{
	uint Hash = PCGHash(PrevLocalLightIndex);
	uint WrappedLocalLightIndex = (Hash >> 16) % 32;
	uint VisibilityMask = (VisibleLightMaskHash[WrappedLocalLightIndex / 8] >> (4 * (WrappedLocalLightIndex % 8))) & 0xF;
	return VisibilityMask;
}
struct FLightSampler
{
	uint PackedSamples[4];
	float LightIndexRandom[4];
	float WeightSum;
};
void SampleLight(uint2 ScreenCoord, float3 TranslatedWorldPosition, const FMegaLightsMaterial Material, uint LightingChannelMask, uint VisibleLightHash[4], bool bHasValidHistory, uint LocalLightIndex, inout FLightSampler LightSampler, inout FDebug Debug)
{
	const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LocalLightIndex);
	FDeferredLightData LightData = ConvertToDeferredLight(LocalLightData);
	if ((LightingChannelMask & UnpackLightingChannelMask(LocalLightData)) == 0)
	{
		return;
	}
	if (UseLightFunctionAtlas == 0)
	{
		LightData.LightFunctionAtlasLightIndex = 0;
	}
	if (UseIESProfiles == 0)
	{
		LightData.IESAtlasIndex = -1;
	}
	if (!IsRectLightTileType(1))
	{
		LightData.bRectLight = false;
	}
	if (!IsTexturedLightTileType(1))
	{
		LightData.RectLightData.AtlasData.AtlasMaxLevel = 32;
	}
	FLightTargetPDF LightTargetPDF = GetLocalLightTargetPDF(LightData, TranslatedWorldPosition, Material, ScreenCoord, Debug);
	bool bWasVisibleInLastFrame = true;
	if (Debug.bActive)
	{
		Newline(Debug.Context);
		Print(Debug.Context, LocalLightData.LightSceneId, Select(LocalLightData.LightSceneId == DebugLightId, InitFontColor(1, 0, 0), InitFontColor(1, 1, 1)));
		Print(Debug.Context, LocalLightIndex, Select(LocalLightData.LightSceneId == DebugLightId, InitFontColor(1, 0, 0), InitFontColor(1, 1, 1)));
		Print(Debug.Context, LightTargetPDF.Weight, Select(LightTargetPDF.Weight > MinSampleWeight, InitFontColor(1, 1, 1), InitFontColor(1, 1, 1)));
		Print(Debug.Context, LightData.LightFunctionAtlasLightIndex, Select(LightData.LightFunctionAtlasLightIndex != 0, InitFontColor(1, 1, 1), InitFontColor(0.5, 0.5, 0.5)));
		Print(Debug.Context, LightData.IESAtlasIndex, Select(LightData.IESAtlasIndex != -1, InitFontColor(1, 1, 1), InitFontColor(0.5, 0.5, 0.5)));
		Print(Debug.Context, bWasVisibleInLastFrame ? 1u : 0u, Select(bWasVisibleInLastFrame, InitFontColor(1, 1, 1), InitFontColor(0.5, 0.5, 0.5)));
		if ((DebugVisualizeLight != 0 && LocalLightData.LightSceneId == DebugLightId) || DebugVisualizeLight == 2)
		{
			AddSphereTWS(Debug.Context, LightData.TranslatedWorldPosition, 10.0f, float4(0, 1, 0, 1));
			AddLineTWS(Debug.Context, TranslatedWorldPosition, LightData.TranslatedWorldPosition, float4(0, 1, 0, 1));
		}
	}
	if (LightTargetPDF.Weight > MinSampleWeight)
	{
		float Tau = LightSampler.WeightSum / (LightSampler.WeightSum + LightTargetPDF.Weight);
		LightSampler.WeightSum += LightTargetPDF.Weight;
		for (uint LightSampleIndex = 0; LightSampleIndex < 4; ++LightSampleIndex)
		{
			if (LightSampler.LightIndexRandom[LightSampleIndex] < Tau)
			{
				LightSampler.LightIndexRandom[LightSampleIndex] /= Tau;
			}
			else
			{
				LightSampler.LightIndexRandom[LightSampleIndex] = (LightSampler.LightIndexRandom[LightSampleIndex] - Tau) / (1.0f - Tau);
				FCandidateLightSample LightSample = InitCandidateLightSample();
				LightSample.LocalLightIndex = LocalLightIndex;
				LightSample.bLightWasVisible = bWasVisibleInLastFrame;
				LightSample.Weight = LightTargetPDF.Weight;
				LightSampler.PackedSamples[LightSampleIndex] = PackCandidateLightSample(LightSample);
			}
			LightSampler.LightIndexRandom[LightSampleIndex] = clamp(LightSampler.LightIndexRandom[LightSampleIndex], 0, 0.9999f);
		}
	}
}
[numthreads(8, 8, 1)]
void GenerateLightSamplesCS(
	uint3 GroupId : SV_GroupID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint LinearThreadIndex = GroupThreadId.y * 8 + GroupThreadId.x;
	uint DownsampledTileIndex = GroupId.x;
	if (DownsampledTileIndex < DownsampledTileAllocator[1])
	{
		uint LocalCandidateLightHiMask = 0;
		uint2 DownsampledTileCoord = UnpackTile(DownsampledTileData[DownsampledTileIndex + 1 * DownsampledTileDataStride]);
		uint2 DownsampledScreenCoord = DownsampledTileCoord * 8 + GroupThreadId.xy;
		const bool bForceSimpleShading = IsSimpleShadingTileType(1);
		if (all(DownsampledScreenCoord < DownsampledViewMin + DownsampledViewSize))
		{
			uint2 ScreenCoord = DownsampledScreenCoordToScreenCoord(DownsampledScreenCoord);
			FDebug Debug;
			{
				int2 DebugScreenCoord = GetDebugScreenCoord();
				Debug.bActive = all(DownsampledScreenCoord == DebugScreenCoord / 2);
				Debug.Context = InitShaderPrintContext(true, float2(0.05, 0.05));
			}
			FLightSampler LightSampler;
			LightSampler.WeightSum = 0.0f;
			for (uint LightSampleIndex = 0; LightSampleIndex < 4; ++LightSampleIndex)
			{
				LightSampler.PackedSamples[LightSampleIndex] = PackCandidateLightSample(InitCandidateLightSample());
				LightSampler.LightIndexRandom[LightSampleIndex] = 0.0f;
			}
			const float2 ScreenUV = (ScreenCoord + 0.5f) * View_BufferSizeAndInvSize.zw;
			const FMegaLightsMaterial Material = LoadMaterial(ScreenUV, ScreenCoord, bForceSimpleShading);
			const float SceneDepth = Material.Depth;
			if (SceneDepth > 0)
			{
				const float3 TranslatedWorldPosition = GetTranslatedWorldPositionFromScreenUV(ScreenUV, SceneDepth);		
				const uint EyeIndex = 0;
				const uint GridIndex = ComputeLightGridCellIndex(ScreenCoord - View_ViewRectMin.xy, SceneDepth, EyeIndex);
				const FCulledLightsGridHeader CulledLightsGridHeader = GetCulledLightsGridHeader(GridIndex, EyeIndex);
				const uint NumLightsInGridCell = min(CulledLightsGridHeader.NumMegaLights, GetMaxLightsPerCell(EyeIndex));
				const uint NumLocalLights = GetNumLocalLights(EyeIndex);
				const uint LightingChannelMask = GetSceneLightingChannel(ScreenCoord);
				{
					float RandomScalar = BlueNoiseScalar(DownsampledScreenCoord, MegaLightsStateFrameIndex);
					for (uint LightSampleIndex = 0; LightSampleIndex < 4; ++LightSampleIndex)
					{
						LightSampler.LightIndexRandom[LightSampleIndex] = (RandomScalar + LightSampleIndex) / 4;
					}
				}
				bool bHasValidHistory = true;
				uint2 PrevScreenCoord = ScreenCoord;
				if (Debug.bActive)
				{
					Print(Debug.Context, InitShaderPrintText(7), InitFontColor(46.f / 255.f, 204.f / 255.f, 113.f / 255.f));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(8), InitFontColor(189.f / 255.f, 195.f / 255.f, 199.f / 255.f));
					for (uint TileTypeIndex = 0; TileTypeIndex < 7; ++TileTypeIndex)
					{
						Newline(Debug.Context);
						PrintTileTypeString(Debug.Context, TileTypeIndex, InitFontColor(1, 1, 1));
						Print(Debug.Context, InitShaderPrintText(9));
						Print(Debug.Context, DownsampledTileAllocator[TileTypeIndex], InitFontColor(1, 1, 1));
					}
					Newline(Debug.Context);
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(10), InitFontColor(46.f / 255.f, 204.f / 255.f, 113.f / 255.f));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(11));
					Print(Debug.Context, ScreenCoord.x, InitFontColor(1, 1, 1));
					Print(Debug.Context, ScreenCoord.y, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(12));
					Print(Debug.Context, Material.Roughness, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(13));
					PrintTileTypeString(Debug.Context, 1, Select(IsSimpleShadingTileType(1), InitFontColor(0, 1, 0), InitFontColor(1, 0, 0)));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(14));
					Print(Debug.Context, View_PreExposure, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(15));
					Print(Debug.Context, NumLightsInGridCell, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(16));
					Print(Debug.Context, NumLocalLights, Select(NumLocalLights < (4096 - 1) + 1, InitFontColor(0.50f, 0.75f, 0.50f), InitFontColor(1, 0, 0)));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(17));
					Print(Debug.Context, bHasValidHistory, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(18), InitFontColor(189.f / 255.f, 195.f / 255.f, 199.f / 255.f));
					AddCrossTWS(Debug.Context, TranslatedWorldPosition, 5.0f, float4(1, 1, 0, 1));
				}
				uint VisibleLightHash[4];
				uint VisibleLightMaskHash[4];
				for (uint IndexInHash = 0; IndexInHash < 4; ++IndexInHash)
				{
					VisibleLightHash[IndexInHash] = 0xFFFFFFFF;
					VisibleLightMaskHash[IndexInHash] = 0xFFFFFFFF;
				}
				const uint ScalarGridIndex = WaveReadLaneFirst(GridIndex);
				const bool bScalarGridCell = WaveActiveAllTrue(ScalarGridIndex == GridIndex);
				if (bScalarGridCell)
				{
					FCulledLightsGridHeader CulledLightsGridHeader = GetCulledLightsGridHeader(ScalarGridIndex, EyeIndex);
					uint NumLightsInGridCell = min(CulledLightsGridHeader.NumMegaLights, GetMaxLightsPerCell(EyeIndex));
					uint GridLightIndex = 0;
					while(GridLightIndex < NumLightsInGridCell)
					{
						uint LocalLightIndex = GetCulledLightDataGrid(CulledLightsGridHeader.MegaLightsDataStartIndex + GridLightIndex);
						if (LocalLightIndex >= (4096 - 1))
						{
							break;
						}
						++GridLightIndex;
						SampleLight(ScreenCoord, TranslatedWorldPosition, Material, LightingChannelMask, VisibleLightHash, bHasValidHistory, LocalLightIndex, LightSampler, Debug);
					}
				}
				else
				{
					uint GridLightIndex = 0;
					while(GridLightIndex < NumLightsInGridCell)
					{
						const uint VectorLocalLightIndex = GetCulledLightDataGrid(CulledLightsGridHeader.MegaLightsDataStartIndex + GridLightIndex);
						if (VectorLocalLightIndex >= (4096 - 1))
						{
							break;
						}
						uint LocalLightIndex = WaveActiveMin(VectorLocalLightIndex);
						if (LocalLightIndex == VectorLocalLightIndex)
						{
							++GridLightIndex;
							SampleLight(ScreenCoord, TranslatedWorldPosition, Material, LightingChannelMask, VisibleLightHash, bHasValidHistory, LocalLightIndex, LightSampler, Debug);
						}
					}
				}
				if (Debug.bActive)
				{
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(19));
					Print(Debug.Context, LightSampler.WeightSum, InitFontColor(1, 1, 1));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(20));
					Newline(Debug.Context);
					Print(Debug.Context, InitShaderPrintText(21), InitFontColor(189.f / 255.f, 195.f / 255.f, 199.f / 255.f));
				}
				for (uint LightSampleIndex = 0; LightSampleIndex < 4; ++LightSampleIndex)
				{
					FLightSample LightSample = InitLightSample();
					FCandidateLightSample CandidateLightSample = UnpackCandidateLightSample(LightSampler.PackedSamples[LightSampleIndex]);
					LightSample.LocalLightIndex = CandidateLightSample.LocalLightIndex;
					LightSample.Weight = CandidateLightSample.Weight;
					const FLocalLightData LocalLightData = GetLocalLightDataNonStereo(LightSample.LocalLightIndex);
					FDeferredLightData LightData = ConvertToDeferredLight(LocalLightData);
					uint2 SampleCoord = GetSampleCoord(DownsampledScreenCoord, LightSampleIndex);
					float2 LightSampleUV = BlueNoiseVec2(SampleCoord, MegaLightsStateFrameIndex);
					LightSample.bSupportScreenTrace = !Material.bIsHair;
					RWLightSampleUV[SampleCoord] = PackLightSampleUV(LightSampleUV);
					if (Debug.bActive)
					{						
						Newline(Debug.Context);
						Print(Debug.Context, LocalLightData.LightSceneId, Select(LocalLightData.LightSceneId == DebugLightId, InitFontColor(1, 0, 0), InitFontColor(1, 1, 1)));
						Print(Debug.Context, LightSample.Weight, InitFontColor(1, 1, 1));
						const uint VisibleInLastFrameMask = GetLightVisibilityMask(VisibleLightMaskHash, LocalLightData.PrevLocalLightIndex);
						uint VisibleInLastFrameMaskDebug = 0;
						VisibleInLastFrameMaskDebug += VisibleInLastFrameMask & 0x1 ? 1 : 0;
						VisibleInLastFrameMaskDebug += VisibleInLastFrameMask & 0x2 ? 10 : 0;
						VisibleInLastFrameMaskDebug += VisibleInLastFrameMask & 0x4 ? 100 : 0;
						VisibleInLastFrameMaskDebug += VisibleInLastFrameMask & 0x8 ? 1000 : 0;
						Print(Debug.Context, VisibleInLastFrameMaskDebug, InitFontColor(1, 1, 1));
						Print(Debug.Context, LightSample.bGuidedAsVisible ? 1u : 0u, InitFontColor(1, 1, 1));
						Print(Debug.Context, LightSample.bGuidedAsPartiallyVisibleLight ? 1u : 0u, InitFontColor(1, 1, 1));
						Print(Debug.Context, LightSampleUV, InitFontColor(1, 1, 1));
						if (DebugMode == 2)
						{
							const uint2 SampleCoord = GetSampleCoord(DownsampledScreenCoord, LightSampleIndex);
							const FLightSampleTrace LightSampleTrace = GetLightSampleTrace(TranslatedWorldPosition, LightSample.LocalLightIndex, LightSampleUV);
							float4 RayColor = float4(LightData.Color.xyz / Luminance(LightData.Color.xyz), 1.0f);
							AddLineTWS(Debug.Context, TranslatedWorldPosition, TranslatedWorldPosition + LightSampleTrace.Direction * LightSampleTrace.Distance, RayColor);
						}
					}
					if (LightSample.LocalLightIndex != (4096 - 1))
					{
						const bool bCastShadows = UnpackCastShadow(asuint(LocalLightData.LightDirectionAndShadowMask.w));
						LightSample.bVisible = true;
						LightSample.bCompleted = bCastShadows ? false : true;
						LightSample.Weight = LightSampler.WeightSum / (4 * LightSample.Weight);
					}
					RWLightSamples[GetSampleCoord(DownsampledScreenCoord, LightSampleIndex)] = PackLightSample(LightSample);
				}
			}
			else
			{
				for (uint LightSampleIndex = 0; LightSampleIndex < 4; ++LightSampleIndex)
				{
					RWLightSamples[GetSampleCoord(DownsampledScreenCoord, LightSampleIndex)] = PackLightSample(InitLightSample());
				}
			}
			RWDownsampledSceneDepth[DownsampledScreenCoord] = SceneDepth;
			RWDownsampledSceneWorldNormal[DownsampledScreenCoord] = EncodeNormal(Material.WorldNormalForPositionBias);
		}
	}
}
static const uint TEXT_CHARS[519] = {
	83,105,109,112,108,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 
	67,111,109,112,108,101,120,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 
	83,105,109,112,108,101,32,82,101,99,116,32,32,32,32,32,32,32,32,32,32, 
	67,111,109,112,108,101,120,32,82,101,99,116,32,32,32,32,32,32,32,32,32, 
	83,105,109,112,108,101,32,84,101,120,116,117,114,101,100,32,82,101,99,116,32, 
	67,111,109,112,108,101,120,32,84,101,120,116,117,114,101,100,32,82,101,99,116, 
	69,109,112,116,121,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32, 
	77,101,103,97,76,105,103,104,116,115, 
	84,105,108,101,84,121,112,101,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,78,117,109,32,32,32,32,32,32, 
	58,32, 
	71,101,110,101,114,97,116,101,83,97,109,112,108,101,115, 
	83,99,114,101,101,110,67,111,111,114,100,32,32,32,32,32,32,32,32,58,32, 
	82,111,117,103,104,110,101,115,115,32,32,32,32,32,32,32,32,32,32,58,32, 
	84,105,108,101,84,121,112,101,32,32,32,32,32,32,32,32,32,32,32,58,32, 
	86,105,101,119,46,80,114,101,69,120,112,111,115,117,114,101,32,32,32,58,32, 
	78,117,109,76,105,103,104,116,115,73,110,71,114,105,100,67,101,108,108,58,32, 
	78,117,109,76,111,99,97,108,76,105,103,104,116,115,32,32,32,32,32,58,32, 
	86,97,108,105,100,71,117,105,100,101,72,105,115,116,111,114,121,32,32,58,32, 
	76,105,103,104,116,73,100,32,124,32,76,111,99,97,108,76,105,103,104,116,73,100,32,124,32,87,101,105,103,104,116,32,32,124,32,76,70,65,116,108,97,115,32,32,32,124,32,73,69,83,65,116,108,97,115,32,32,124,32,72,105,115,116,111,114,121, 
	87,101,105,103,104,116,32,115,117,109,32,32,32,32,32,32,32,32,32,58,32, 
	83,101,108,101,99,116,101,100,32,32,32,32,32,32,32,32,32,32,32,58, 
	76,105,103,104,116,73,100,32,124,32,87,101,105,103,104,116,32,32,32,32,124,32,72,105,115,116,111,114,121,32,124,32,65,115,86,105,115,32,124,32,65,115,80,97,114,116,105,97,108,108,121,86,105,115,32,124,32,85,86 
};
static const uint TEXT_OFFSETS[23] = {
	0, 
	21, 
	42, 
	63, 
	84, 
	105, 
	126, 
	147, 
	157, 
	189, 
	191, 
	206, 
	227, 
	248, 
	269, 
	290, 
	311, 
	332, 
	353, 
	419, 
	440, 
	460, 
	519 
};
uint ShaderPrintGetChar(uint InIndex)              { return TEXT_CHARS[InIndex]; }
uint ShaderPrintGetOffset(FShaderPrintText InText) { return TEXT_OFFSETS[InText.Index]; }
