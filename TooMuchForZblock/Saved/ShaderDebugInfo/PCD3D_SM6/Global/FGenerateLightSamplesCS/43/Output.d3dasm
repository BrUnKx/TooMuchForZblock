;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: d2c24ee5d6b2b167c5cc0bea24743a66
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint bSceneLightingChannelsValid;             ; Offset:  224
;       uint2 DownsampledViewMin;                     ; Offset:  288
;       uint2 DownsampledViewSize;                    ; Offset:  296
;       uint2 NumSamplesPerPixel;                     ; Offset:  304
;       uint MegaLightsStateFrameIndex;               ; Offset:  332
;       float MinSampleWeight;                        ; Offset:  336
;       uint DownsampledTileDataStride;               ; Offset:  344
;       uint bOverrideCursorPosition;                 ; Offset:  356
;       int DebugMode;                                ; Offset:  360
;       uint DebugLightId;                            ; Offset:  364
;       uint DebugVisualizeLight;                     ; Offset:  368
;       int UseIESProfiles;                           ; Offset:  372
;       int UseLightFunctionAtlas;                    ; Offset:  376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   380
;
; }
;
; cbuffer View
; {
;
;   struct hostlayout.View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       row_major float4x4 View_MobileMultiviewDecalTransform;; Offset:  960
;       row_major float4x4 View_FirstPersonTransform; ; Offset: 1024
;       row_major float4x4 View_PrevFirstPersonTransform;; Offset: 1088
;       float3 View_ViewOriginHigh;                   ; Offset: 1152
;       float View_Padding1164;                       ; Offset: 1164
;       float3 View_ViewForward;                      ; Offset: 1168
;       float View_Padding1180;                       ; Offset: 1180
;       float3 View_ViewUp;                           ; Offset: 1184
;       float View_Padding1196;                       ; Offset: 1196
;       float3 View_ViewRight;                        ; Offset: 1200
;       float View_Padding1212;                       ; Offset: 1212
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1216
;       float View_Padding1228;                       ; Offset: 1228
;       float3 View_HMDViewNoRollRight;               ; Offset: 1232
;       float View_Padding1244;                       ; Offset: 1244
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1248
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1264
;       float3 View_ViewOriginLow;                    ; Offset: 1280
;       float View_Padding1292;                       ; Offset: 1292
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1296
;       float View_Padding1308;                       ; Offset: 1308
;       float3 View_WorldViewOriginHigh;              ; Offset: 1312
;       float View_Padding1324;                       ; Offset: 1324
;       float3 View_WorldViewOriginLow;               ; Offset: 1328
;       float View_Padding1340;                       ; Offset: 1340
;       float3 View_PreViewTranslationHigh;           ; Offset: 1344
;       float View_Padding1356;                       ; Offset: 1356
;       float3 View_PreViewTranslationLow;            ; Offset: 1360
;       float View_Padding1372;                       ; Offset: 1372
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1376
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1440
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1504
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1568
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1632
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1696
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1760
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1824
;       float View_Padding1836;                       ; Offset: 1836
;       float3 View_PrevWorldCameraOriginHigh;        ; Offset: 1840
;       float View_Padding1852;                       ; Offset: 1852
;       float3 View_PrevWorldCameraOriginLow;         ; Offset: 1856
;       float View_Padding1868;                       ; Offset: 1868
;       float3 View_PrevWorldViewOriginHigh;          ; Offset: 1872
;       float View_Padding1884;                       ; Offset: 1884
;       float3 View_PrevWorldViewOriginLow;           ; Offset: 1888
;       float View_Padding1900;                       ; Offset: 1900
;       float3 View_PrevPreViewTranslationHigh;       ; Offset: 1904
;       float View_Padding1916;                       ; Offset: 1916
;       float3 View_PrevPreViewTranslationLow;        ; Offset: 1920
;       float View_Padding1932;                       ; Offset: 1932
;       float3 View_ViewTilePosition;                 ; Offset: 1936
;       float View_Padding1948;                       ; Offset: 1948
;       float3 View_RelativeWorldCameraOriginTO;      ; Offset: 1952
;       float View_Padding1964;                       ; Offset: 1964
;       float3 View_RelativeWorldViewOriginTO;        ; Offset: 1968
;       float View_Padding1980;                       ; Offset: 1980
;       float3 View_RelativePreViewTranslationTO;     ; Offset: 1984
;       float View_Padding1996;                       ; Offset: 1996
;       float3 View_PrevRelativeWorldCameraOriginTO;  ; Offset: 2000
;       float View_Padding2012;                       ; Offset: 2012
;       float3 View_PrevRelativeWorldViewOriginTO;    ; Offset: 2016
;       float View_Padding2028;                       ; Offset: 2028
;       float3 View_RelativePrevPreViewTranslationTO; ; Offset: 2032
;       float View_Padding2044;                       ; Offset: 2044
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 2048
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 2112
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 2176
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 2240
;       float4 View_TemporalAAJitter;                 ; Offset: 2304
;       float4 View_GlobalClippingPlane;              ; Offset: 2320
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2336
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2344
;       float4 View_ViewRectMin;                      ; Offset: 2352
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2368
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2384
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2400
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2416
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2432
;       float4 View_ScreenToViewSpace;                ; Offset: 2448
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2464
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2472
;       int View_NumSceneColorMSAASamples;            ; Offset: 2480
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2484
;       float View_PreExposure;                       ; Offset: 2488
;       float View_OneOverPreExposure;                ; Offset: 2492
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2496
;       float4 View_SpecularOverrideParameter;        ; Offset: 2512
;       float4 View_NormalOverrideParameter;          ; Offset: 2528
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2544
;       float View_PrevFrameGameTime;                 ; Offset: 2552
;       float View_PrevFrameRealTime;                 ; Offset: 2556
;       float View_OutOfBoundsMask;                   ; Offset: 2560
;       float View_Padding2564;                       ; Offset: 2564
;       float View_Padding2568;                       ; Offset: 2568
;       float View_Padding2572;                       ; Offset: 2572
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2576
;       float View_CullingSign;                       ; Offset: 2588
;       float View_NearPlane;                         ; Offset: 2592
;       float View_OrthoFarPlane;                     ; Offset: 2596
;       float View_GameTime;                          ; Offset: 2600
;       float View_RealTime;                          ; Offset: 2604
;       float View_DeltaTime;                         ; Offset: 2608
;       float View_MaterialTextureMipBias;            ; Offset: 2612
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2616
;       uint View_Random;                             ; Offset: 2620
;       uint View_FrameNumber;                        ; Offset: 2624
;       uint View_FrameCounter;                       ; Offset: 2628
;       uint View_StateFrameIndexMod8;                ; Offset: 2632
;       uint View_StateFrameIndex;                    ; Offset: 2636
;       uint View_StateOutputFrameIndex;              ; Offset: 2640
;       uint View_DebugViewModeMask;                  ; Offset: 2644
;       uint View_WorldIsPaused;                      ; Offset: 2648
;       float View_CameraCut;                         ; Offset: 2652
;       float View_UnlitViewmodeMask;                 ; Offset: 2656
;       float View_Padding2660;                       ; Offset: 2660
;       float View_Padding2664;                       ; Offset: 2664
;       float View_Padding2668;                       ; Offset: 2668
;       float4 View_DirectionalLightColor;            ; Offset: 2672
;       float3 View_DirectionalLightDirection;        ; Offset: 2688
;       float View_Padding2700;                       ; Offset: 2700
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2704
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2736
;       float4 View_TemporalAAParams;                 ; Offset: 2768
;       float4 View_CircleDOFParams;                  ; Offset: 2784
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2800
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2804
;       float View_DepthOfFieldScale;                 ; Offset: 2808
;       float View_DepthOfFieldFocalLength;           ; Offset: 2812
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2816
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2820
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2824
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2828
;       float View_GeneralPurposeTweak;               ; Offset: 2832
;       float View_GeneralPurposeTweak2;              ; Offset: 2836
;       float View_DemosaicVposOffset;                ; Offset: 2840
;       float View_DecalDepthBias;                    ; Offset: 2844
;       float3 View_IndirectLightingColorScale;       ; Offset: 2848
;       float View_Padding2860;                       ; Offset: 2860
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2864
;       float View_Padding2876;                       ; Offset: 2876
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2880
;       float View_Padding2892;                       ; Offset: 2892
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2896
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2928
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2960
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2992
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 3024
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 3056
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 3072
;       float View_Padding3084;                       ; Offset: 3084
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 3088
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 3104
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 3168
;       float View_SkyAtmospherePresentInScene;       ; Offset: 3184
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 3188
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 3192
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 3196
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 3200
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 3216
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 3220
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 3224
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 3228
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 3232
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 3236
;       float View_Padding3240;                       ; Offset: 3240
;       float View_Padding3244;                       ; Offset: 3244
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 3248
;       float View_RenderingReflectionCaptureMask;    ; Offset: 3260
;       float View_RealTimeReflectionCapture;         ; Offset: 3264
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 3268
;       float View_Padding3272;                       ; Offset: 3272
;       float View_Padding3276;                       ; Offset: 3276
;       float4 View_AmbientCubemapTint;               ; Offset: 3280
;       float View_AmbientCubemapIntensity;           ; Offset: 3296
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 3300
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 3304
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 3308
;       float4 View_SkyLightColor;                    ; Offset: 3312
;       float View_SkyLightVolumetricScatteringIntensity;; Offset: 3328
;       float View_Padding3332;                       ; Offset: 3332
;       float View_Padding3336;                       ; Offset: 3336
;       float View_Padding3340;                       ; Offset: 3340
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3344
;       float View_MobilePreviewMode;                 ; Offset: 3472
;       float View_HMDEyePaddingOffset;               ; Offset: 3476
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3480
;       float View_ShowDecalsMask;                    ; Offset: 3484
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3488
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3492
;       float View_Padding3496;                       ; Offset: 3496
;       float View_Padding3500;                       ; Offset: 3500
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3504
;       int View_StereoPassIndex;                     ; Offset: 3516
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3520
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3616
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3712
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3808
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3904
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3908
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3912
;       int View_Padding3916;                         ; Offset: 3916
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3920
;       float View_Padding3932;                       ; Offset: 3932
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3936
;       float View_GlobalVolumeDimension;             ; Offset: 3948
;       float View_GlobalVolumeTexelSize;             ; Offset: 3952
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3956
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3960
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3964
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3968
;       float View_NotCoveredMinStepScale;            ; Offset: 3972
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3976
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3980
;       float View_ViewportScaleUI;                   ; Offset: 3984
;       float View_Padding3988;                       ; Offset: 3988
;       int2 View_CursorPosition;                     ; Offset: 3992
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 4000
;       float View_Padding4004;                       ; Offset: 4004
;       float View_Padding4008;                       ; Offset: 4008
;       float View_Padding4012;                       ; Offset: 4012
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 4016
;       float View_Padding4028;                       ; Offset: 4028
;       float3 View_VolumetricFogGridZParams;         ; Offset: 4032
;       float View_Padding4044;                       ; Offset: 4044
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 4048
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 4056
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 4064
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 4072
;       float2 View_VolumetricFogPrevUVMaxForTemporalBlend;; Offset: 4080
;       float View_Padding4088;                       ; Offset: 4088
;       float View_Padding4092;                       ; Offset: 4092
;       float3 View_VolumetricFogPrevResourceGridSize;; Offset: 4096
;       float View_Padding4108;                       ; Offset: 4108
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 4112
;       float2 View_VolumetricFogUVMax;               ; Offset: 4120
;       float View_VolumetricFogMaxDistance;          ; Offset: 4128
;       float View_Padding4132;                       ; Offset: 4132
;       float View_Padding4136;                       ; Offset: 4136
;       float View_Padding4140;                       ; Offset: 4140
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 4144
;       float View_Padding4156;                       ; Offset: 4156
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 4160
;       float View_Padding4172;                       ; Offset: 4172
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 4176
;       float View_VolumetricLightmapBrickSize;       ; Offset: 4188
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 4192
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 4204
;       float View_EyeToPixelSpreadAngle;             ; Offset: 4208
;       float View_Padding4212;                       ; Offset: 4212
;       float View_Padding4216;                       ; Offset: 4216
;       float View_Padding4220;                       ; Offset: 4220
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 4224
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 4256
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 4260
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 4264
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 4268
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 4272
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 4276
;       uint View_Padding4280;                        ; Offset: 4280
;       uint View_Padding4284;                        ; Offset: 4284
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 4288
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 4304
;       float View_Padding4312;                       ; Offset: 4312
;       float View_Padding4316;                       ; Offset: 4316
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 4320
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 4336
;       float View_MinRoughness;                      ; Offset: 4340
;       float View_Padding4344;                       ; Offset: 4344
;       float View_Padding4348;                       ; Offset: 4348
;       float4 View_HairRenderInfo;                   ; Offset: 4352
;       uint View_EnableSkyLight;                     ; Offset: 4368
;       uint View_HairRenderInfoBits;                 ; Offset: 4372
;       uint View_HairComponents;                     ; Offset: 4376
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 4380
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 4384
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 4400
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 4416
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4432
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4444
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4448
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4452
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4456
;       int View_PhysicsFieldTargetCount;             ; Offset: 4460
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4464
;       uint View_GPUSceneViewId;                     ; Offset: 4976
;       float View_ViewResolutionFraction;            ; Offset: 4980
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4984
;       float View_Padding4988;                       ; Offset: 4988
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4992
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 5008
;       float2 View_WorldDepthToPixelWorldRadius;     ; Offset: 5024
;       float View_Padding5032;                       ; Offset: 5032
;       float View_Padding5036;                       ; Offset: 5036
;       float4 View_ScreenRayLengthMultiplier;        ; Offset: 5040
;       float4 View_GlintLUTParameters0;              ; Offset: 5056
;       float4 View_GlintLUTParameters1;              ; Offset: 5072
;       float View_MaterialMaxEmissiveValue;          ; Offset: 5088
;       int View_PostVolumeUserFlags;                 ; Offset: 5092
;       int View_Padding5096;                         ; Offset: 5096
;       int View_Padding5100;                         ; Offset: 5100
;       int4 View_EnvironmentComponentsFlags;         ; Offset: 5104
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 5120
;       uint View_Padding5124;                        ; Offset: 5124
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 5128
;       uint View_Padding5132;                        ; Offset: 5132
;       uint BindlessSRV_View_VolumetricLightmapIndirectionTexture;; Offset: 5136
;       uint View_Padding5140;                        ; Offset: 5140
;       uint BindlessSRV_View_VolumetricLightmapBrickAmbientVector;; Offset: 5144
;       uint View_Padding5148;                        ; Offset: 5148
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 5152
;       uint View_Padding5156;                        ; Offset: 5156
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 5160
;       uint View_Padding5164;                        ; Offset: 5164
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 5168
;       uint View_Padding5172;                        ; Offset: 5172
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 5176
;       uint View_Padding5180;                        ; Offset: 5180
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 5184
;       uint View_Padding5188;                        ; Offset: 5188
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 5192
;       uint View_Padding5196;                        ; Offset: 5196
;       uint BindlessSRV_View_SkyBentNormalBrickTexture;; Offset: 5200
;       uint View_Padding5204;                        ; Offset: 5204
;       uint BindlessSRV_View_DirectionalLightShadowingBrickTexture;; Offset: 5208
;       uint View_Padding5212;                        ; Offset: 5212
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 5216
;       uint View_Padding5220;                        ; Offset: 5220
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 5224
;       uint View_Padding5228;                        ; Offset: 5228
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 5232
;       uint View_Padding5236;                        ; Offset: 5236
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 5240
;       uint View_Padding5244;                        ; Offset: 5244
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 5248
;       uint View_Padding5252;                        ; Offset: 5252
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 5256
;       uint View_Padding5260;                        ; Offset: 5260
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 5264
;       uint View_Padding5268;                        ; Offset: 5268
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 5272
;       uint View_Padding5276;                        ; Offset: 5276
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 5280
;       uint View_Padding5284;                        ; Offset: 5284
;       uint BindlessSRV_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 5288
;       uint View_Padding5292;                        ; Offset: 5292
;       uint BindlessSRV_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 5296
;       uint View_Padding5300;                        ; Offset: 5300
;       uint BindlessSRV_View_GlobalDistanceFieldPageTableTexture;; Offset: 5304
;       uint View_Padding5308;                        ; Offset: 5308
;       uint BindlessSRV_View_GlobalDistanceFieldMipTexture;; Offset: 5312
;       uint View_Padding5316;                        ; Offset: 5316
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 5320
;       uint View_Padding5324;                        ; Offset: 5324
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 5328
;       uint View_Padding5332;                        ; Offset: 5332
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 5336
;       uint View_Padding5340;                        ; Offset: 5340
;       uint BindlessSRV_View_AtmosphereTransmittanceTexture;; Offset: 5344
;       uint View_Padding5348;                        ; Offset: 5348
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 5352
;       uint View_Padding5356;                        ; Offset: 5356
;       uint BindlessSRV_View_AtmosphereIrradianceTexture;; Offset: 5360
;       uint View_Padding5364;                        ; Offset: 5364
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 5368
;       uint View_Padding5372;                        ; Offset: 5372
;       uint BindlessSRV_View_AtmosphereInscatterTexture;; Offset: 5376
;       uint View_Padding5380;                        ; Offset: 5380
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 5384
;       uint View_Padding5388;                        ; Offset: 5388
;       uint BindlessSRV_View_PerlinNoiseGradientTexture;; Offset: 5392
;       uint View_Padding5396;                        ; Offset: 5396
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 5400
;       uint View_Padding5404;                        ; Offset: 5404
;       uint BindlessSRV_View_PerlinNoise3DTexture;   ; Offset: 5408
;       uint View_Padding5412;                        ; Offset: 5412
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 5416
;       uint View_Padding5420;                        ; Offset: 5420
;       uint BindlessSRV_View_SobolSamplingTexture;   ; Offset: 5424
;       uint View_Padding5428;                        ; Offset: 5428
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 5432
;       uint View_Padding5436;                        ; Offset: 5436
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 5440
;       uint View_Padding5444;                        ; Offset: 5444
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 5448
;       uint View_Padding5452;                        ; Offset: 5452
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 5456
;       uint View_Padding5460;                        ; Offset: 5460
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 5464
;       uint View_Padding5468;                        ; Offset: 5468
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 5472
;       uint View_Padding5476;                        ; Offset: 5476
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 5480
;       uint View_Padding5484;                        ; Offset: 5484
;       uint BindlessSRV_View_PreIntegratedBRDF;      ; Offset: 5488
;       uint View_Padding5492;                        ; Offset: 5492
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 5496
;       uint View_Padding5500;                        ; Offset: 5500
;       uint BindlessSRV_View_SkyIrradianceEnvironmentMap;; Offset: 5504
;       uint View_Padding5508;                        ; Offset: 5508
;       uint BindlessSRV_View_TransmittanceLutTexture;; Offset: 5512
;       uint View_Padding5516;                        ; Offset: 5516
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5520
;       uint View_Padding5524;                        ; Offset: 5524
;       uint BindlessSRV_View_SkyViewLutTexture;      ; Offset: 5528
;       uint View_Padding5532;                        ; Offset: 5532
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5536
;       uint View_Padding5540;                        ; Offset: 5540
;       uint BindlessSRV_View_CameraAerialPerspectiveVolume;; Offset: 5544
;       uint View_Padding5548;                        ; Offset: 5548
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5552
;       uint View_Padding5556;                        ; Offset: 5556
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5560
;       uint View_Padding5564;                        ; Offset: 5564
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5568
;       uint View_Padding5572;                        ; Offset: 5572
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5576
;       uint View_Padding5580;                        ; Offset: 5580
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5584
;       uint View_Padding5588;                        ; Offset: 5588
;       uint BindlessSRV_View_DistantSkyLightLutBufferSRV;; Offset: 5592
;       uint View_Padding5596;                        ; Offset: 5596
;       uint BindlessSRV_View_MobileDistantSkyLightLutBufferSRV;; Offset: 5600
;       uint View_Padding5604;                        ; Offset: 5604
;       uint BindlessSRV_View_HairScatteringLUTTexture;; Offset: 5608
;       uint View_Padding5612;                        ; Offset: 5612
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5616
;       uint View_Padding5620;                        ; Offset: 5620
;       uint BindlessSRV_View_GGXLTCMatTexture;       ; Offset: 5624
;       uint View_Padding5628;                        ; Offset: 5628
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5632
;       uint View_Padding5636;                        ; Offset: 5636
;       uint BindlessSRV_View_GGXLTCAmpTexture;       ; Offset: 5640
;       uint View_Padding5644;                        ; Offset: 5644
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5648
;       uint View_Padding5652;                        ; Offset: 5652
;       uint BindlessSRV_View_SheenLTCTexture;        ; Offset: 5656
;       uint View_Padding5660;                        ; Offset: 5660
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5664
;       uint View_Padding5668;                        ; Offset: 5668
;       uint View_bShadingEnergyConservation;         ; Offset: 5672
;       uint View_bShadingEnergyPreservation;         ; Offset: 5676
;       uint BindlessSRV_View_ShadingEnergyGGXSpecTexture;; Offset: 5680
;       uint View_Padding5684;                        ; Offset: 5684
;       uint BindlessSRV_View_ShadingEnergyGGXGlassTexture;; Offset: 5688
;       uint View_Padding5692;                        ; Offset: 5692
;       uint BindlessSRV_View_ShadingEnergyClothSpecTexture;; Offset: 5696
;       uint View_Padding5700;                        ; Offset: 5700
;       uint BindlessSRV_View_ShadingEnergyDiffuseTexture;; Offset: 5704
;       uint View_Padding5708;                        ; Offset: 5708
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5712
;       uint View_Padding5716;                        ; Offset: 5716
;       uint BindlessSRV_View_GlintTexture;           ; Offset: 5720
;       uint View_Padding5724;                        ; Offset: 5724
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5728
;       uint View_Padding5732;                        ; Offset: 5732
;       uint BindlessSRV_View_SimpleVolumeTexture;    ; Offset: 5736
;       uint View_Padding5740;                        ; Offset: 5740
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5744
;       uint View_Padding5748;                        ; Offset: 5748
;       uint BindlessSRV_View_SimpleVolumeEnvTexture; ; Offset: 5752
;       uint View_Padding5756;                        ; Offset: 5756
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5760
;       uint View_Padding5764;                        ; Offset: 5764
;       uint BindlessSRV_View_SSProfilesTexture;      ; Offset: 5768
;       uint View_Padding5772;                        ; Offset: 5772
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5776
;       uint View_Padding5780;                        ; Offset: 5780
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5784
;       uint View_Padding5788;                        ; Offset: 5788
;       uint BindlessSRV_View_SSProfilesPreIntegratedTexture;; Offset: 5792
;       uint View_Padding5796;                        ; Offset: 5796
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5800
;       uint View_Padding5804;                        ; Offset: 5804
;       uint BindlessSRV_View_SpecularProfileTexture; ; Offset: 5808
;       uint View_Padding5812;                        ; Offset: 5812
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5816
;       uint View_Padding5820;                        ; Offset: 5820
;       uint BindlessSRV_View_WaterIndirection;       ; Offset: 5824
;       uint View_Padding5828;                        ; Offset: 5828
;       uint BindlessSRV_View_WaterData;              ; Offset: 5832
;       uint View_Padding5836;                        ; Offset: 5836
;       int View_WaterInfoTextureViewIndex;           ; Offset: 5840
;       int View_Padding5844;                         ; Offset: 5844
;       int View_Padding5848;                         ; Offset: 5848
;       int View_Padding5852;                         ; Offset: 5852
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5856
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5872
;       float View_Padding5876;                       ; Offset: 5876
;       uint BindlessSRV_View_RectLightAtlasTexture;  ; Offset: 5880
;       uint View_Padding5884;                        ; Offset: 5884
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5888
;       uint View_Padding5892;                        ; Offset: 5892
;       uint View_Padding5896;                        ; Offset: 5896
;       uint View_Padding5900;                        ; Offset: 5900
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5904
;       uint BindlessSRV_View_IESAtlasTexture;        ; Offset: 5920
;       uint View_Padding5924;                        ; Offset: 5924
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5928
;       uint View_Padding5932;                        ; Offset: 5932
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5936
;       uint View_Padding5940;                        ; Offset: 5940
;       uint BindlessSRV_View_LandscapeIndirection;   ; Offset: 5944
;       uint View_Padding5948;                        ; Offset: 5948
;       uint BindlessSRV_View_LandscapePerComponentData;; Offset: 5952
;       uint View_Padding5956;                        ; Offset: 5956
;       uint BindlessUAV_View_VTFeedbackBuffer;       ; Offset: 5960
;       uint View_Padding5964;                        ; Offset: 5964
;       uint BindlessSRV_View_PhysicsFieldClipmapBuffer;; Offset: 5968
;       uint View_Padding5972;                        ; Offset: 5972
;       uint View_Padding5976;                        ; Offset: 5976
;       uint View_Padding5980;                        ; Offset: 5980
;       float3 View_TLASPreViewTranslationHigh;       ; Offset: 5984
;       float View_Padding5996;                       ; Offset: 5996
;       float3 View_TLASPreViewTranslationLow;        ; Offset: 6000
;   
;   } View;                                           ; Offset:    0 Size:  6012
;
; }
;
; cbuffer BlueNoise
; {
;
;   struct BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int BlueNoise_Padding12;                      ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int BlueNoise_Padding28;                      ; Offset:   28
;       uint BindlessSRV_BlueNoise_ScalarTexture;     ; Offset:   32
;       uint BlueNoise_Padding36;                     ; Offset:   36
;       uint BindlessSRV_BlueNoise_Vec2Texture;       ; Offset:   40
;   
;   } BlueNoise;                                      ; Offset:    0 Size:    44
;
; }
;
; cbuffer ForwardLightData
; {
;
;   struct hostlayout.ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint ForwardLightData_Padding36;              ; Offset:   36
;       uint ForwardLightData_Padding40;              ; Offset:   40
;       uint ForwardLightData_Padding44;              ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float ForwardLightData_Padding60;             ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float ForwardLightData_DirectionalLightSoftSourceRadius;; Offset:   80
;       float ForwardLightData_Padding84;             ; Offset:   84
;       float ForwardLightData_Padding88;             ; Offset:   88
;       float ForwardLightData_Padding92;             ; Offset:   92
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   96
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:  108
;       float ForwardLightData_DirectionalLightSpecularScale;; Offset:  112
;       float ForwardLightData_DirectionalLightDiffuseScale;; Offset:  116
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:  120
;       uint ForwardLightData_Padding124;             ; Offset:  124
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  128
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  136
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  140
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  144
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  160
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  416
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  480
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  496
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  500
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  504
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  508
;       uint ForwardLightData_MegaLightsSupportedStartIndex;; Offset:  512
;       uint ForwardLightData_Padding516;             ; Offset:  516
;       uint ForwardLightData_Padding520;             ; Offset:  520
;       uint ForwardLightData_Padding524;             ; Offset:  524
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  528
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  544
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  608
;       uint ForwardLightData_LightFunctionAtlasLightIndex;; Offset:  612
;       uint ForwardLightData_bAffectsTranslucentLighting;; Offset:  616
;       uint ForwardLightData_Padding620;             ; Offset:  620
;       uint BindlessSRV_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  624
;       uint ForwardLightData_Padding628;             ; Offset:  628
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  632
;       uint ForwardLightData_Padding636;             ; Offset:  636
;       uint BindlessSRV_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  640
;       uint ForwardLightData_Padding644;             ; Offset:  644
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  648
;       uint ForwardLightData_Padding652;             ; Offset:  652
;       uint BindlessSRV_ForwardLightData_ForwardLocalLightBuffer;; Offset:  656
;       uint ForwardLightData_Padding660;             ; Offset:  660
;       uint BindlessSRV_ForwardLightData_NumCulledLightsGrid;; Offset:  664
;       uint ForwardLightData_Padding668;             ; Offset:  668
;       uint BindlessSRV_ForwardLightData_CulledLightDataGrid32Bit;; Offset:  672
;       uint ForwardLightData_Padding676;             ; Offset:  676
;       uint BindlessSRV_ForwardLightData_CulledLightDataGrid16Bit;; Offset:  680
;   
;   } ForwardLightData;                               ; Offset:    0 Size:   684
;
; }
;
; cbuffer LightFunctionAtlas
; {
;
;   struct LightFunctionAtlas
;   {
;
;       uint BindlessSRV_LightFunctionAtlas_LightFunctionAtlasTexture;; Offset:    0
;       uint LightFunctionAtlas_Padding4;             ; Offset:    4
;       uint BindlessSRV_LightFunctionAtlas_LightInfoDataBuffer;; Offset:    8
;       uint LightFunctionAtlas_Padding12;            ; Offset:   12
;       uint BindlessSampler_LightFunctionAtlas_LightFunctionAtlasSampler;; Offset:   16
;       uint LightFunctionAtlas_Padding20;            ; Offset:   20
;       float LightFunctionAtlas_Slot_UVSize;         ; Offset:   24
;   
;   } LightFunctionAtlas;                             ; Offset:    0 Size:    28
;
; }
;
; cbuffer ShaderPrintData
; {
;
;   struct ShaderPrintData
;   {
;
;       int2 ShaderPrintData_Resolution;              ; Offset:    0
;       int2 ShaderPrintData_CursorCoord;             ; Offset:    8
;       float3 ShaderPrintData_TranslatedWorldOffset; ; Offset:   16
;       float ShaderPrintData_Padding28;              ; Offset:   28
;       float2 ShaderPrintData_FontSize;              ; Offset:   32
;       float2 ShaderPrintData_FontSpacing;           ; Offset:   40
;       uint ShaderPrintData_MaxCharacterCount;       ; Offset:   48
;       uint ShaderPrintData_MaxSymbolCount;          ; Offset:   52
;       uint ShaderPrintData_MaxStateCount;           ; Offset:   56
;       uint ShaderPrintData_MaxLineCount;            ; Offset:   60
;       uint ShaderPrintData_MaxTriangleCount;        ; Offset:   64
;       uint ShaderPrintData_IsDrawLocked;            ; Offset:   68
;   
;   } ShaderPrintData;                                ; Offset:    0 Size:    72
;
; }
;
; Resource bind info for ForwardLightData_ForwardLocalLightBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for ForwardLightData_NumCulledLightsGrid
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for LightFunctionAtlas_LightInfoDataBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for DownsampledTileAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for DownsampledTileData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; View                              cbuffer      NA          NA     CB1            cb1     1
; BlueNoise                         cbuffer      NA          NA     CB2            cb2     1
; ForwardLightData                  cbuffer      NA          NA     CB3            cb3     1
; LightFunctionAtlas                cbuffer      NA          NA     CB4            cb4     1
; ShaderPrintData                   cbuffer      NA          NA     CB5            cb5     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_PreIntegratedBRDFSampler     sampler      NA          NA      S1             s1     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S2             s2     1
; View_PreIntegratedBRDF            texture     f32          2d      T0             t0     1
; View_SSProfilesTexture            texture     f32          2d      T1             t1     1
; View_IESAtlasTexture              texture     f32     2darray      T2             t2     1
; BlueNoise_ScalarTexture           texture     f32          2d      T3             t3     1
; BlueNoise_Vec2Texture             texture     f32          2d      T4             t4     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T5             t5     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T6             t6     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T7             t7     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T8             t8     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T9             t9     1
; ForwardLightData_ForwardLocalLightBuffer   texture  struct         r/o     T10            t10     1
; ForwardLightData_NumCulledLightsGrid   texture  struct         r/o     T11            t11     1
; ForwardLightData_CulledLightDataGrid16Bit   texture     u32         buf     T12            t12     1
; LightFunctionAtlas_LightFunctionAtlasTexture   texture     f32          2d     T13            t13     1
; LightFunctionAtlas_LightInfoDataBuffer   texture  struct         r/o     T14            t14     1
; SceneLightingChannels             texture     u32          2d     T15            t15     1
; DownsampledTileAllocator          texture  struct         r/o     T16            t16     1
; DownsampledTileData               texture  struct         r/o     T17            t17     1
; ShaderPrint_RWEntryBuffer             UAV     u32         buf      U0             u0     1
; RWDownsampledSceneDepth               UAV     f32          2d      U1             u1     1
; RWDownsampledSceneWorldNormal         UAVunorm_f32          2d      U2             u2     1
; RWLightSamples                        UAV     u32          2d      U3             u3     1
; RWLightSampleUV                       UAV     u32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<float>" = type { float, %"class.Texture2DArray<float>::mips_type" }
%"class.Texture2DArray<float>::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.RWBuffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%_RootShaderParameters = type { i32, <2 x i32>, <2 x i32>, <2 x i32>, i32, float, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, i32, float, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <2 x float>, float, float, <4 x float>, <4 x float>, <4 x float>, float, i32, i32, i32, <4 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%hostlayout.ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, float, float, float, float, <3 x float>, float, float, float, i32, i32, <2 x float>, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%LightFunctionAtlas = type { i32, i32, i32, i32, i32, i32, float }
%ShaderPrintData = type { <2 x i32>, <2 x i32>, <3 x float>, float, <2 x float>, <2 x float>, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

@TEXT_CHARS = internal unnamed_addr constant [519 x i32] [i32 83, i32 105, i32 109, i32 112, i32 108, i32 101, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 67, i32 111, i32 109, i32 112, i32 108, i32 101, i32 120, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 83, i32 105, i32 109, i32 112, i32 108, i32 101, i32 32, i32 82, i32 101, i32 99, i32 116, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 67, i32 111, i32 109, i32 112, i32 108, i32 101, i32 120, i32 32, i32 82, i32 101, i32 99, i32 116, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 83, i32 105, i32 109, i32 112, i32 108, i32 101, i32 32, i32 84, i32 101, i32 120, i32 116, i32 117, i32 114, i32 101, i32 100, i32 32, i32 82, i32 101, i32 99, i32 116, i32 32, i32 67, i32 111, i32 109, i32 112, i32 108, i32 101, i32 120, i32 32, i32 84, i32 101, i32 120, i32 116, i32 117, i32 114, i32 101, i32 100, i32 32, i32 82, i32 101, i32 99, i32 116, i32 69, i32 109, i32 112, i32 116, i32 121, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 77, i32 101, i32 103, i32 97, i32 76, i32 105, i32 103, i32 104, i32 116, i32 115, i32 84, i32 105, i32 108, i32 101, i32 84, i32 121, i32 112, i32 101, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 124, i32 32, i32 78, i32 117, i32 109, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 71, i32 101, i32 110, i32 101, i32 114, i32 97, i32 116, i32 101, i32 83, i32 97, i32 109, i32 112, i32 108, i32 101, i32 115, i32 83, i32 99, i32 114, i32 101, i32 101, i32 110, i32 67, i32 111, i32 111, i32 114, i32 100, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 82, i32 111, i32 117, i32 103, i32 104, i32 110, i32 101, i32 115, i32 115, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 84, i32 105, i32 108, i32 101, i32 84, i32 121, i32 112, i32 101, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 86, i32 105, i32 101, i32 119, i32 46, i32 80, i32 114, i32 101, i32 69, i32 120, i32 112, i32 111, i32 115, i32 117, i32 114, i32 101, i32 32, i32 32, i32 32, i32 58, i32 32, i32 78, i32 117, i32 109, i32 76, i32 105, i32 103, i32 104, i32 116, i32 115, i32 73, i32 110, i32 71, i32 114, i32 105, i32 100, i32 67, i32 101, i32 108, i32 108, i32 58, i32 32, i32 78, i32 117, i32 109, i32 76, i32 111, i32 99, i32 97, i32 108, i32 76, i32 105, i32 103, i32 104, i32 116, i32 115, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 86, i32 97, i32 108, i32 105, i32 100, i32 71, i32 117, i32 105, i32 100, i32 101, i32 72, i32 105, i32 115, i32 116, i32 111, i32 114, i32 121, i32 32, i32 32, i32 58, i32 32, i32 76, i32 105, i32 103, i32 104, i32 116, i32 73, i32 100, i32 32, i32 124, i32 32, i32 76, i32 111, i32 99, i32 97, i32 108, i32 76, i32 105, i32 103, i32 104, i32 116, i32 73, i32 100, i32 32, i32 124, i32 32, i32 87, i32 101, i32 105, i32 103, i32 104, i32 116, i32 32, i32 32, i32 124, i32 32, i32 76, i32 70, i32 65, i32 116, i32 108, i32 97, i32 115, i32 32, i32 32, i32 32, i32 124, i32 32, i32 73, i32 69, i32 83, i32 65, i32 116, i32 108, i32 97, i32 115, i32 32, i32 32, i32 124, i32 32, i32 72, i32 105, i32 115, i32 116, i32 111, i32 114, i32 121, i32 87, i32 101, i32 105, i32 103, i32 104, i32 116, i32 32, i32 115, i32 117, i32 109, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 32, i32 83, i32 101, i32 108, i32 101, i32 99, i32 116, i32 101, i32 100, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 58, i32 76, i32 105, i32 103, i32 104, i32 116, i32 73, i32 100, i32 32, i32 124, i32 32, i32 87, i32 101, i32 105, i32 103, i32 104, i32 116, i32 32, i32 32, i32 32, i32 32, i32 124, i32 32, i32 72, i32 105, i32 115, i32 116, i32 111, i32 114, i32 121, i32 32, i32 124, i32 32, i32 65, i32 115, i32 86, i32 105, i32 115, i32 32, i32 124, i32 32, i32 65, i32 115, i32 80, i32 97, i32 114, i32 116, i32 105, i32 97, i32 108, i32 108, i32 121, i32 86, i32 105, i32 115, i32 32, i32 124, i32 32, i32 85, i32 86], align 4
@VisibleLightMaskHash.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 -1, i32 -1, i32 -1]

define void @GenerateLightSamplesCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 72 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 28 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 684 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 6012 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %40 = alloca [4 x i32], align 4
  %41 = alloca [4 x float], align 4
  %42 = alloca [2 x float], align 4
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %44 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %43, i32 1, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %45 = extractvalue %dx.types.ResRet.i32 %44, 0
  %46 = icmp ult i32 %39, %45
  br i1 %46, label %47, label %9253

; <label>:47                                      ; preds = %0
  %48 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %49 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 2
  %52 = add i32 %51, %39
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %54 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %53, i32 %52, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %55 = extractvalue %dx.types.ResRet.i32 %54, 0
  %56 = lshr i32 %55, 16
  %57 = shl i32 %55, 3
  %58 = and i32 %57, 524280
  %59 = shl nuw nsw i32 %56, 3
  %60 = add i32 %58, %49
  %61 = add i32 %59, %48
  %62 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.i32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.i32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.i32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.i32 %62, 3
  %67 = add i32 %65, %63
  %68 = add i32 %66, %64
  %69 = icmp ult i32 %60, %67
  %70 = icmp ult i32 %61, %68
  %71 = and i1 %69, %70
  br i1 %71, label %72, label %9253

; <label>:72                                      ; preds = %47
  %73 = shl i32 %60, 1
  %74 = shl i32 %61, 1
  %75 = and i32 %60, 1
  %76 = or i32 %75, %74
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 3
  %79 = add i32 %78, %76
  %80 = lshr i32 %79, 1
  %81 = and i32 %80, 1
  %82 = and i32 %79, 1
  %83 = or i32 %81, %73
  %84 = or i32 %82, %74
  %85 = xor i32 %84, 1
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 148)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.i32 %87, 1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %99, label %90

; <label>:90                                      ; preds = %72
  %91 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %92 = fmul fast float %91, 5.000000e-01
  %93 = fptosi float %92 to i32
  %94 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %95 = fmul fast float %94, 5.000000e-01
  %96 = fptosi float %95 to i32
  %97 = sitofp i32 %96 to float
  %98 = sitofp i32 %93 to float
  br label %109

; <label>:99                                      ; preds = %72
  %100 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 249)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.i32 %100, 2
  %102 = extractvalue %dx.types.CBufRet.i32 %100, 3
  %103 = sitofp i32 %101 to float
  %104 = sitofp i32 %102 to float
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 311)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %107 = fmul fast float %103, %106
  %108 = fmul fast float %104, %106
  br label %109

; <label>:109                                     ; preds = %99, %90
  %110 = phi float [ %97, %90 ], [ %107, %99 ]
  %111 = phi float [ %98, %90 ], [ %108, %99 ]
  %112 = fptosi float %110 to i32
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %114, label %123

; <label>:114                                     ; preds = %109
  %115 = fptosi float %111 to i32
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 147)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = sitofp i32 %112 to float
  %120 = sitofp i32 %115 to float
  %121 = fadd fast float %117, %119
  %122 = fadd fast float %118, %120
  br label %123

; <label>:123                                     ; preds = %114, %109
  %124 = phi float [ %121, %114 ], [ -1.000000e+00, %109 ]
  %125 = phi float [ %122, %114 ], [ -1.000000e+00, %109 ]
  %126 = fptosi float %124 to i32
  %127 = fptosi float %125 to i32
  %128 = sdiv i32 %126, 2
  %129 = sdiv i32 %127, 2
  %130 = icmp eq i32 %60, %128
  %131 = icmp eq i32 %61, %129
  %132 = and i1 %130, %131
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %136 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.i32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.i32 %136, 3
  %139 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %140 = shl i32 %139, 16
  %141 = or i32 %140, 36863
  %142 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 0
  store i32 %141, i32* %142, align 4, !tbaa !50
  %143 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 0
  store float 0.000000e+00, float* %143, align 4, !tbaa !54
  %144 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 1
  store i32 %141, i32* %144, align 4, !tbaa !50
  %145 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 1
  store float 0.000000e+00, float* %145, align 4, !tbaa !54
  %146 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 2
  store i32 %141, i32* %146, align 4, !tbaa !50
  %147 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 2
  store float 0.000000e+00, float* %147, align 4, !tbaa !54
  %148 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 3
  store i32 %141, i32* %148, align 4, !tbaa !50
  %149 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 3
  store float 0.000000e+00, float* %149, align 4, !tbaa !54
  %150 = uitofp i32 %83 to float
  %151 = uitofp i32 %85 to float
  %152 = fadd fast float %150, 5.000000e-01
  %153 = fadd fast float %151, 5.000000e-01
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 151)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %157 = fmul fast float %155, %152
  %158 = fmul fast float %156, %153
  %159 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %160 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %161 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %159, %dx.types.Handle %160, float %157, float %158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %162 = extractvalue %dx.types.ResRet.f32 %161, 0
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 78)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = fmul fast float %164, %162
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %167 = fadd fast float %165, %166
  %168 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %169 = fmul fast float %168, %162
  %170 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %171 = fsub fast float %169, %170
  %172 = fdiv fast float 1.000000e+00, %171
  %173 = fadd fast float %167, %172
  %174 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %175 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %174, %dx.types.Handle %160, float %157, float %158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %176 = extractvalue %dx.types.ResRet.f32 %175, 0
  %177 = extractvalue %dx.types.ResRet.f32 %175, 1
  %178 = extractvalue %dx.types.ResRet.f32 %175, 2
  %179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %180 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %179, %dx.types.Handle %160, float %157, float %158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %181 = extractvalue %dx.types.ResRet.f32 %180, 0
  %182 = extractvalue %dx.types.ResRet.f32 %180, 1
  %183 = extractvalue %dx.types.ResRet.f32 %180, 2
  %184 = extractvalue %dx.types.ResRet.f32 %180, 3
  %185 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %186 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %185, %dx.types.Handle %160, float %157, float %158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 0
  %188 = extractvalue %dx.types.ResRet.f32 %186, 1
  %189 = extractvalue %dx.types.ResRet.f32 %186, 2
  %190 = extractvalue %dx.types.ResRet.f32 %186, 3
  %191 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %192 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %191, %dx.types.Handle %160, float %157, float %158, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %193 = extractvalue %dx.types.ResRet.f32 %192, 0
  %194 = extractvalue %dx.types.ResRet.f32 %192, 1
  %195 = extractvalue %dx.types.ResRet.f32 %192, 2
  %196 = extractvalue %dx.types.ResRet.f32 %192, 3
  %197 = fmul fast float %184, 2.550000e+02
  %198 = fadd fast float %197, 5.000000e-01
  %199 = fptoui float %198 to i32
  %200 = and i32 %199, 15
  %201 = fmul fast float %176, 2.000000e+00
  %202 = fmul fast float %177, 2.000000e+00
  %203 = fmul fast float %178, 2.000000e+00
  %204 = fadd fast float %201, -1.000000e+00
  %205 = fadd fast float %202, -1.000000e+00
  %206 = fadd fast float %203, -1.000000e+00
  %207 = and i32 %199, 14
  %208 = icmp eq i32 %207, 2
  %209 = and i32 %199, 12
  %210 = icmp eq i32 %209, 4
  %211 = or i1 %210, %208
  %212 = icmp eq i32 %207, 8
  %213 = or i1 %212, %211
  %214 = select i1 %213, float %193, float 0.000000e+00
  %215 = select i1 %213, float %194, float 0.000000e+00
  %216 = select i1 %213, float %195, float 0.000000e+00
  %217 = select i1 %213, float %196, float 0.000000e+00
  %218 = call float @dx.op.dot3.f32(i32 55, float %204, float %205, float %206, float %204, float %205, float %206)  ; Dot3(ax,ay,az,bx,by,bz)
  %219 = call float @dx.op.unary.f32(i32 25, float %218)  ; Rsqrt(value)
  %220 = fmul fast float %219, %204
  %221 = fmul fast float %219, %205
  %222 = fmul fast float %219, %206
  %223 = icmp eq i32 %200, 9
  %224 = select i1 %223, float 0.000000e+00, float %181
  %225 = fmul fast float %182, 0x3FB47AE140000000
  %226 = fsub fast float %187, %225
  %227 = fsub fast float %188, %225
  %228 = fsub fast float %189, %225
  %229 = fmul fast float %224, %226
  %230 = fmul fast float %224, %227
  %231 = fmul fast float %224, %228
  %232 = fadd fast float %229, %225
  %233 = fadd fast float %230, %225
  %234 = fadd fast float %231, %225
  %235 = fmul fast float %224, %187
  %236 = fmul fast float %224, %188
  %237 = fmul fast float %224, %189
  %238 = fsub fast float %187, %235
  %239 = fsub fast float %188, %236
  %240 = fsub fast float %189, %237
  %241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 156)  ; CBufferLoadLegacy(handle,regIndex)
  %242 = extractvalue %dx.types.CBufRet.f32 %241, 3
  %243 = fmul fast float %242, %238
  %244 = fmul fast float %242, %239
  %245 = fmul fast float %242, %240
  %246 = extractvalue %dx.types.CBufRet.f32 %241, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %241, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %241, 2
  %249 = fadd fast float %243, %246
  %250 = fadd fast float %244, %247
  %251 = fadd fast float %245, %248
  %252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.f32 %252, 3
  %254 = fmul fast float %253, %232
  %255 = fmul fast float %253, %233
  %256 = fmul fast float %253, %234
  %257 = extractvalue %dx.types.CBufRet.f32 %252, 0
  %258 = extractvalue %dx.types.CBufRet.f32 %252, 1
  %259 = extractvalue %dx.types.CBufRet.f32 %252, 2
  %260 = fadd fast float %254, %257
  %261 = fadd fast float %255, %258
  %262 = fadd fast float %256, %259
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 271)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %265 = call float @dx.op.binary.f32(i32 35, float %183, float %264)  ; FMax(a,b)
  %266 = icmp eq i32 %200, 7
  br i1 %266, label %267, label %346

; <label>:267                                     ; preds = %123
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 79)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 2
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 3
  %271 = fsub fast float %157, %270
  %272 = fsub fast float %158, %269
  %273 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %274 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %275 = fdiv fast float %271, %273
  %276 = fdiv fast float %272, %274
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 0
  %279 = extractvalue %dx.types.CBufRet.f32 %277, 1
  %280 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 0
  %283 = extractvalue %dx.types.CBufRet.f32 %281, 1
  %284 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %287 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %288 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 0
  %291 = extractvalue %dx.types.CBufRet.f32 %289, 1
  %292 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %293 = fmul fast float %275, %173
  %294 = fmul fast float %276, %173
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 3
  %297 = fcmp fast oge float %296, 1.000000e+00
  %298 = select i1 %297, float %275, float %293
  %299 = select i1 %297, float %276, float %294
  %300 = fmul fast float %298, %278
  %301 = call float @dx.op.tertiary.f32(i32 46, float %299, float %282, float %300)  ; FMad(a,b,c)
  %302 = call float @dx.op.tertiary.f32(i32 46, float %173, float %286, float %301)  ; FMad(a,b,c)
  %303 = fadd fast float %302, %290
  %304 = fmul fast float %298, %279
  %305 = call float @dx.op.tertiary.f32(i32 46, float %299, float %283, float %304)  ; FMad(a,b,c)
  %306 = call float @dx.op.tertiary.f32(i32 46, float %173, float %287, float %305)  ; FMad(a,b,c)
  %307 = fadd fast float %306, %291
  %308 = fmul fast float %298, %280
  %309 = call float @dx.op.tertiary.f32(i32 46, float %299, float %284, float %308)  ; FMad(a,b,c)
  %310 = call float @dx.op.tertiary.f32(i32 46, float %173, float %288, float %309)  ; FMad(a,b,c)
  %311 = fadd fast float %310, %292
  %312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %313 = extractvalue %dx.types.CBufRet.f32 %312, 0
  %314 = extractvalue %dx.types.CBufRet.f32 %312, 1
  %315 = extractvalue %dx.types.CBufRet.f32 %312, 2
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = fsub fast float %303, %313
  %321 = fsub fast float %307, %314
  %322 = fsub fast float %311, %315
  %323 = call float @dx.op.dot3.f32(i32 55, float %320, float %321, float %322, float %320, float %321, float %322)  ; Dot3(ax,ay,az,bx,by,bz)
  %324 = call float @dx.op.unary.f32(i32 25, float %323)  ; Rsqrt(value)
  %325 = fmul fast float %324, %320
  %326 = fmul fast float %324, %321
  %327 = fmul fast float %324, %322
  %328 = select i1 %297, float %317, float %325
  %329 = select i1 %297, float %318, float %326
  %330 = select i1 %297, float %319, float %327
  %331 = fsub fast float -0.000000e+00, %328
  %332 = fsub fast float -0.000000e+00, %329
  %333 = fsub fast float -0.000000e+00, %330
  %334 = call float @dx.op.dot3.f32(i32 55, float %331, float %332, float %333, float %220, float %221, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %335 = fmul fast float %334, %220
  %336 = fmul fast float %334, %221
  %337 = fmul fast float %334, %222
  %338 = fsub fast float %331, %335
  %339 = fsub fast float %332, %336
  %340 = fsub fast float %333, %337
  %341 = call float @dx.op.dot3.f32(i32 55, float %338, float %339, float %340, float %338, float %339, float %340)  ; Dot3(ax,ay,az,bx,by,bz)
  %342 = call float @dx.op.unary.f32(i32 25, float %341)  ; Rsqrt(value)
  %343 = fmul fast float %338, %342
  %344 = fmul fast float %339, %342
  %345 = fmul fast float %340, %342
  br label %346

; <label>:346                                     ; preds = %267, %123
  %347 = phi float [ %343, %267 ], [ %220, %123 ]
  %348 = phi float [ %344, %267 ], [ %221, %123 ]
  %349 = phi float [ %345, %267 ], [ %222, %123 ]
  %350 = fcmp fast ogt float %173, 0.000000e+00
  br i1 %350, label %351, label %9213

; <label>:351                                     ; preds = %346
  %352 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 79)  ; CBufferLoadLegacy(handle,regIndex)
  %353 = extractvalue %dx.types.CBufRet.f32 %352, 2
  %354 = extractvalue %dx.types.CBufRet.f32 %352, 3
  %355 = fsub fast float %157, %354
  %356 = fsub fast float %158, %353
  %357 = extractvalue %dx.types.CBufRet.f32 %352, 0
  %358 = extractvalue %dx.types.CBufRet.f32 %352, 1
  %359 = fdiv fast float %355, %357
  %360 = fdiv fast float %356, %358
  %361 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %362 = extractvalue %dx.types.CBufRet.f32 %361, 0
  %363 = extractvalue %dx.types.CBufRet.f32 %361, 1
  %364 = extractvalue %dx.types.CBufRet.f32 %361, 2
  %365 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %366 = extractvalue %dx.types.CBufRet.f32 %365, 0
  %367 = extractvalue %dx.types.CBufRet.f32 %365, 1
  %368 = extractvalue %dx.types.CBufRet.f32 %365, 2
  %369 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %370 = extractvalue %dx.types.CBufRet.f32 %369, 0
  %371 = extractvalue %dx.types.CBufRet.f32 %369, 1
  %372 = extractvalue %dx.types.CBufRet.f32 %369, 2
  %373 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %374 = extractvalue %dx.types.CBufRet.f32 %373, 0
  %375 = extractvalue %dx.types.CBufRet.f32 %373, 1
  %376 = extractvalue %dx.types.CBufRet.f32 %373, 2
  %377 = fmul fast float %359, %173
  %378 = fmul fast float %360, %173
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %381 = fcmp fast oge float %380, 1.000000e+00
  %382 = select i1 %381, float %359, float %377
  %383 = select i1 %381, float %360, float %378
  %384 = fmul fast float %382, %362
  %385 = call float @dx.op.tertiary.f32(i32 46, float %383, float %366, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %173, float %370, float %385)  ; FMad(a,b,c)
  %387 = fadd fast float %386, %374
  %388 = fmul fast float %382, %363
  %389 = call float @dx.op.tertiary.f32(i32 46, float %383, float %367, float %388)  ; FMad(a,b,c)
  %390 = call float @dx.op.tertiary.f32(i32 46, float %173, float %371, float %389)  ; FMad(a,b,c)
  %391 = fadd fast float %390, %375
  %392 = fmul fast float %382, %364
  %393 = call float @dx.op.tertiary.f32(i32 46, float %383, float %368, float %392)  ; FMad(a,b,c)
  %394 = call float @dx.op.tertiary.f32(i32 46, float %173, float %372, float %393)  ; FMad(a,b,c)
  %395 = fadd fast float %394, %376
  %396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 147)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.f32 %396, 0
  %398 = extractvalue %dx.types.CBufRet.f32 %396, 1
  %399 = fsub fast float %150, %397
  %400 = fsub fast float %151, %398
  %401 = fptoui float %399 to i32
  %402 = fptoui float %400 to i32
  %403 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %404 = extractvalue %dx.types.CBufRet.i32 %403, 0
  %405 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %406 = extractvalue %dx.types.CBufRet.f32 %405, 0
  %407 = extractvalue %dx.types.CBufRet.f32 %405, 1
  %408 = extractvalue %dx.types.CBufRet.f32 %405, 2
  %409 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.i32 %409, 2
  %411 = fmul fast float %406, %173
  %412 = fadd fast float %411, %407
  %413 = call float @dx.op.unary.f32(i32 23, float %412)  ; Log(value)
  %414 = fmul fast float %413, %408
  %415 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %414)  ; FMax(a,b)
  %416 = fptoui float %415 to i32
  %417 = add nsw i32 %410, -1
  %418 = call i32 @dx.op.binary.i32(i32 40, i32 %416, i32 %417)  ; UMin(a,b)
  %419 = and i32 %404, 31
  %420 = lshr i32 %401, %419
  %421 = lshr i32 %402, %419
  %422 = extractvalue %dx.types.CBufRet.i32 %409, 0
  %423 = extractvalue %dx.types.CBufRet.i32 %409, 1
  %424 = mul i32 %423, %418
  %425 = add i32 %424, %421
  %426 = mul i32 %425, %422
  %427 = add i32 %426, %420
  %428 = shl i32 %427, 1
  %429 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %430 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %429, i32 %428, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %431 = extractvalue %dx.types.ResRet.i32 %430, 0
  %432 = and i32 %431, 65535
  %433 = lshr i32 %431, 16
  %434 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %435 = extractvalue %dx.types.CBufRet.i32 %434, 0
  %436 = call i32 @dx.op.binary.i32(i32 40, i32 %432, i32 %435)  ; UMin(a,b)
  %437 = call i32 @dx.op.binary.i32(i32 40, i32 %433, i32 %435)  ; UMin(a,b)
  %438 = or i32 %428, 1
  %439 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %429, i32 %438, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %440 = extractvalue %dx.types.ResRet.i32 %439, 0
  %441 = and i32 %440, 1073741823
  %442 = extractvalue %dx.types.CBufRet.i32 %409, 3
  %443 = call i32 @dx.op.binary.i32(i32 40, i32 %437, i32 %442)  ; UMin(a,b)
  %444 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.i32 %444, 0
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %452, label %447, !dx.controlflow.hints !56

; <label>:447                                     ; preds = %351
  %448 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %449 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %448, i32 0, i32 %83, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %450 = extractvalue %dx.types.ResRet.i32 %449, 0
  %451 = and i32 %450, 7
  br label %452

; <label>:452                                     ; preds = %447, %351
  %453 = phi i32 [ %451, %447 ], [ 7, %351 ]
  %454 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.i32 %454, 0
  %456 = extractvalue %dx.types.CBufRet.i32 %454, 1
  %457 = extractvalue %dx.types.CBufRet.i32 %454, 2
  %458 = and i32 %455, %60
  %459 = and i32 %456, %61
  %460 = and i32 %457, %78
  %461 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %462 = extractvalue %dx.types.CBufRet.i32 %461, 1
  %463 = mul i32 %460, %462
  %464 = add i32 %463, %459
  %465 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %466 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %465, i32 0, i32 %458, i32 %464, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %467 = extractvalue %dx.types.ResRet.f32 %466, 0
  %468 = fmul fast float %467, 2.500000e-01
  store float %468, float* %143, align 4, !tbaa !54
  %469 = fadd fast float %467, 1.000000e+00
  %470 = fmul fast float %469, 2.500000e-01
  store float %470, float* %145, align 4, !tbaa !54
  %471 = fadd fast float %467, 2.000000e+00
  %472 = fmul fast float %471, 2.500000e-01
  store float %472, float* %147, align 4, !tbaa !54
  %473 = fadd fast float %467, 3.000000e+00
  %474 = fmul fast float %473, 2.500000e-01
  store float %474, float* %149, align 4, !tbaa !54
  br i1 %132, label %475, label %1410

; <label>:475                                     ; preds = %452
  %476 = icmp eq i32 %137, 0
  br i1 %476, label %507, label %477

; <label>:477                                     ; preds = %475
  %478 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %479 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %478, i32 0, i32 2, i32 undef, i32 undef, i32 10)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %480 = add i32 %479, 10
  %481 = icmp ult i32 %480, %137
  br i1 %481, label %482, label %507

; <label>:482                                     ; preds = %477
  br label %483

; <label>:483                                     ; preds = %483, %482
  %484 = phi i32 [ %502, %483 ], [ %479, %482 ]
  %485 = phi float [ %503, %483 ], [ 0x3FA99999A0000000, %482 ]
  %486 = phi i32 [ %504, %483 ], [ 147, %482 ]
  %487 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %486
  %488 = load i32, i32* %487, align 4, !tbaa !50, !noalias !57
  %489 = shl i32 %484, 2
  %490 = add i32 %489, 4
  %491 = call i32 @dx.op.legacyF32ToF16(i32 130, float %485)  ; LegacyF32ToF16(value)
  %492 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0x3FA99999A0000000)  ; LegacyF32ToF16(value)
  %493 = shl i32 %492, 16
  %494 = or i32 %493, %491
  %495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %495, i32 %490, i32 undef, i32 %494, i32 %494, i32 %494, i32 %494, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %496 = add i32 %489, 5
  %497 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %497, i32 %496, i32 undef, i32 %488, i32 %488, i32 %488, i32 %488, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %498 = add i32 %489, 6
  %499 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %499, i32 %498, i32 undef, i32 1909206528, i32 1909206528, i32 1909206528, i32 1909206528, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %500 = add i32 %489, 7
  %501 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %501, i32 %500, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %502 = add nsw i32 %484, 1
  %503 = fadd fast float %485, %134
  %504 = add nuw nsw i32 %486, 1
  %505 = icmp eq i32 %504, 157
  br i1 %505, label %506, label %483

; <label>:506                                     ; preds = %483
  br label %507

; <label>:507                                     ; preds = %506, %477, %475
  %508 = fadd fast float %135, 0x3FA99999A0000000
  br i1 %476, label %539, label %509

; <label>:509                                     ; preds = %507
  %510 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %511 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %510, i32 0, i32 2, i32 undef, i32 undef, i32 32)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %512 = add i32 %511, 32
  %513 = icmp ult i32 %512, %137
  br i1 %513, label %514, label %539

; <label>:514                                     ; preds = %509
  br label %515

; <label>:515                                     ; preds = %515, %514
  %516 = phi i32 [ %534, %515 ], [ %511, %514 ]
  %517 = phi float [ %535, %515 ], [ 0x3FA99999A0000000, %514 ]
  %518 = phi i32 [ %536, %515 ], [ 157, %514 ]
  %519 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %518
  %520 = load i32, i32* %519, align 4, !tbaa !50, !noalias !60
  %521 = shl i32 %516, 2
  %522 = add i32 %521, 4
  %523 = call i32 @dx.op.legacyF32ToF16(i32 130, float %517)  ; LegacyF32ToF16(value)
  %524 = call i32 @dx.op.legacyF32ToF16(i32 130, float %508)  ; LegacyF32ToF16(value)
  %525 = shl i32 %524, 16
  %526 = or i32 %525, %523
  %527 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %527, i32 %522, i32 undef, i32 %526, i32 %526, i32 %526, i32 %526, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %528 = add i32 %521, 5
  %529 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %529, i32 %528, i32 undef, i32 %520, i32 %520, i32 %520, i32 %520, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %530 = add i32 %521, 6
  %531 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %531, i32 %530, i32 undef, i32 -943473408, i32 -943473408, i32 -943473408, i32 -943473408, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %532 = add i32 %521, 7
  %533 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %533, i32 %532, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %534 = add nsw i32 %516, 1
  %535 = fadd fast float %517, %134
  %536 = add nuw nsw i32 %518, 1
  %537 = icmp eq i32 %536, 189
  br i1 %537, label %538, label %515

; <label>:538                                     ; preds = %515
  br label %539

; <label>:539                                     ; preds = %538, %509, %507
  br label %540

; <label>:540                                     ; preds = %816, %539
  %541 = phi float [ %543, %816 ], [ %508, %539 ]
  %542 = phi i32 [ %817, %816 ], [ 0, %539 ]
  %543 = fadd fast float %541, %135
  switch i32 %542, label %761 [
    i32 0, label %544
    i32 1, label %574
    i32 2, label %604
    i32 3, label %634
    i32 4, label %664
    i32 5, label %694
    i32 6, label %724
  ]

; <label>:544                                     ; preds = %540
  br i1 %476, label %761, label %545

; <label>:545                                     ; preds = %544
  %546 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %547 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %546, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %548 = add i32 %547, 21
  %549 = icmp ult i32 %548, %137
  br i1 %549, label %550, label %761

; <label>:550                                     ; preds = %545
  br label %551

; <label>:551                                     ; preds = %551, %550
  %552 = phi i32 [ %570, %551 ], [ %547, %550 ]
  %553 = phi float [ %571, %551 ], [ 0x3FA99999A0000000, %550 ]
  %554 = phi i32 [ %572, %551 ], [ 0, %550 ]
  %555 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %554
  %556 = load i32, i32* %555, align 4, !tbaa !50, !noalias !63
  %557 = shl i32 %552, 2
  %558 = add i32 %557, 4
  %559 = call i32 @dx.op.legacyF32ToF16(i32 130, float %553)  ; LegacyF32ToF16(value)
  %560 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %561 = shl i32 %560, 16
  %562 = or i32 %561, %559
  %563 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %563, i32 %558, i32 undef, i32 %562, i32 %562, i32 %562, i32 %562, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %564 = add i32 %557, 5
  %565 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %565, i32 %564, i32 undef, i32 %556, i32 %556, i32 %556, i32 %556, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %566 = add i32 %557, 6
  %567 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %567, i32 %566, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %568 = add i32 %557, 7
  %569 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %569, i32 %568, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %570 = add nsw i32 %552, 1
  %571 = fadd fast float %553, %134
  %572 = add nuw nsw i32 %554, 1
  %573 = icmp eq i32 %572, 21
  br i1 %573, label %754, label %551

; <label>:574                                     ; preds = %540
  br i1 %476, label %761, label %575

; <label>:575                                     ; preds = %574
  %576 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %577 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %576, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %578 = add i32 %577, 21
  %579 = icmp ult i32 %578, %137
  br i1 %579, label %580, label %761

; <label>:580                                     ; preds = %575
  br label %581

; <label>:581                                     ; preds = %581, %580
  %582 = phi i32 [ %600, %581 ], [ %577, %580 ]
  %583 = phi float [ %601, %581 ], [ 0x3FA99999A0000000, %580 ]
  %584 = phi i32 [ %602, %581 ], [ 21, %580 ]
  %585 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %584
  %586 = load i32, i32* %585, align 4, !tbaa !50, !noalias !66
  %587 = shl i32 %582, 2
  %588 = add i32 %587, 4
  %589 = call i32 @dx.op.legacyF32ToF16(i32 130, float %583)  ; LegacyF32ToF16(value)
  %590 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %591 = shl i32 %590, 16
  %592 = or i32 %591, %589
  %593 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %593, i32 %588, i32 undef, i32 %592, i32 %592, i32 %592, i32 %592, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %594 = add i32 %587, 5
  %595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %595, i32 %594, i32 undef, i32 %586, i32 %586, i32 %586, i32 %586, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %596 = add i32 %587, 6
  %597 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %597, i32 %596, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %598 = add i32 %587, 7
  %599 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %599, i32 %598, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %600 = add nsw i32 %582, 1
  %601 = fadd fast float %583, %134
  %602 = add nuw nsw i32 %584, 1
  %603 = icmp eq i32 %602, 42
  br i1 %603, label %755, label %581

; <label>:604                                     ; preds = %540
  br i1 %476, label %761, label %605

; <label>:605                                     ; preds = %604
  %606 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %607 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %606, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %608 = add i32 %607, 21
  %609 = icmp ult i32 %608, %137
  br i1 %609, label %610, label %761

; <label>:610                                     ; preds = %605
  br label %611

; <label>:611                                     ; preds = %611, %610
  %612 = phi i32 [ %630, %611 ], [ %607, %610 ]
  %613 = phi float [ %631, %611 ], [ 0x3FA99999A0000000, %610 ]
  %614 = phi i32 [ %632, %611 ], [ 42, %610 ]
  %615 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %614
  %616 = load i32, i32* %615, align 4, !tbaa !50, !noalias !69
  %617 = shl i32 %612, 2
  %618 = add i32 %617, 4
  %619 = call i32 @dx.op.legacyF32ToF16(i32 130, float %613)  ; LegacyF32ToF16(value)
  %620 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %621 = shl i32 %620, 16
  %622 = or i32 %621, %619
  %623 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %623, i32 %618, i32 undef, i32 %622, i32 %622, i32 %622, i32 %622, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %624 = add i32 %617, 5
  %625 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %625, i32 %624, i32 undef, i32 %616, i32 %616, i32 %616, i32 %616, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %626 = add i32 %617, 6
  %627 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %627, i32 %626, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %628 = add i32 %617, 7
  %629 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %629, i32 %628, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %630 = add nsw i32 %612, 1
  %631 = fadd fast float %613, %134
  %632 = add nuw nsw i32 %614, 1
  %633 = icmp eq i32 %632, 63
  br i1 %633, label %756, label %611

; <label>:634                                     ; preds = %540
  br i1 %476, label %761, label %635

; <label>:635                                     ; preds = %634
  %636 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %637 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %636, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %638 = add i32 %637, 21
  %639 = icmp ult i32 %638, %137
  br i1 %639, label %640, label %761

; <label>:640                                     ; preds = %635
  br label %641

; <label>:641                                     ; preds = %641, %640
  %642 = phi i32 [ %660, %641 ], [ %637, %640 ]
  %643 = phi float [ %661, %641 ], [ 0x3FA99999A0000000, %640 ]
  %644 = phi i32 [ %662, %641 ], [ 63, %640 ]
  %645 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %644
  %646 = load i32, i32* %645, align 4, !tbaa !50, !noalias !72
  %647 = shl i32 %642, 2
  %648 = add i32 %647, 4
  %649 = call i32 @dx.op.legacyF32ToF16(i32 130, float %643)  ; LegacyF32ToF16(value)
  %650 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %651 = shl i32 %650, 16
  %652 = or i32 %651, %649
  %653 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %653, i32 %648, i32 undef, i32 %652, i32 %652, i32 %652, i32 %652, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %654 = add i32 %647, 5
  %655 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %655, i32 %654, i32 undef, i32 %646, i32 %646, i32 %646, i32 %646, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %656 = add i32 %647, 6
  %657 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %657, i32 %656, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %658 = add i32 %647, 7
  %659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %659, i32 %658, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %660 = add nsw i32 %642, 1
  %661 = fadd fast float %643, %134
  %662 = add nuw nsw i32 %644, 1
  %663 = icmp eq i32 %662, 84
  br i1 %663, label %757, label %641

; <label>:664                                     ; preds = %540
  br i1 %476, label %761, label %665

; <label>:665                                     ; preds = %664
  %666 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %667 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %666, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %668 = add i32 %667, 21
  %669 = icmp ult i32 %668, %137
  br i1 %669, label %670, label %761

; <label>:670                                     ; preds = %665
  br label %671

; <label>:671                                     ; preds = %671, %670
  %672 = phi i32 [ %690, %671 ], [ %667, %670 ]
  %673 = phi float [ %691, %671 ], [ 0x3FA99999A0000000, %670 ]
  %674 = phi i32 [ %692, %671 ], [ 84, %670 ]
  %675 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %674
  %676 = load i32, i32* %675, align 4, !tbaa !50, !noalias !75
  %677 = shl i32 %672, 2
  %678 = add i32 %677, 4
  %679 = call i32 @dx.op.legacyF32ToF16(i32 130, float %673)  ; LegacyF32ToF16(value)
  %680 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %681 = shl i32 %680, 16
  %682 = or i32 %681, %679
  %683 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %683, i32 %678, i32 undef, i32 %682, i32 %682, i32 %682, i32 %682, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %684 = add i32 %677, 5
  %685 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %685, i32 %684, i32 undef, i32 %676, i32 %676, i32 %676, i32 %676, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %686 = add i32 %677, 6
  %687 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %687, i32 %686, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %688 = add i32 %677, 7
  %689 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %689, i32 %688, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %690 = add nsw i32 %672, 1
  %691 = fadd fast float %673, %134
  %692 = add nuw nsw i32 %674, 1
  %693 = icmp eq i32 %692, 105
  br i1 %693, label %758, label %671

; <label>:694                                     ; preds = %540
  br i1 %476, label %761, label %695

; <label>:695                                     ; preds = %694
  %696 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %697 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %696, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %698 = add i32 %697, 21
  %699 = icmp ult i32 %698, %137
  br i1 %699, label %700, label %761

; <label>:700                                     ; preds = %695
  br label %701

; <label>:701                                     ; preds = %701, %700
  %702 = phi i32 [ %720, %701 ], [ %697, %700 ]
  %703 = phi float [ %721, %701 ], [ 0x3FA99999A0000000, %700 ]
  %704 = phi i32 [ %722, %701 ], [ 105, %700 ]
  %705 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %704
  %706 = load i32, i32* %705, align 4, !tbaa !50, !noalias !78
  %707 = shl i32 %702, 2
  %708 = add i32 %707, 4
  %709 = call i32 @dx.op.legacyF32ToF16(i32 130, float %703)  ; LegacyF32ToF16(value)
  %710 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %711 = shl i32 %710, 16
  %712 = or i32 %711, %709
  %713 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %713, i32 %708, i32 undef, i32 %712, i32 %712, i32 %712, i32 %712, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %714 = add i32 %707, 5
  %715 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %715, i32 %714, i32 undef, i32 %706, i32 %706, i32 %706, i32 %706, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %716 = add i32 %707, 6
  %717 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %717, i32 %716, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %718 = add i32 %707, 7
  %719 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %719, i32 %718, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %720 = add nsw i32 %702, 1
  %721 = fadd fast float %703, %134
  %722 = add nuw nsw i32 %704, 1
  %723 = icmp eq i32 %722, 126
  br i1 %723, label %759, label %701

; <label>:724                                     ; preds = %540
  br i1 %476, label %761, label %725

; <label>:725                                     ; preds = %724
  %726 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %727 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %726, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %728 = add i32 %727, 21
  %729 = icmp ult i32 %728, %137
  br i1 %729, label %730, label %761

; <label>:730                                     ; preds = %725
  br label %731

; <label>:731                                     ; preds = %731, %730
  %732 = phi i32 [ %750, %731 ], [ %727, %730 ]
  %733 = phi float [ %751, %731 ], [ 0x3FA99999A0000000, %730 ]
  %734 = phi i32 [ %752, %731 ], [ 126, %730 ]
  %735 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %734
  %736 = load i32, i32* %735, align 4, !tbaa !50, !noalias !81
  %737 = shl i32 %732, 2
  %738 = add i32 %737, 4
  %739 = call i32 @dx.op.legacyF32ToF16(i32 130, float %733)  ; LegacyF32ToF16(value)
  %740 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %741 = shl i32 %740, 16
  %742 = or i32 %741, %739
  %743 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %743, i32 %738, i32 undef, i32 %742, i32 %742, i32 %742, i32 %742, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %744 = add i32 %737, 5
  %745 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %745, i32 %744, i32 undef, i32 %736, i32 %736, i32 %736, i32 %736, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %746 = add i32 %737, 6
  %747 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %747, i32 %746, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %748 = add i32 %737, 7
  %749 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %749, i32 %748, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %750 = add nsw i32 %732, 1
  %751 = fadd fast float %733, %134
  %752 = add nuw nsw i32 %734, 1
  %753 = icmp eq i32 %752, 147
  br i1 %753, label %760, label %731

; <label>:754                                     ; preds = %551
  br label %761

; <label>:755                                     ; preds = %581
  br label %761

; <label>:756                                     ; preds = %611
  br label %761

; <label>:757                                     ; preds = %641
  br label %761

; <label>:758                                     ; preds = %671
  br label %761

; <label>:759                                     ; preds = %701
  br label %761

; <label>:760                                     ; preds = %731
  br label %761

; <label>:761                                     ; preds = %760, %759, %758, %757, %756, %755, %754, %725, %724, %695, %694, %665, %664, %635, %634, %605, %604, %575, %574, %545, %544, %540
  %762 = phi float [ 0x3FA99999A0000000, %540 ], [ 0x3FA99999A0000000, %545 ], [ 0x3FA99999A0000000, %544 ], [ 0x3FA99999A0000000, %575 ], [ 0x3FA99999A0000000, %574 ], [ 0x3FA99999A0000000, %605 ], [ 0x3FA99999A0000000, %604 ], [ 0x3FA99999A0000000, %635 ], [ 0x3FA99999A0000000, %634 ], [ 0x3FA99999A0000000, %665 ], [ 0x3FA99999A0000000, %664 ], [ 0x3FA99999A0000000, %695 ], [ 0x3FA99999A0000000, %694 ], [ 0x3FA99999A0000000, %725 ], [ 0x3FA99999A0000000, %724 ], [ %571, %754 ], [ %601, %755 ], [ %631, %756 ], [ %661, %757 ], [ %691, %758 ], [ %721, %759 ], [ %751, %760 ]
  br i1 %476, label %793, label %763

; <label>:763                                     ; preds = %761
  %764 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %765 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %764, i32 0, i32 2, i32 undef, i32 undef, i32 2)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %766 = add i32 %765, 2
  %767 = icmp ult i32 %766, %137
  br i1 %767, label %768, label %793

; <label>:768                                     ; preds = %763
  br label %769

; <label>:769                                     ; preds = %769, %768
  %770 = phi i32 [ %788, %769 ], [ %765, %768 ]
  %771 = phi float [ %789, %769 ], [ %762, %768 ]
  %772 = phi i32 [ %790, %769 ], [ 189, %768 ]
  %773 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %772
  %774 = load i32, i32* %773, align 4, !tbaa !50, !noalias !84
  %775 = shl i32 %770, 2
  %776 = add i32 %775, 4
  %777 = call i32 @dx.op.legacyF32ToF16(i32 130, float %771)  ; LegacyF32ToF16(value)
  %778 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %779 = shl i32 %778, 16
  %780 = or i32 %779, %777
  %781 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %781, i32 %776, i32 undef, i32 %780, i32 %780, i32 %780, i32 %780, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %782 = add i32 %775, 5
  %783 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %783, i32 %782, i32 undef, i32 %774, i32 %774, i32 %774, i32 %774, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %784 = add i32 %775, 6
  %785 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %785, i32 %784, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %786 = add i32 %775, 7
  %787 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %787, i32 %786, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %788 = add nsw i32 %770, 1
  %789 = fadd fast float %771, %134
  %790 = add nuw nsw i32 %772, 1
  %791 = icmp eq i32 %790, 191
  br i1 %791, label %792, label %769

; <label>:792                                     ; preds = %769
  br label %793

; <label>:793                                     ; preds = %792, %763, %761
  %794 = phi float [ %762, %763 ], [ %762, %761 ], [ %789, %792 ]
  %795 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %796 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %795, i32 %542, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %797 = extractvalue %dx.types.ResRet.i32 %796, 0
  br i1 %476, label %816, label %798

; <label>:798                                     ; preds = %793
  %799 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %800 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %799, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %801 = icmp ult i32 %800, %137
  br i1 %801, label %802, label %816

; <label>:802                                     ; preds = %798
  %803 = shl i32 %800, 2
  %804 = add i32 %803, 4
  %805 = call i32 @dx.op.legacyF32ToF16(i32 130, float %794)  ; LegacyF32ToF16(value)
  %806 = call i32 @dx.op.legacyF32ToF16(i32 130, float %543)  ; LegacyF32ToF16(value)
  %807 = shl i32 %806, 16
  %808 = or i32 %807, %805
  %809 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %809, i32 %804, i32 undef, i32 %808, i32 %808, i32 %808, i32 %808, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %810 = add i32 %803, 5
  %811 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %811, i32 %810, i32 undef, i32 %797, i32 %797, i32 %797, i32 %797, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %812 = add i32 %803, 6
  %813 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %813, i32 %812, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %814 = add i32 %803, 7
  %815 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %815, i32 %814, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %816

; <label>:816                                     ; preds = %802, %798, %793
  %817 = add nuw nsw i32 %542, 1
  %818 = icmp eq i32 %817, 7
  br i1 %818, label %819, label %540

; <label>:819                                     ; preds = %816
  %820 = fmul fast float %135, 2.000000e+00
  %821 = fadd fast float %820, %543
  br i1 %476, label %852, label %822

; <label>:822                                     ; preds = %819
  %823 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %824 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %823, i32 0, i32 2, i32 undef, i32 undef, i32 15)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %825 = add i32 %824, 15
  %826 = icmp ult i32 %825, %137
  br i1 %826, label %827, label %852

; <label>:827                                     ; preds = %822
  br label %828

; <label>:828                                     ; preds = %828, %827
  %829 = phi i32 [ %847, %828 ], [ %824, %827 ]
  %830 = phi float [ %848, %828 ], [ 0x3FA99999A0000000, %827 ]
  %831 = phi i32 [ %849, %828 ], [ 191, %827 ]
  %832 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %831
  %833 = load i32, i32* %832, align 4, !tbaa !50, !noalias !87
  %834 = shl i32 %829, 2
  %835 = add i32 %834, 4
  %836 = call i32 @dx.op.legacyF32ToF16(i32 130, float %830)  ; LegacyF32ToF16(value)
  %837 = call i32 @dx.op.legacyF32ToF16(i32 130, float %821)  ; LegacyF32ToF16(value)
  %838 = shl i32 %837, 16
  %839 = or i32 %838, %836
  %840 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %840, i32 %835, i32 undef, i32 %839, i32 %839, i32 %839, i32 %839, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %841 = add i32 %834, 5
  %842 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %842, i32 %841, i32 undef, i32 %833, i32 %833, i32 %833, i32 %833, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %843 = add i32 %834, 6
  %844 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %844, i32 %843, i32 undef, i32 1909206528, i32 1909206528, i32 1909206528, i32 1909206528, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %845 = add i32 %834, 7
  %846 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %846, i32 %845, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %847 = add nsw i32 %829, 1
  %848 = fadd fast float %830, %134
  %849 = add nuw nsw i32 %831, 1
  %850 = icmp eq i32 %849, 206
  br i1 %850, label %851, label %828

; <label>:851                                     ; preds = %828
  br label %852

; <label>:852                                     ; preds = %851, %822, %819
  %853 = fadd fast float %821, %135
  br i1 %476, label %884, label %854

; <label>:854                                     ; preds = %852
  %855 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %856 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %855, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %857 = add i32 %856, 21
  %858 = icmp ult i32 %857, %137
  br i1 %858, label %859, label %884

; <label>:859                                     ; preds = %854
  br label %860

; <label>:860                                     ; preds = %860, %859
  %861 = phi i32 [ %879, %860 ], [ %856, %859 ]
  %862 = phi float [ %880, %860 ], [ 0x3FA99999A0000000, %859 ]
  %863 = phi i32 [ %881, %860 ], [ 206, %859 ]
  %864 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %863
  %865 = load i32, i32* %864, align 4, !tbaa !50, !noalias !90
  %866 = shl i32 %861, 2
  %867 = add i32 %866, 4
  %868 = call i32 @dx.op.legacyF32ToF16(i32 130, float %862)  ; LegacyF32ToF16(value)
  %869 = call i32 @dx.op.legacyF32ToF16(i32 130, float %853)  ; LegacyF32ToF16(value)
  %870 = shl i32 %869, 16
  %871 = or i32 %870, %868
  %872 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %872, i32 %867, i32 undef, i32 %871, i32 %871, i32 %871, i32 %871, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %873 = add i32 %866, 5
  %874 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %874, i32 %873, i32 undef, i32 %865, i32 %865, i32 %865, i32 %865, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %875 = add i32 %866, 6
  %876 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %876, i32 %875, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %877 = add i32 %866, 7
  %878 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %878, i32 %877, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %879 = add nsw i32 %861, 1
  %880 = fadd fast float %862, %134
  %881 = add nuw nsw i32 %863, 1
  %882 = icmp eq i32 %881, 227
  br i1 %882, label %883, label %860

; <label>:883                                     ; preds = %860
  br label %884

; <label>:884                                     ; preds = %883, %854, %852
  %885 = phi float [ 0x3FA99999A0000000, %854 ], [ 0x3FA99999A0000000, %852 ], [ %880, %883 ]
  br i1 %476, label %904, label %886

; <label>:886                                     ; preds = %884
  %887 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %888 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %887, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %889 = icmp ult i32 %888, %137
  br i1 %889, label %890, label %904

; <label>:890                                     ; preds = %886
  %891 = shl i32 %888, 2
  %892 = add i32 %891, 4
  %893 = call i32 @dx.op.legacyF32ToF16(i32 130, float %885)  ; LegacyF32ToF16(value)
  %894 = call i32 @dx.op.legacyF32ToF16(i32 130, float %853)  ; LegacyF32ToF16(value)
  %895 = shl i32 %894, 16
  %896 = or i32 %895, %893
  %897 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %897, i32 %892, i32 undef, i32 %896, i32 %896, i32 %896, i32 %896, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %898 = add i32 %891, 5
  %899 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %899, i32 %898, i32 undef, i32 %83, i32 %83, i32 %83, i32 %83, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %900 = add i32 %891, 6
  %901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %901, i32 %900, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %902 = add i32 %891, 7
  %903 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %903, i32 %902, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %904

; <label>:904                                     ; preds = %890, %886, %884
  %905 = fmul fast float %134, 1.200000e+01
  %906 = fadd fast float %885, %905
  br i1 %476, label %925, label %907

; <label>:907                                     ; preds = %904
  %908 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %909 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %908, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %910 = icmp ult i32 %909, %137
  br i1 %910, label %911, label %925

; <label>:911                                     ; preds = %907
  %912 = shl i32 %909, 2
  %913 = add i32 %912, 4
  %914 = call i32 @dx.op.legacyF32ToF16(i32 130, float %906)  ; LegacyF32ToF16(value)
  %915 = call i32 @dx.op.legacyF32ToF16(i32 130, float %853)  ; LegacyF32ToF16(value)
  %916 = shl i32 %915, 16
  %917 = or i32 %916, %914
  %918 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %918, i32 %913, i32 undef, i32 %917, i32 %917, i32 %917, i32 %917, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %919 = add i32 %912, 5
  %920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %920, i32 %919, i32 undef, i32 %85, i32 %85, i32 %85, i32 %85, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %921 = add i32 %912, 6
  %922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %922, i32 %921, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %923 = add i32 %912, 7
  %924 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %924, i32 %923, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %925

; <label>:925                                     ; preds = %911, %907, %904
  %926 = fadd fast float %853, %135
  br i1 %476, label %957, label %927

; <label>:927                                     ; preds = %925
  %928 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %929 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %928, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %930 = add i32 %929, 21
  %931 = icmp ult i32 %930, %137
  br i1 %931, label %932, label %957

; <label>:932                                     ; preds = %927
  br label %933

; <label>:933                                     ; preds = %933, %932
  %934 = phi i32 [ %952, %933 ], [ %929, %932 ]
  %935 = phi float [ %953, %933 ], [ 0x3FA99999A0000000, %932 ]
  %936 = phi i32 [ %954, %933 ], [ 227, %932 ]
  %937 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %936
  %938 = load i32, i32* %937, align 4, !tbaa !50, !noalias !93
  %939 = shl i32 %934, 2
  %940 = add i32 %939, 4
  %941 = call i32 @dx.op.legacyF32ToF16(i32 130, float %935)  ; LegacyF32ToF16(value)
  %942 = call i32 @dx.op.legacyF32ToF16(i32 130, float %926)  ; LegacyF32ToF16(value)
  %943 = shl i32 %942, 16
  %944 = or i32 %943, %941
  %945 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %945, i32 %940, i32 undef, i32 %944, i32 %944, i32 %944, i32 %944, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %946 = add i32 %939, 5
  %947 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %947, i32 %946, i32 undef, i32 %938, i32 %938, i32 %938, i32 %938, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %948 = add i32 %939, 6
  %949 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %949, i32 %948, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %950 = add i32 %939, 7
  %951 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %951, i32 %950, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %952 = add nsw i32 %934, 1
  %953 = fadd fast float %935, %134
  %954 = add nuw nsw i32 %936, 1
  %955 = icmp eq i32 %954, 248
  br i1 %955, label %956, label %933

; <label>:956                                     ; preds = %933
  br label %957

; <label>:957                                     ; preds = %956, %927, %925
  %958 = phi float [ 0x3FA99999A0000000, %927 ], [ 0x3FA99999A0000000, %925 ], [ %953, %956 ]
  %959 = bitcast float %265 to i32
  br i1 %476, label %978, label %960

; <label>:960                                     ; preds = %957
  %961 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %962 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %961, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %963 = icmp ult i32 %962, %137
  br i1 %963, label %964, label %978

; <label>:964                                     ; preds = %960
  %965 = shl i32 %962, 2
  %966 = add i32 %965, 4
  %967 = call i32 @dx.op.legacyF32ToF16(i32 130, float %958)  ; LegacyF32ToF16(value)
  %968 = call i32 @dx.op.legacyF32ToF16(i32 130, float %926)  ; LegacyF32ToF16(value)
  %969 = shl i32 %968, 16
  %970 = or i32 %969, %967
  %971 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %971, i32 %966, i32 undef, i32 %970, i32 %970, i32 %970, i32 %970, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %972 = add i32 %965, 5
  %973 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %973, i32 %972, i32 undef, i32 %959, i32 %959, i32 %959, i32 %959, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %974 = add i32 %965, 6
  %975 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %975, i32 %974, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %976 = add i32 %965, 7
  %977 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %977, i32 %976, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %978

; <label>:978                                     ; preds = %964, %960, %957
  %979 = fadd fast float %926, %135
  br i1 %476, label %1010, label %980

; <label>:980                                     ; preds = %978
  %981 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %982 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %981, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %983 = add i32 %982, 21
  %984 = icmp ult i32 %983, %137
  br i1 %984, label %985, label %1010

; <label>:985                                     ; preds = %980
  br label %986

; <label>:986                                     ; preds = %986, %985
  %987 = phi i32 [ %1005, %986 ], [ %982, %985 ]
  %988 = phi float [ %1006, %986 ], [ 0x3FA99999A0000000, %985 ]
  %989 = phi i32 [ %1007, %986 ], [ 248, %985 ]
  %990 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %989
  %991 = load i32, i32* %990, align 4, !tbaa !50, !noalias !96
  %992 = shl i32 %987, 2
  %993 = add i32 %992, 4
  %994 = call i32 @dx.op.legacyF32ToF16(i32 130, float %988)  ; LegacyF32ToF16(value)
  %995 = call i32 @dx.op.legacyF32ToF16(i32 130, float %979)  ; LegacyF32ToF16(value)
  %996 = shl i32 %995, 16
  %997 = or i32 %996, %994
  %998 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %998, i32 %993, i32 undef, i32 %997, i32 %997, i32 %997, i32 %997, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %999 = add i32 %992, 5
  %1000 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1000, i32 %999, i32 undef, i32 %991, i32 %991, i32 %991, i32 %991, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1001 = add i32 %992, 6
  %1002 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1002, i32 %1001, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1003 = add i32 %992, 7
  %1004 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1004, i32 %1003, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1005 = add nsw i32 %987, 1
  %1006 = fadd fast float %988, %134
  %1007 = add nuw nsw i32 %989, 1
  %1008 = icmp eq i32 %1007, 269
  br i1 %1008, label %1009, label %986

; <label>:1009                                    ; preds = %986
  br label %1010

; <label>:1010                                    ; preds = %1009, %980, %978
  %1011 = phi float [ 0x3FA99999A0000000, %980 ], [ 0x3FA99999A0000000, %978 ], [ %1006, %1009 ]
  br i1 %476, label %1042, label %1012

; <label>:1012                                    ; preds = %1010
  %1013 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1014 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1013, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1015 = add i32 %1014, 21
  %1016 = icmp ult i32 %1015, %137
  br i1 %1016, label %1017, label %1042

; <label>:1017                                    ; preds = %1012
  br label %1018

; <label>:1018                                    ; preds = %1018, %1017
  %1019 = phi i32 [ %1037, %1018 ], [ %1014, %1017 ]
  %1020 = phi float [ %1038, %1018 ], [ %1011, %1017 ]
  %1021 = phi i32 [ %1039, %1018 ], [ 21, %1017 ]
  %1022 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1021
  %1023 = load i32, i32* %1022, align 4, !tbaa !50, !noalias !99
  %1024 = shl i32 %1019, 2
  %1025 = add i32 %1024, 4
  %1026 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1020)  ; LegacyF32ToF16(value)
  %1027 = call i32 @dx.op.legacyF32ToF16(i32 130, float %979)  ; LegacyF32ToF16(value)
  %1028 = shl i32 %1027, 16
  %1029 = or i32 %1028, %1026
  %1030 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1030, i32 %1025, i32 undef, i32 %1029, i32 %1029, i32 %1029, i32 %1029, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1031 = add i32 %1024, 5
  %1032 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1032, i32 %1031, i32 undef, i32 %1023, i32 %1023, i32 %1023, i32 %1023, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1033 = add i32 %1024, 6
  %1034 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1034, i32 %1033, i32 undef, i32 65280, i32 65280, i32 65280, i32 65280, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1035 = add i32 %1024, 7
  %1036 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1036, i32 %1035, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1037 = add nsw i32 %1019, 1
  %1038 = fadd fast float %1020, %134
  %1039 = add nuw nsw i32 %1021, 1
  %1040 = icmp eq i32 %1039, 42
  br i1 %1040, label %1041, label %1018

; <label>:1041                                    ; preds = %1018
  br label %1042

; <label>:1042                                    ; preds = %1041, %1012, %1010
  %1043 = fadd fast float %979, %135
  br i1 %476, label %1074, label %1044

; <label>:1044                                    ; preds = %1042
  %1045 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1046 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1045, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1047 = add i32 %1046, 21
  %1048 = icmp ult i32 %1047, %137
  br i1 %1048, label %1049, label %1074

; <label>:1049                                    ; preds = %1044
  br label %1050

; <label>:1050                                    ; preds = %1050, %1049
  %1051 = phi i32 [ %1069, %1050 ], [ %1046, %1049 ]
  %1052 = phi float [ %1070, %1050 ], [ 0x3FA99999A0000000, %1049 ]
  %1053 = phi i32 [ %1071, %1050 ], [ 269, %1049 ]
  %1054 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1053
  %1055 = load i32, i32* %1054, align 4, !tbaa !50, !noalias !102
  %1056 = shl i32 %1051, 2
  %1057 = add i32 %1056, 4
  %1058 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1052)  ; LegacyF32ToF16(value)
  %1059 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1043)  ; LegacyF32ToF16(value)
  %1060 = shl i32 %1059, 16
  %1061 = or i32 %1060, %1058
  %1062 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1062, i32 %1057, i32 undef, i32 %1061, i32 %1061, i32 %1061, i32 %1061, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1063 = add i32 %1056, 5
  %1064 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1064, i32 %1063, i32 undef, i32 %1055, i32 %1055, i32 %1055, i32 %1055, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1065 = add i32 %1056, 6
  %1066 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1066, i32 %1065, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1067 = add i32 %1056, 7
  %1068 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1068, i32 %1067, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1069 = add nsw i32 %1051, 1
  %1070 = fadd fast float %1052, %134
  %1071 = add nuw nsw i32 %1053, 1
  %1072 = icmp eq i32 %1071, 290
  br i1 %1072, label %1073, label %1050

; <label>:1073                                    ; preds = %1050
  br label %1074

; <label>:1074                                    ; preds = %1073, %1044, %1042
  %1075 = phi float [ 0x3FA99999A0000000, %1044 ], [ 0x3FA99999A0000000, %1042 ], [ %1070, %1073 ]
  %1076 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 155)  ; CBufferLoadLegacy(handle,regIndex)
  %1077 = extractvalue %dx.types.CBufRet.f32 %1076, 2
  %1078 = bitcast float %1077 to i32
  br i1 %476, label %1097, label %1079

; <label>:1079                                    ; preds = %1074
  %1080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1081 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1080, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1082 = icmp ult i32 %1081, %137
  br i1 %1082, label %1083, label %1097

; <label>:1083                                    ; preds = %1079
  %1084 = shl i32 %1081, 2
  %1085 = add i32 %1084, 4
  %1086 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1075)  ; LegacyF32ToF16(value)
  %1087 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1043)  ; LegacyF32ToF16(value)
  %1088 = shl i32 %1087, 16
  %1089 = or i32 %1088, %1086
  %1090 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1090, i32 %1085, i32 undef, i32 %1089, i32 %1089, i32 %1089, i32 %1089, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1091 = add i32 %1084, 5
  %1092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1092, i32 %1091, i32 undef, i32 %1078, i32 %1078, i32 %1078, i32 %1078, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1093 = add i32 %1084, 6
  %1094 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1094, i32 %1093, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1095 = add i32 %1084, 7
  %1096 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1096, i32 %1095, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1097

; <label>:1097                                    ; preds = %1083, %1079, %1074
  %1098 = fadd fast float %1043, %135
  br i1 %476, label %1129, label %1099

; <label>:1099                                    ; preds = %1097
  %1100 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1101 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1100, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1102 = add i32 %1101, 21
  %1103 = icmp ult i32 %1102, %137
  br i1 %1103, label %1104, label %1129

; <label>:1104                                    ; preds = %1099
  br label %1105

; <label>:1105                                    ; preds = %1105, %1104
  %1106 = phi i32 [ %1124, %1105 ], [ %1101, %1104 ]
  %1107 = phi float [ %1125, %1105 ], [ 0x3FA99999A0000000, %1104 ]
  %1108 = phi i32 [ %1126, %1105 ], [ 290, %1104 ]
  %1109 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1108
  %1110 = load i32, i32* %1109, align 4, !tbaa !50, !noalias !105
  %1111 = shl i32 %1106, 2
  %1112 = add i32 %1111, 4
  %1113 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1107)  ; LegacyF32ToF16(value)
  %1114 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1098)  ; LegacyF32ToF16(value)
  %1115 = shl i32 %1114, 16
  %1116 = or i32 %1115, %1113
  %1117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1117, i32 %1112, i32 undef, i32 %1116, i32 %1116, i32 %1116, i32 %1116, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1118 = add i32 %1111, 5
  %1119 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1119, i32 %1118, i32 undef, i32 %1110, i32 %1110, i32 %1110, i32 %1110, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1120 = add i32 %1111, 6
  %1121 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1121, i32 %1120, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1122 = add i32 %1111, 7
  %1123 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1123, i32 %1122, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1124 = add nsw i32 %1106, 1
  %1125 = fadd fast float %1107, %134
  %1126 = add nuw nsw i32 %1108, 1
  %1127 = icmp eq i32 %1126, 311
  br i1 %1127, label %1128, label %1105

; <label>:1128                                    ; preds = %1105
  br label %1129

; <label>:1129                                    ; preds = %1128, %1099, %1097
  %1130 = phi float [ 0x3FA99999A0000000, %1099 ], [ 0x3FA99999A0000000, %1097 ], [ %1125, %1128 ]
  br i1 %476, label %1149, label %1131

; <label>:1131                                    ; preds = %1129
  %1132 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1133 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1132, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1134 = icmp ult i32 %1133, %137
  br i1 %1134, label %1135, label %1149

; <label>:1135                                    ; preds = %1131
  %1136 = shl i32 %1133, 2
  %1137 = add i32 %1136, 4
  %1138 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1130)  ; LegacyF32ToF16(value)
  %1139 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1098)  ; LegacyF32ToF16(value)
  %1140 = shl i32 %1139, 16
  %1141 = or i32 %1140, %1138
  %1142 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1142, i32 %1137, i32 undef, i32 %1141, i32 %1141, i32 %1141, i32 %1141, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1143 = add i32 %1136, 5
  %1144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1144, i32 %1143, i32 undef, i32 %443, i32 %443, i32 %443, i32 %443, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1145 = add i32 %1136, 6
  %1146 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1146, i32 %1145, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1147 = add i32 %1136, 7
  %1148 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1148, i32 %1147, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1149

; <label>:1149                                    ; preds = %1135, %1131, %1129
  %1150 = fadd fast float %1098, %135
  br i1 %476, label %1181, label %1151

; <label>:1151                                    ; preds = %1149
  %1152 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1153 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1152, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1154 = add i32 %1153, 21
  %1155 = icmp ult i32 %1154, %137
  br i1 %1155, label %1156, label %1181

; <label>:1156                                    ; preds = %1151
  br label %1157

; <label>:1157                                    ; preds = %1157, %1156
  %1158 = phi i32 [ %1176, %1157 ], [ %1153, %1156 ]
  %1159 = phi float [ %1177, %1157 ], [ 0x3FA99999A0000000, %1156 ]
  %1160 = phi i32 [ %1178, %1157 ], [ 311, %1156 ]
  %1161 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1160
  %1162 = load i32, i32* %1161, align 4, !tbaa !50, !noalias !108
  %1163 = shl i32 %1158, 2
  %1164 = add i32 %1163, 4
  %1165 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1159)  ; LegacyF32ToF16(value)
  %1166 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1150)  ; LegacyF32ToF16(value)
  %1167 = shl i32 %1166, 16
  %1168 = or i32 %1167, %1165
  %1169 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1169, i32 %1164, i32 undef, i32 %1168, i32 %1168, i32 %1168, i32 %1168, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1170 = add i32 %1163, 5
  %1171 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1171, i32 %1170, i32 undef, i32 %1162, i32 %1162, i32 %1162, i32 %1162, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1172 = add i32 %1163, 6
  %1173 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1173, i32 %1172, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1174 = add i32 %1163, 7
  %1175 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1175, i32 %1174, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1176 = add nsw i32 %1158, 1
  %1177 = fadd fast float %1159, %134
  %1178 = add nuw nsw i32 %1160, 1
  %1179 = icmp eq i32 %1178, 332
  br i1 %1179, label %1180, label %1157

; <label>:1180                                    ; preds = %1157
  br label %1181

; <label>:1181                                    ; preds = %1180, %1151, %1149
  %1182 = phi float [ 0x3FA99999A0000000, %1151 ], [ 0x3FA99999A0000000, %1149 ], [ %1177, %1180 ]
  %1183 = icmp ult i32 %435, 4096
  %1184 = select i1 %1183, float 5.000000e-01, float 1.000000e+00
  %1185 = select i1 %1183, float 7.500000e-01, float 0.000000e+00
  %1186 = select i1 %1183, float 5.000000e-01, float 0.000000e+00
  br i1 %476, label %1220, label %1187

; <label>:1187                                    ; preds = %1181
  %1188 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1189 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1188, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1190 = icmp ult i32 %1189, %137
  br i1 %1190, label %1191, label %1220

; <label>:1191                                    ; preds = %1187
  %1192 = shl i32 %1189, 2
  %1193 = add i32 %1192, 4
  %1194 = call float @dx.op.unary.f32(i32 7, float %1184)  ; Saturate(value)
  %1195 = call float @dx.op.unary.f32(i32 7, float %1185)  ; Saturate(value)
  %1196 = call float @dx.op.unary.f32(i32 7, float %1186)  ; Saturate(value)
  %1197 = fmul fast float %1194, 2.550000e+02
  %1198 = fmul fast float %1195, 2.550000e+02
  %1199 = fmul fast float %1196, 2.550000e+02
  %1200 = fptoui float %1197 to i32
  %1201 = fptoui float %1198 to i32
  %1202 = fptoui float %1199 to i32
  %1203 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1182)  ; LegacyF32ToF16(value)
  %1204 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1150)  ; LegacyF32ToF16(value)
  %1205 = shl i32 %1204, 16
  %1206 = or i32 %1205, %1203
  %1207 = shl i32 %1202, 24
  %1208 = shl i32 %1201, 16
  %1209 = shl i32 %1200, 8
  %1210 = or i32 %1209, %1208
  %1211 = or i32 %1210, %1207
  %1212 = or i32 %1211, 3
  %1213 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1213, i32 %1193, i32 undef, i32 %1206, i32 %1206, i32 %1206, i32 %1206, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1214 = add i32 %1192, 5
  %1215 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1215, i32 %1214, i32 undef, i32 %435, i32 %435, i32 %435, i32 %435, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1216 = add i32 %1192, 6
  %1217 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1217, i32 %1216, i32 undef, i32 %1212, i32 %1212, i32 %1212, i32 %1212, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1218 = add i32 %1192, 7
  %1219 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1219, i32 %1218, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1220

; <label>:1220                                    ; preds = %1191, %1187, %1181
  %1221 = fadd fast float %1150, %135
  br i1 %476, label %1252, label %1222

; <label>:1222                                    ; preds = %1220
  %1223 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1224 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1223, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1225 = add i32 %1224, 21
  %1226 = icmp ult i32 %1225, %137
  br i1 %1226, label %1227, label %1252

; <label>:1227                                    ; preds = %1222
  br label %1228

; <label>:1228                                    ; preds = %1228, %1227
  %1229 = phi i32 [ %1247, %1228 ], [ %1224, %1227 ]
  %1230 = phi float [ %1248, %1228 ], [ 0x3FA99999A0000000, %1227 ]
  %1231 = phi i32 [ %1249, %1228 ], [ 332, %1227 ]
  %1232 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1231
  %1233 = load i32, i32* %1232, align 4, !tbaa !50, !noalias !111
  %1234 = shl i32 %1229, 2
  %1235 = add i32 %1234, 4
  %1236 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1230)  ; LegacyF32ToF16(value)
  %1237 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1221)  ; LegacyF32ToF16(value)
  %1238 = shl i32 %1237, 16
  %1239 = or i32 %1238, %1236
  %1240 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1240, i32 %1235, i32 undef, i32 %1239, i32 %1239, i32 %1239, i32 %1239, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1241 = add i32 %1234, 5
  %1242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1242, i32 %1241, i32 undef, i32 %1233, i32 %1233, i32 %1233, i32 %1233, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1243 = add i32 %1234, 6
  %1244 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1244, i32 %1243, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1245 = add i32 %1234, 7
  %1246 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1246, i32 %1245, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1247 = add nsw i32 %1229, 1
  %1248 = fadd fast float %1230, %134
  %1249 = add nuw nsw i32 %1231, 1
  %1250 = icmp eq i32 %1249, 353
  br i1 %1250, label %1251, label %1228

; <label>:1251                                    ; preds = %1228
  br label %1252

; <label>:1252                                    ; preds = %1251, %1222, %1220
  %1253 = phi float [ 0x3FA99999A0000000, %1222 ], [ 0x3FA99999A0000000, %1220 ], [ %1248, %1251 ]
  br i1 %476, label %1272, label %1254

; <label>:1254                                    ; preds = %1252
  %1255 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1256 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1255, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1257 = icmp ult i32 %1256, %137
  br i1 %1257, label %1258, label %1272

; <label>:1258                                    ; preds = %1254
  %1259 = shl i32 %1256, 2
  %1260 = add i32 %1259, 4
  %1261 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1253)  ; LegacyF32ToF16(value)
  %1262 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1221)  ; LegacyF32ToF16(value)
  %1263 = shl i32 %1262, 16
  %1264 = or i32 %1263, %1261
  %1265 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1265, i32 %1260, i32 undef, i32 %1264, i32 %1264, i32 %1264, i32 %1264, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1266 = add i32 %1259, 5
  %1267 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1267, i32 %1266, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1268 = add i32 %1259, 6
  %1269 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1269, i32 %1268, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1270 = add i32 %1259, 7
  %1271 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1271, i32 %1270, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1272

; <label>:1272                                    ; preds = %1258, %1254, %1252
  %1273 = fadd fast float %1221, %135
  br i1 %476, label %1304, label %1274

; <label>:1274                                    ; preds = %1272
  %1275 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1276 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1275, i32 0, i32 2, i32 undef, i32 undef, i32 66)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1277 = add i32 %1276, 66
  %1278 = icmp ult i32 %1277, %137
  br i1 %1278, label %1279, label %1304

; <label>:1279                                    ; preds = %1274
  br label %1280

; <label>:1280                                    ; preds = %1280, %1279
  %1281 = phi i32 [ %1299, %1280 ], [ %1276, %1279 ]
  %1282 = phi float [ %1300, %1280 ], [ 0x3FA99999A0000000, %1279 ]
  %1283 = phi i32 [ %1301, %1280 ], [ 353, %1279 ]
  %1284 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %1283
  %1285 = load i32, i32* %1284, align 4, !tbaa !50, !noalias !114
  %1286 = shl i32 %1281, 2
  %1287 = add i32 %1286, 4
  %1288 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1282)  ; LegacyF32ToF16(value)
  %1289 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1273)  ; LegacyF32ToF16(value)
  %1290 = shl i32 %1289, 16
  %1291 = or i32 %1290, %1288
  %1292 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1292, i32 %1287, i32 undef, i32 %1291, i32 %1291, i32 %1291, i32 %1291, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1293 = add i32 %1286, 5
  %1294 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1294, i32 %1293, i32 undef, i32 %1285, i32 %1285, i32 %1285, i32 %1285, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1295 = add i32 %1286, 6
  %1296 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1296, i32 %1295, i32 undef, i32 -943473408, i32 -943473408, i32 -943473408, i32 -943473408, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1297 = add i32 %1286, 7
  %1298 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1298, i32 %1297, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1299 = add nsw i32 %1281, 1
  %1300 = fadd fast float %1282, %134
  %1301 = add nuw nsw i32 %1283, 1
  %1302 = icmp eq i32 %1301, 419
  br i1 %1302, label %1303, label %1280

; <label>:1303                                    ; preds = %1280
  br label %1304

; <label>:1304                                    ; preds = %1303, %1274, %1272
  %1305 = fadd fast float %387, 5.000000e+00
  %1306 = fadd fast float %387, -5.000000e+00
  %1307 = icmp eq i32 %138, 0
  br i1 %1307, label %1313, label %1308

; <label>:1308                                    ; preds = %1304
  %1309 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1310 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1309, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1311 = add i32 %1310, 1
  %1312 = icmp ult i32 %1311, %138
  br label %1313

; <label>:1313                                    ; preds = %1308, %1304
  %1314 = phi i32 [ %1310, %1308 ], [ 0, %1304 ]
  %1315 = phi i1 [ %1312, %1308 ], [ false, %1304 ]
  br i1 %1315, label %1316, label %1340

; <label>:1316                                    ; preds = %1313
  %1317 = shl i32 %137, 2
  %1318 = add i32 %1317, 4
  %1319 = shl i32 %1314, 3
  %1320 = add i32 %1318, %1319
  %1321 = bitcast float %1306 to i32
  %1322 = bitcast float %391 to i32
  %1323 = bitcast float %395 to i32
  %1324 = bitcast float %1305 to i32
  %1325 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1325, i32 %1320, i32 undef, i32 %1321, i32 %1321, i32 %1321, i32 %1321, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1326 = or i32 %1320, 1
  %1327 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1327, i32 %1326, i32 undef, i32 %1322, i32 %1322, i32 %1322, i32 %1322, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1328 = or i32 %1320, 2
  %1329 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1329, i32 %1328, i32 undef, i32 %1323, i32 %1323, i32 %1323, i32 %1323, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1330 = or i32 %1320, 3
  %1331 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1331, i32 %1330, i32 undef, i32 -65281, i32 -65281, i32 -65281, i32 -65281, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1332 = add i32 %1320, 4
  %1333 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1333, i32 %1332, i32 undef, i32 %1324, i32 %1324, i32 %1324, i32 %1324, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1334 = add i32 %1320, 5
  %1335 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1335, i32 %1334, i32 undef, i32 %1322, i32 %1322, i32 %1322, i32 %1322, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1336 = add i32 %1320, 6
  %1337 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1337, i32 %1336, i32 undef, i32 %1323, i32 %1323, i32 %1323, i32 %1323, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1338 = add i32 %1320, 7
  %1339 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1339, i32 %1338, i32 undef, i32 -16908034, i32 -16908034, i32 -16908034, i32 -16908034, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1340

; <label>:1340                                    ; preds = %1316, %1313
  %1341 = fadd fast float %391, 5.000000e+00
  %1342 = fadd fast float %391, -5.000000e+00
  br i1 %1307, label %1348, label %1343

; <label>:1343                                    ; preds = %1340
  %1344 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1345 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1344, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1346 = add i32 %1345, 1
  %1347 = icmp ult i32 %1346, %138
  br label %1348

; <label>:1348                                    ; preds = %1343, %1340
  %1349 = phi i32 [ %1345, %1343 ], [ 0, %1340 ]
  %1350 = phi i1 [ %1347, %1343 ], [ false, %1340 ]
  br i1 %1350, label %1351, label %1375

; <label>:1351                                    ; preds = %1348
  %1352 = shl i32 %137, 2
  %1353 = add i32 %1352, 4
  %1354 = shl i32 %1349, 3
  %1355 = add i32 %1353, %1354
  %1356 = bitcast float %387 to i32
  %1357 = bitcast float %1342 to i32
  %1358 = bitcast float %395 to i32
  %1359 = bitcast float %1341 to i32
  %1360 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1360, i32 %1355, i32 undef, i32 %1356, i32 %1356, i32 %1356, i32 %1356, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1361 = or i32 %1355, 1
  %1362 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1362, i32 %1361, i32 undef, i32 %1357, i32 %1357, i32 %1357, i32 %1357, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1363 = or i32 %1355, 2
  %1364 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1364, i32 %1363, i32 undef, i32 %1358, i32 %1358, i32 %1358, i32 %1358, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1365 = or i32 %1355, 3
  %1366 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1366, i32 %1365, i32 undef, i32 -65281, i32 -65281, i32 -65281, i32 -65281, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1367 = add i32 %1355, 4
  %1368 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1368, i32 %1367, i32 undef, i32 %1356, i32 %1356, i32 %1356, i32 %1356, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1369 = add i32 %1355, 5
  %1370 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1370, i32 %1369, i32 undef, i32 %1359, i32 %1359, i32 %1359, i32 %1359, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1371 = add i32 %1355, 6
  %1372 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1372, i32 %1371, i32 undef, i32 %1358, i32 %1358, i32 %1358, i32 %1358, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1373 = add i32 %1355, 7
  %1374 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1374, i32 %1373, i32 undef, i32 -16908034, i32 -16908034, i32 -16908034, i32 -16908034, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1375

; <label>:1375                                    ; preds = %1351, %1348
  %1376 = fadd fast float %395, 5.000000e+00
  %1377 = fadd fast float %395, -5.000000e+00
  br i1 %1307, label %1383, label %1378

; <label>:1378                                    ; preds = %1375
  %1379 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %1380 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1379, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1381 = add i32 %1380, 1
  %1382 = icmp ult i32 %1381, %138
  br label %1383

; <label>:1383                                    ; preds = %1378, %1375
  %1384 = phi i32 [ %1380, %1378 ], [ 0, %1375 ]
  %1385 = phi i1 [ %1382, %1378 ], [ false, %1375 ]
  br i1 %1385, label %1386, label %1410

; <label>:1386                                    ; preds = %1383
  %1387 = shl i32 %137, 2
  %1388 = add i32 %1387, 4
  %1389 = shl i32 %1384, 3
  %1390 = add i32 %1388, %1389
  %1391 = bitcast float %387 to i32
  %1392 = bitcast float %391 to i32
  %1393 = bitcast float %1377 to i32
  %1394 = bitcast float %1376 to i32
  %1395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1395, i32 %1390, i32 undef, i32 %1391, i32 %1391, i32 %1391, i32 %1391, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1396 = or i32 %1390, 1
  %1397 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1397, i32 %1396, i32 undef, i32 %1392, i32 %1392, i32 %1392, i32 %1392, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1398 = or i32 %1390, 2
  %1399 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1399, i32 %1398, i32 undef, i32 %1393, i32 %1393, i32 %1393, i32 %1393, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1400 = or i32 %1390, 3
  %1401 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1401, i32 %1400, i32 undef, i32 -65281, i32 -65281, i32 -65281, i32 -65281, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1402 = add i32 %1390, 4
  %1403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1403, i32 %1402, i32 undef, i32 %1391, i32 %1391, i32 %1391, i32 %1391, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1404 = add i32 %1390, 5
  %1405 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1405, i32 %1404, i32 undef, i32 %1392, i32 %1392, i32 %1392, i32 %1392, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1406 = add i32 %1390, 6
  %1407 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1407, i32 %1406, i32 undef, i32 %1394, i32 %1394, i32 %1394, i32 %1394, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %1408 = add i32 %1390, 7
  %1409 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %1409, i32 %1408, i32 undef, i32 -16908034, i32 -16908034, i32 -16908034, i32 -16908034, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %1410

; <label>:1410                                    ; preds = %1386, %1383, %452
  %1411 = phi float [ 0x3FA99999A0000000, %452 ], [ %1273, %1383 ], [ %1273, %1386 ]
  %1412 = call i32 @dx.op.waveReadLaneFirst.i32(i32 118, i32 %427)  ; WaveReadLaneFirst(value)
  %1413 = icmp eq i32 %1412, %427
  %1414 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1413)  ; WaveAllTrue(cond)
  br i1 %1414, label %1415, label %4575

; <label>:1415                                    ; preds = %1410
  %1416 = shl i32 %1412, 1
  %1417 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1418 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1417, i32 %1416, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1419 = extractvalue %dx.types.ResRet.i32 %1418, 0
  %1420 = and i32 %1419, 65535
  %1421 = lshr i32 %1419, 16
  %1422 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1423 = extractvalue %dx.types.CBufRet.i32 %1422, 0
  %1424 = call i32 @dx.op.binary.i32(i32 40, i32 %1420, i32 %1423)  ; UMin(a,b)
  %1425 = call i32 @dx.op.binary.i32(i32 40, i32 %1421, i32 %1423)  ; UMin(a,b)
  %1426 = or i32 %1416, 1
  %1427 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1417, i32 %1426, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1428 = extractvalue %dx.types.ResRet.i32 %1427, 0
  %1429 = and i32 %1428, 1073741823
  %1430 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1431 = extractvalue %dx.types.CBufRet.i32 %1430, 3
  %1432 = call i32 @dx.op.binary.i32(i32 40, i32 %1425, i32 %1431)  ; UMin(a,b)
  %1433 = icmp eq i32 %1432, 0
  br i1 %1433, label %7728, label %1434

; <label>:1434                                    ; preds = %1415
  br label %1435

; <label>:1435                                    ; preds = %4571, %1434
  %1436 = phi float [ %4572, %4571 ], [ %1411, %1434 ]
  %1437 = phi float [ %4573, %4571 ], [ 0.000000e+00, %1434 ]
  %1438 = phi i32 [ %1447, %4571 ], [ 0, %1434 ]
  %1439 = sub i32 %1424, %1425
  %1440 = add i32 %1439, %1429
  %1441 = add i32 %1440, %1438
  %1442 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1443 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1442, i32 %1441, i32 undef)  ; BufferLoad(srv,index,wot)
  %1444 = extractvalue %dx.types.ResRet.i32 %1443, 0
  %1445 = icmp ugt i32 %1444, 4094
  br i1 %1445, label %7722, label %1446

; <label>:1446                                    ; preds = %1435
  %1447 = add nuw i32 %1438, 1
  %1448 = mul i32 %1444, 6
  %1449 = add i32 %1448, 4
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1451 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1450, i32 %1449, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1452 = extractvalue %dx.types.ResRet.f32 %1451, 0
  %1453 = extractvalue %dx.types.ResRet.f32 %1451, 1
  %1454 = extractvalue %dx.types.ResRet.f32 %1451, 2
  %1455 = extractvalue %dx.types.ResRet.f32 %1451, 3
  %1456 = add i32 %1448, 3
  %1457 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1450, i32 %1456, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1458 = extractvalue %dx.types.ResRet.f32 %1457, 0
  %1459 = extractvalue %dx.types.ResRet.f32 %1457, 1
  %1460 = extractvalue %dx.types.ResRet.f32 %1457, 2
  %1461 = extractvalue %dx.types.ResRet.f32 %1457, 3
  %1462 = add i32 %1448, 2
  %1463 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1450, i32 %1462, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1464 = extractvalue %dx.types.ResRet.f32 %1463, 0
  %1465 = extractvalue %dx.types.ResRet.f32 %1463, 1
  %1466 = extractvalue %dx.types.ResRet.f32 %1463, 2
  %1467 = extractvalue %dx.types.ResRet.f32 %1463, 3
  %1468 = or i32 %1448, 1
  %1469 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1450, i32 %1468, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1470 = extractvalue %dx.types.ResRet.f32 %1469, 0
  %1471 = extractvalue %dx.types.ResRet.f32 %1469, 1
  %1472 = extractvalue %dx.types.ResRet.f32 %1469, 2
  %1473 = extractvalue %dx.types.ResRet.f32 %1469, 3
  %1474 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1450, i32 %1448, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1475 = extractvalue %dx.types.ResRet.f32 %1474, 0
  %1476 = extractvalue %dx.types.ResRet.f32 %1474, 1
  %1477 = extractvalue %dx.types.ResRet.f32 %1474, 2
  %1478 = extractvalue %dx.types.ResRet.f32 %1474, 3
  %1479 = fptosi float %1472 to i32
  %1480 = bitcast float %1467 to i32
  %1481 = and i32 %1480, 196608
  %1482 = bitcast float %1471 to i32
  %1483 = and i32 %1482, 1023
  %1484 = uitofp i32 %1483 to float
  %1485 = lshr i32 %1482, 10
  %1486 = and i32 %1485, 1023
  %1487 = uitofp i32 %1486 to float
  %1488 = lshr i32 %1482, 20
  %1489 = and i32 %1488, 1023
  %1490 = uitofp i32 %1489 to float
  %1491 = fmul fast float %1484, %1470
  %1492 = fmul fast float %1487, %1470
  %1493 = fmul fast float %1490, %1470
  %1494 = bitcast float %1460 to i32
  %1495 = and i32 %1494, 65535
  %1496 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1495)  ; LegacyF16ToF32(value)
  %1497 = bitcast float %1461 to i32
  %1498 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1497)  ; LegacyF16ToF32(value)
  %1499 = lshr i32 %1494, 16
  %1500 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1499)  ; LegacyF16ToF32(value)
  %1501 = fcmp fast oeq float %1473, 0.000000e+00
  %1502 = bitcast float %1455 to i32
  %1503 = and i32 %1502, 1023
  %1504 = uitofp i32 %1503 to float
  %1505 = fmul fast float %1504, 0x3F50040100000000
  %1506 = lshr i32 %1502, 10
  %1507 = and i32 %1506, 1023
  %1508 = uitofp i32 %1507 to float
  %1509 = fmul fast float %1508, 0x3F50040100000000
  %1510 = icmp eq i32 %1481, 131072
  %1511 = lshr i32 %1480, 8
  %1512 = and i32 %453, %1511
  %1513 = icmp eq i32 %1512, 0
  br i1 %1513, label %4571, label %1514

; <label>:1514                                    ; preds = %1446
  %1515 = lshr i32 %1480, 20
  %1516 = and i32 %1515, 255
  %1517 = lshr i32 %1502, 20
  %1518 = add nsw i32 %1517, -1
  %1519 = sitofp i32 %1518 to float
  %1520 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %1521 = extractvalue %dx.types.CBufRet.i32 %1520, 2
  %1522 = icmp eq i32 %1521, 0
  %1523 = select i1 %1522, i32 0, i32 %1516
  %1524 = extractvalue %dx.types.CBufRet.i32 %1520, 1
  %1525 = icmp eq i32 %1524, 0
  %1526 = select i1 %1525, float -1.000000e+00, float %1519
  %1527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %1528 = extractvalue %dx.types.CBufRet.f32 %1527, 0
  %1529 = extractvalue %dx.types.CBufRet.f32 %1527, 1
  %1530 = extractvalue %dx.types.CBufRet.f32 %1527, 2
  %1531 = fsub fast float %387, %1528
  %1532 = fsub fast float %391, %1529
  %1533 = fsub fast float %395, %1530
  %1534 = call float @dx.op.dot3.f32(i32 55, float %1531, float %1532, float %1533, float %1531, float %1532, float %1533)  ; Dot3(ax,ay,az,bx,by,bz)
  %1535 = call float @dx.op.unary.f32(i32 25, float %1534)  ; Rsqrt(value)
  %1536 = fmul fast float %1531, %1535
  %1537 = fmul fast float %1532, %1535
  %1538 = fmul fast float %1533, %1535
  %1539 = fsub fast float -0.000000e+00, %1536
  %1540 = fsub fast float -0.000000e+00, %1537
  %1541 = fsub fast float -0.000000e+00, %1538
  %1542 = fsub fast float %1475, %387
  %1543 = fsub fast float %1476, %391
  %1544 = fsub fast float %1477, %395
  %1545 = call float @dx.op.dot3.f32(i32 55, float %1542, float %1543, float %1544, float %1542, float %1543, float %1544)  ; Dot3(ax,ay,az,bx,by,bz)
  %1546 = call float @dx.op.unary.f32(i32 25, float %1545)  ; Rsqrt(value)
  %1547 = fmul fast float %1546, %1542
  %1548 = fmul fast float %1546, %1543
  %1549 = fmul fast float %1546, %1544
  br i1 %1501, label %1550, label %1557

; <label>:1550                                    ; preds = %1514
  %1551 = fmul fast float %1478, %1478
  %1552 = fmul fast float %1551, %1545
  %1553 = fmul fast float %1552, %1552
  %1554 = fsub fast float 1.000000e+00, %1553
  %1555 = call float @dx.op.unary.f32(i32 7, float %1554)  ; Saturate(value)
  %1556 = fmul fast float %1555, %1555
  br label %1567

; <label>:1557                                    ; preds = %1514
  %1558 = fmul fast float %1542, %1478
  %1559 = fmul fast float %1543, %1478
  %1560 = fmul fast float %1544, %1478
  %1561 = call float @dx.op.dot3.f32(i32 55, float %1558, float %1559, float %1560, float %1558, float %1559, float %1560)  ; Dot3(ax,ay,az,bx,by,bz)
  %1562 = call float @dx.op.unary.f32(i32 7, float %1561)  ; Saturate(value)
  %1563 = fsub fast float 1.000000e+00, %1562
  %1564 = call float @dx.op.unary.f32(i32 23, float %1563)  ; Log(value)
  %1565 = fmul fast float %1564, %1473
  %1566 = call float @dx.op.unary.f32(i32 21, float %1565)  ; Exp(value)
  br label %1567

; <label>:1567                                    ; preds = %1557, %1550
  %1568 = phi float [ %1556, %1550 ], [ %1566, %1557 ]
  br i1 %1510, label %1569, label %1576

; <label>:1569                                    ; preds = %1567
  %1570 = call float @dx.op.dot3.f32(i32 55, float %1547, float %1548, float %1549, float %1464, float %1465, float %1466)  ; Dot3(ax,ay,az,bx,by,bz)
  %1571 = fsub fast float %1570, %1458
  %1572 = fmul fast float %1571, %1459
  %1573 = call float @dx.op.unary.f32(i32 7, float %1572)  ; Saturate(value)
  %1574 = fmul fast float %1573, %1573
  %1575 = fmul fast float %1574, %1568
  br label %1576

; <label>:1576                                    ; preds = %1569, %1567
  %1577 = phi float [ %1575, %1569 ], [ %1568, %1567 ]
  %1578 = fmul fast float %1491, %1577
  %1579 = fmul fast float %1492, %1577
  %1580 = fmul fast float %1493, %1577
  %1581 = fcmp fast ogt float %1577, 0.000000e+00
  br i1 %1581, label %1582, label %4111, !dx.controlflow.hints !117

; <label>:1582                                    ; preds = %1576
  %1583 = fmul fast float %1498, 5.000000e-01
  %1584 = fmul fast float %1583, %1452
  %1585 = fmul fast float %1583, %1453
  %1586 = fmul fast float %1583, %1454
  %1587 = fsub fast float %1542, %1584
  %1588 = fsub fast float %1543, %1585
  %1589 = fsub fast float %1544, %1586
  %1590 = fadd fast float %1584, %1542
  %1591 = fadd fast float %1585, %1543
  %1592 = fadd fast float %1586, %1544
  %1593 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 271)  ; CBufferLoadLegacy(handle,regIndex)
  %1594 = extractvalue %dx.types.CBufRet.f32 %1593, 1
  %1595 = call float @dx.op.binary.f32(i32 35, float %265, float %1594)  ; FMax(a,b)
  %1596 = fcmp fast ogt float %1498, 0.000000e+00
  %1597 = call float @dx.op.dot3.f32(i32 55, float %1587, float %1588, float %1589, float %1587, float %1588, float %1589)  ; Dot3(ax,ay,az,bx,by,bz)
  %1598 = call float @dx.op.unary.f32(i32 25, float %1597)  ; Rsqrt(value)
  br i1 %1596, label %1599, label %1615, !dx.controlflow.hints !118

; <label>:1599                                    ; preds = %1582
  %1600 = call float @dx.op.dot3.f32(i32 55, float %1590, float %1591, float %1592, float %1590, float %1591, float %1592)  ; Dot3(ax,ay,az,bx,by,bz)
  %1601 = call float @dx.op.unary.f32(i32 25, float %1600)  ; Rsqrt(value)
  %1602 = fmul fast float %1601, %1598
  %1603 = call float @dx.op.dot3.f32(i32 55, float %1587, float %1588, float %1589, float %1590, float %1591, float %1592)  ; Dot3(ax,ay,az,bx,by,bz)
  %1604 = fmul fast float %1603, %1602
  %1605 = fmul fast float %1604, 5.000000e-01
  %1606 = fadd fast float %1602, 5.000000e-01
  %1607 = fadd fast float %1606, %1605
  %1608 = fdiv fast float %1602, %1607
  %1609 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1587, float %1588, float %1589)  ; Dot3(ax,ay,az,bx,by,bz)
  %1610 = fmul fast float %1609, %1598
  %1611 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1590, float %1591, float %1592)  ; Dot3(ax,ay,az,bx,by,bz)
  %1612 = fmul fast float %1611, %1601
  %1613 = fadd fast float %1612, %1610
  %1614 = fmul fast float %1613, 5.000000e-01
  br label %1622

; <label>:1615                                    ; preds = %1582
  %1616 = fadd fast float %1597, 1.000000e+00
  %1617 = fdiv fast float 1.000000e+00, %1616
  %1618 = fmul fast float %1598, %1587
  %1619 = fmul fast float %1598, %1588
  %1620 = fmul fast float %1598, %1589
  %1621 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1618, float %1619, float %1620)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %1622

; <label>:1622                                    ; preds = %1615, %1599
  %1623 = phi float [ %1614, %1599 ], [ %1621, %1615 ]
  %1624 = phi float [ %1608, %1599 ], [ %1617, %1615 ]
  %1625 = phi float [ %1604, %1599 ], [ 1.000000e+00, %1615 ]
  %1626 = fcmp fast ogt float %1496, 0.000000e+00
  br i1 %1626, label %1627, label %1640

; <label>:1627                                    ; preds = %1622
  %1628 = fmul fast float %1496, %1496
  %1629 = fmul fast float %1628, %1624
  %1630 = call float @dx.op.unary.f32(i32 7, float %1629)  ; Saturate(value)
  %1631 = call float @dx.op.unary.f32(i32 24, float %1630)  ; Sqrt(value)
  %1632 = fcmp fast olt float %1623, %1631
  br i1 %1632, label %1633, label %1640

; <label>:1633                                    ; preds = %1627
  %1634 = fsub fast float -0.000000e+00, %1631
  %1635 = call float @dx.op.binary.f32(i32 35, float %1623, float %1634)  ; FMax(a,b)
  %1636 = fadd fast float %1635, %1631
  %1637 = fmul fast float %1636, %1636
  %1638 = fmul fast float %1631, 4.000000e+00
  %1639 = fdiv fast float %1637, %1638
  br label %1640

; <label>:1640                                    ; preds = %1633, %1627, %1622
  %1641 = phi float [ %1623, %1622 ], [ %1639, %1633 ], [ %1623, %1627 ]
  %1642 = call float @dx.op.unary.f32(i32 7, float %1641)  ; Saturate(value)
  %1643 = select i1 %1501, float %1624, float 1.000000e+00
  br i1 %1596, label %1644, label %1675

; <label>:1644                                    ; preds = %1640
  %1645 = call float @dx.op.dot3.f32(i32 55, float %1536, float %1537, float %1538, float %220, float %221, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %1646 = fmul fast float %1645, 2.000000e+00
  %1647 = fmul fast float %1646, %220
  %1648 = fmul fast float %1646, %221
  %1649 = fmul fast float %1646, %222
  %1650 = fsub fast float %1536, %1647
  %1651 = fsub fast float %1537, %1648
  %1652 = fsub fast float %1538, %1649
  %1653 = fmul fast float %1498, %1452
  %1654 = fmul fast float %1498, %1453
  %1655 = fmul fast float %1498, %1454
  %1656 = fmul fast float %1498, %1498
  %1657 = call float @dx.op.dot3.f32(i32 55, float %1650, float %1651, float %1652, float %1653, float %1654, float %1655)  ; Dot3(ax,ay,az,bx,by,bz)
  %1658 = fmul fast float %1650, %1657
  %1659 = fmul fast float %1651, %1657
  %1660 = fmul fast float %1652, %1657
  %1661 = fsub fast float %1658, %1653
  %1662 = fsub fast float %1659, %1654
  %1663 = fsub fast float %1660, %1655
  %1664 = call float @dx.op.dot3.f32(i32 55, float %1587, float %1588, float %1589, float %1661, float %1662, float %1663)  ; Dot3(ax,ay,az,bx,by,bz)
  %1665 = fmul fast float %1657, %1657
  %1666 = fsub fast float %1656, %1665
  %1667 = fdiv fast float %1664, %1666
  %1668 = call float @dx.op.unary.f32(i32 7, float %1667)  ; Saturate(value)
  %1669 = fmul fast float %1668, %1653
  %1670 = fmul fast float %1668, %1654
  %1671 = fmul fast float %1668, %1655
  %1672 = fadd fast float %1669, %1587
  %1673 = fadd fast float %1670, %1588
  %1674 = fadd fast float %1671, %1589
  br label %1675

; <label>:1675                                    ; preds = %1644, %1640
  %1676 = phi float [ %1672, %1644 ], [ %1587, %1640 ]
  %1677 = phi float [ %1673, %1644 ], [ %1588, %1640 ]
  %1678 = phi float [ %1674, %1644 ], [ %1589, %1640 ]
  %1679 = call float @dx.op.dot3.f32(i32 55, float %1676, float %1677, float %1678, float %1676, float %1677, float %1678)  ; Dot3(ax,ay,az,bx,by,bz)
  %1680 = call float @dx.op.unary.f32(i32 25, float %1679)  ; Rsqrt(value)
  %1681 = fmul fast float %1680, %1676
  %1682 = fmul fast float %1680, %1677
  %1683 = fmul fast float %1680, %1678
  %1684 = call float @dx.op.binary.f32(i32 35, float %1595, float %1594)  ; FMax(a,b)
  %1685 = fmul fast float %1684, %1684
  %1686 = fmul fast float %1680, %1496
  %1687 = fsub fast float 1.000000e+00, %1685
  %1688 = fmul fast float %1686, %1687
  %1689 = call float @dx.op.unary.f32(i32 7, float %1688)  ; Saturate(value)
  %1690 = fmul fast float %1680, %1500
  %1691 = call float @dx.op.unary.f32(i32 7, float %1690)  ; Saturate(value)
  switch i32 %200, label %3936 [
    i32 1, label %1692
    i32 10, label %1692
    i32 11, label %1692
    i32 2, label %1897
    i32 3, label %2139
    i32 4, label %2370
    i32 5, label %2757
    i32 6, label %3068
    i32 7, label %3300
    i32 8, label %3486
    i32 9, label %3733
  ]

; <label>:1692                                    ; preds = %1675, %1675, %1675
  %1693 = fcmp fast ogt float %1642, 0.000000e+00
  br i1 %1693, label %1694, label %3936, !dx.controlflow.hints !119

; <label>:1694                                    ; preds = %1692
  %1695 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1696 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %1697 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1698 = fmul fast float %1697, 2.000000e+00
  %1699 = fadd fast float %1698, 2.000000e+00
  %1700 = call float @dx.op.unary.f32(i32 25, float %1699)  ; Rsqrt(value)
  %1701 = fadd fast float %1696, %1695
  %1702 = fmul fast float %1700, %1701
  %1703 = call float @dx.op.unary.f32(i32 7, float %1702)  ; Saturate(value)
  %1704 = fmul fast float %1700, %1697
  %1705 = fadd fast float %1704, %1700
  %1706 = call float @dx.op.unary.f32(i32 7, float %1705)  ; Saturate(value)
  %1707 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %1707, label %1708, label %1797

; <label>:1708                                    ; preds = %1694
  %1709 = fmul fast float %1689, %1689
  %1710 = fsub fast float 1.000000e+00, %1709
  %1711 = call float @dx.op.unary.f32(i32 24, float %1710)  ; Sqrt(value)
  %1712 = fmul fast float %1695, 2.000000e+00
  %1713 = fmul fast float %1712, %1696
  %1714 = fsub fast float %1713, %1697
  %1715 = fcmp fast ult float %1714, %1711
  br i1 %1715, label %1718, label %1716

; <label>:1716                                    ; preds = %1708
  %1717 = call float @dx.op.unary.f32(i32 6, float %1696)  ; FAbs(value)
  br label %1797

; <label>:1718                                    ; preds = %1708
  %1719 = fmul fast float %1714, %1714
  %1720 = fsub fast float 1.000000e+00, %1719
  %1721 = call float @dx.op.unary.f32(i32 25, float %1720)  ; Rsqrt(value)
  %1722 = fmul fast float %1721, %1689
  %1723 = fmul fast float %1714, %1695
  %1724 = fsub fast float %1696, %1723
  %1725 = fmul fast float %1722, %1724
  %1726 = fmul fast float %1696, %1696
  %1727 = fmul fast float %1726, 2.000000e+00
  %1728 = fadd fast float %1727, -1.000000e+00
  %1729 = fmul fast float %1714, %1697
  %1730 = fsub fast float %1728, %1729
  %1731 = fmul fast float %1722, %1730
  %1732 = fmul fast float %1695, %1695
  %1733 = fsub fast float 1.000000e+00, %1732
  %1734 = fsub fast float %1733, %1726
  %1735 = fmul fast float %1697, %1697
  %1736 = fsub fast float %1734, %1735
  %1737 = fmul fast float %1713, %1697
  %1738 = fadd fast float %1736, %1737
  %1739 = call float @dx.op.unary.f32(i32 7, float %1738)  ; Saturate(value)
  %1740 = call float @dx.op.unary.f32(i32 24, float %1739)  ; Sqrt(value)
  %1741 = fmul fast float %1740, %1722
  %1742 = fmul fast float %1696, 2.000000e+00
  %1743 = fmul fast float %1742, %1722
  %1744 = fmul fast float %1743, %1740
  %1745 = fmul fast float %1711, %1695
  %1746 = fadd fast float %1745, %1696
  %1747 = fadd fast float %1746, %1725
  %1748 = fmul fast float %1711, %1697
  %1749 = fadd fast float %1748, 1.000000e+00
  %1750 = fadd fast float %1749, %1731
  %1751 = fmul fast float %1741, %1750
  %1752 = fmul fast float %1747, %1750
  %1753 = fmul fast float %1744, %1747
  %1754 = fmul fast float %1751, 5.000000e-01
  %1755 = fmul fast float %1747, 2.500000e-01
  %1756 = fmul fast float %1755, %1744
  %1757 = fsub fast float %1756, %1754
  %1758 = fmul fast float %1757, %1752
  %1759 = fmul fast float %1751, %1751
  %1760 = fmul fast float %1751, 2.000000e+00
  %1761 = fsub fast float %1753, %1760
  %1762 = fmul fast float %1761, %1753
  %1763 = fadd fast float %1762, %1759
  %1764 = fmul fast float %1750, %1750
  %1765 = fmul fast float %1764, %1746
  %1766 = fadd fast float %1750, %1748
  %1767 = fmul fast float %1766, 5.000000e-01
  %1768 = fsub fast float -5.000000e-01, %1767
  %1769 = fmul fast float %1768, %1752
  %1770 = fadd fast float %1769, %1765
  %1771 = fmul fast float %1770, %1747
  %1772 = fadd fast float %1763, %1771
  %1773 = fmul fast float %1758, 2.000000e+00
  %1774 = fmul fast float %1772, %1772
  %1775 = fmul fast float %1758, %1758
  %1776 = fadd fast float %1774, %1775
  %1777 = fdiv fast float %1773, %1776
  %1778 = fmul fast float %1772, %1777
  %1779 = fmul fast float %1758, %1777
  %1780 = fsub fast float 1.000000e+00, %1779
  %1781 = fmul fast float %1780, %1725
  %1782 = fmul fast float %1778, %1741
  %1783 = fmul fast float %1780, %1731
  %1784 = fmul fast float %1778, %1744
  %1785 = fadd fast float %1784, %1748
  %1786 = fadd fast float %1785, %1783
  %1787 = fmul fast float %1786, 2.000000e+00
  %1788 = fadd fast float %1787, 2.000000e+00
  %1789 = call float @dx.op.unary.f32(i32 25, float %1788)  ; Rsqrt(value)
  %1790 = fadd fast float %1746, %1782
  %1791 = fadd fast float %1790, %1781
  %1792 = fmul fast float %1791, %1789
  %1793 = call float @dx.op.unary.f32(i32 7, float %1792)  ; Saturate(value)
  %1794 = fmul fast float %1786, %1789
  %1795 = fadd fast float %1794, %1789
  %1796 = call float @dx.op.unary.f32(i32 7, float %1795)  ; Saturate(value)
  br label %1797

; <label>:1797                                    ; preds = %1718, %1716, %1694
  %1798 = phi float [ %1717, %1716 ], [ %1796, %1718 ], [ %1706, %1694 ]
  %1799 = phi float [ 1.000000e+00, %1716 ], [ %1793, %1718 ], [ %1703, %1694 ]
  %1800 = call float @dx.op.unary.f32(i32 6, float %1696)  ; FAbs(value)
  %1801 = fadd fast float %1800, 0x3EE4F8B580000000
  %1802 = call float @dx.op.unary.f32(i32 7, float %1801)  ; Saturate(value)
  %1803 = fmul fast float %249, 0x3FD45F3060000000
  %1804 = fmul fast float %250, 0x3FD45F3060000000
  %1805 = fmul fast float %251, 0x3FD45F3060000000
  %1806 = fmul fast float %1642, %1643
  %1807 = fmul fast float %1803, %1806
  %1808 = fmul fast float %1804, %1806
  %1809 = fmul fast float %1805, %1806
  %1810 = fmul fast float %1595, %1595
  %1811 = fmul fast float %1810, %1810
  %1812 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %1812, label %1813, label %1820

; <label>:1813                                    ; preds = %1797
  %1814 = fmul fast float %1691, %1691
  %1815 = fmul fast float %1798, 0x400CCCCCC0000000
  %1816 = fadd fast float %1815, 0x3FD99999A0000000
  %1817 = fdiv fast float %1814, %1816
  %1818 = fadd fast float %1817, %1811
  %1819 = call float @dx.op.unary.f32(i32 7, float %1818)  ; Saturate(value)
  br label %1820

; <label>:1820                                    ; preds = %1813, %1797
  %1821 = phi float [ %1819, %1813 ], [ %1811, %1797 ]
  br i1 %1707, label %1822, label %1835

; <label>:1822                                    ; preds = %1820
  %1823 = fmul fast float %1689, 2.500000e-01
  %1824 = bitcast float %1821 to i32
  %1825 = ashr i32 %1824, 1
  %1826 = add nsw i32 %1825, 532487669
  %1827 = bitcast i32 %1826 to float
  %1828 = fmul fast float %1827, 3.000000e+00
  %1829 = fadd fast float %1828, %1689
  %1830 = fmul fast float %1823, %1829
  %1831 = fadd fast float %1798, 0x3F50624DE0000000
  %1832 = fdiv fast float %1830, %1831
  %1833 = fadd fast float %1832, %1821
  %1834 = fdiv fast float %1821, %1833
  br label %1835

; <label>:1835                                    ; preds = %1822, %1820
  %1836 = phi float [ %1833, %1822 ], [ %1821, %1820 ]
  %1837 = phi float [ %1834, %1822 ], [ 1.000000e+00, %1820 ]
  %1838 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %1838, label %1839, label %1858

; <label>:1839                                    ; preds = %1835
  %1840 = fsub fast float 0x3FF00068E0000000, %1625
  %1841 = fadd fast float %1625, 1.000000e+00
  %1842 = fdiv fast float %1840, %1841
  %1843 = call float @dx.op.unary.f32(i32 24, float %1842)  ; Sqrt(value)
  %1844 = fmul fast float %1843, 2.500000e-01
  %1845 = bitcast float %1836 to i32
  %1846 = ashr i32 %1845, 1
  %1847 = add nsw i32 %1846, 532487669
  %1848 = bitcast i32 %1847 to float
  %1849 = fmul fast float %1848, 3.000000e+00
  %1850 = fadd fast float %1843, %1849
  %1851 = fmul fast float %1844, %1850
  %1852 = fadd fast float %1798, 0x3F50624DE0000000
  %1853 = fdiv fast float %1851, %1852
  %1854 = fadd fast float %1853, %1836
  %1855 = fdiv fast float %1836, %1854
  %1856 = call float @dx.op.unary.f32(i32 24, float %1855)  ; Sqrt(value)
  %1857 = fmul fast float %1856, %1837
  br label %1858

; <label>:1858                                    ; preds = %1839, %1835
  %1859 = phi float [ %1857, %1839 ], [ %1837, %1835 ]
  %1860 = fmul fast float %1821, %1799
  %1861 = fsub fast float %1860, %1799
  %1862 = fmul fast float %1861, %1799
  %1863 = fadd fast float %1862, 1.000000e+00
  %1864 = fmul fast float %1863, %1863
  %1865 = fmul fast float %1864, 0x400921FB60000000
  %1866 = fdiv fast float %1821, %1865
  %1867 = fmul fast float %1866, %1859
  %1868 = call float @dx.op.unary.f32(i32 24, float %1821)  ; Sqrt(value)
  %1869 = fsub fast float 1.000000e+00, %1868
  %1870 = fmul fast float %1869, %1802
  %1871 = fadd fast float %1870, %1868
  %1872 = fmul fast float %1871, %1642
  %1873 = fmul fast float %1869, %1642
  %1874 = fadd fast float %1873, %1868
  %1875 = fmul fast float %1874, %1802
  %1876 = fadd fast float %1872, %1875
  %1877 = fdiv fast float 5.000000e-01, %1876
  %1878 = fsub fast float 1.000000e+00, %1798
  %1879 = fmul fast float %1878, %1878
  %1880 = fmul fast float %1879, %1879
  %1881 = fmul fast float %1880, %1878
  %1882 = fmul fast float %261, 5.000000e+01
  %1883 = call float @dx.op.unary.f32(i32 7, float %1882)  ; Saturate(value)
  %1884 = fmul fast float %1883, %1881
  %1885 = fsub fast float 1.000000e+00, %1881
  %1886 = fmul fast float %1885, %260
  %1887 = fmul fast float %1885, %261
  %1888 = fmul fast float %1885, %262
  %1889 = fadd fast float %1884, %1886
  %1890 = fadd fast float %1884, %1887
  %1891 = fadd fast float %1884, %1888
  %1892 = fmul fast float %1867, %1877
  %1893 = fmul fast float %1892, %1806
  %1894 = fmul fast float %1893, %1889
  %1895 = fmul fast float %1893, %1890
  %1896 = fmul fast float %1893, %1891
  br label %3936

; <label>:1897                                    ; preds = %1675
  %1898 = fcmp fast ogt float %1642, 0.000000e+00
  %1899 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1898, label %1900, label %2102, !dx.controlflow.hints !119

; <label>:1900                                    ; preds = %1897
  %1901 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %1902 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1903 = fmul fast float %1902, 2.000000e+00
  %1904 = fadd fast float %1903, 2.000000e+00
  %1905 = call float @dx.op.unary.f32(i32 25, float %1904)  ; Rsqrt(value)
  %1906 = fadd fast float %1901, %1899
  %1907 = fmul fast float %1905, %1906
  %1908 = call float @dx.op.unary.f32(i32 7, float %1907)  ; Saturate(value)
  %1909 = fmul fast float %1905, %1902
  %1910 = fadd fast float %1909, %1905
  %1911 = call float @dx.op.unary.f32(i32 7, float %1910)  ; Saturate(value)
  %1912 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %1912, label %1913, label %2002

; <label>:1913                                    ; preds = %1900
  %1914 = fmul fast float %1689, %1689
  %1915 = fsub fast float 1.000000e+00, %1914
  %1916 = call float @dx.op.unary.f32(i32 24, float %1915)  ; Sqrt(value)
  %1917 = fmul fast float %1899, 2.000000e+00
  %1918 = fmul fast float %1917, %1901
  %1919 = fsub fast float %1918, %1902
  %1920 = fcmp fast ult float %1919, %1916
  br i1 %1920, label %1923, label %1921

; <label>:1921                                    ; preds = %1913
  %1922 = call float @dx.op.unary.f32(i32 6, float %1901)  ; FAbs(value)
  br label %2002

; <label>:1923                                    ; preds = %1913
  %1924 = fmul fast float %1919, %1919
  %1925 = fsub fast float 1.000000e+00, %1924
  %1926 = call float @dx.op.unary.f32(i32 25, float %1925)  ; Rsqrt(value)
  %1927 = fmul fast float %1926, %1689
  %1928 = fmul fast float %1919, %1899
  %1929 = fsub fast float %1901, %1928
  %1930 = fmul fast float %1927, %1929
  %1931 = fmul fast float %1901, %1901
  %1932 = fmul fast float %1931, 2.000000e+00
  %1933 = fadd fast float %1932, -1.000000e+00
  %1934 = fmul fast float %1919, %1902
  %1935 = fsub fast float %1933, %1934
  %1936 = fmul fast float %1927, %1935
  %1937 = fmul fast float %1899, %1899
  %1938 = fsub fast float 1.000000e+00, %1937
  %1939 = fsub fast float %1938, %1931
  %1940 = fmul fast float %1902, %1902
  %1941 = fsub fast float %1939, %1940
  %1942 = fmul fast float %1918, %1902
  %1943 = fadd fast float %1941, %1942
  %1944 = call float @dx.op.unary.f32(i32 7, float %1943)  ; Saturate(value)
  %1945 = call float @dx.op.unary.f32(i32 24, float %1944)  ; Sqrt(value)
  %1946 = fmul fast float %1945, %1927
  %1947 = fmul fast float %1901, 2.000000e+00
  %1948 = fmul fast float %1947, %1927
  %1949 = fmul fast float %1948, %1945
  %1950 = fmul fast float %1916, %1899
  %1951 = fadd fast float %1950, %1901
  %1952 = fadd fast float %1951, %1930
  %1953 = fmul fast float %1916, %1902
  %1954 = fadd fast float %1953, 1.000000e+00
  %1955 = fadd fast float %1954, %1936
  %1956 = fmul fast float %1946, %1955
  %1957 = fmul fast float %1952, %1955
  %1958 = fmul fast float %1949, %1952
  %1959 = fmul fast float %1956, 5.000000e-01
  %1960 = fmul fast float %1952, 2.500000e-01
  %1961 = fmul fast float %1960, %1949
  %1962 = fsub fast float %1961, %1959
  %1963 = fmul fast float %1962, %1957
  %1964 = fmul fast float %1956, %1956
  %1965 = fmul fast float %1956, 2.000000e+00
  %1966 = fsub fast float %1958, %1965
  %1967 = fmul fast float %1966, %1958
  %1968 = fadd fast float %1967, %1964
  %1969 = fmul fast float %1955, %1955
  %1970 = fmul fast float %1969, %1951
  %1971 = fadd fast float %1955, %1953
  %1972 = fmul fast float %1971, 5.000000e-01
  %1973 = fsub fast float -5.000000e-01, %1972
  %1974 = fmul fast float %1973, %1957
  %1975 = fadd fast float %1974, %1970
  %1976 = fmul fast float %1975, %1952
  %1977 = fadd fast float %1968, %1976
  %1978 = fmul fast float %1963, 2.000000e+00
  %1979 = fmul fast float %1977, %1977
  %1980 = fmul fast float %1963, %1963
  %1981 = fadd fast float %1979, %1980
  %1982 = fdiv fast float %1978, %1981
  %1983 = fmul fast float %1977, %1982
  %1984 = fmul fast float %1963, %1982
  %1985 = fsub fast float 1.000000e+00, %1984
  %1986 = fmul fast float %1985, %1930
  %1987 = fmul fast float %1983, %1946
  %1988 = fmul fast float %1985, %1936
  %1989 = fmul fast float %1983, %1949
  %1990 = fadd fast float %1989, %1953
  %1991 = fadd fast float %1990, %1988
  %1992 = fmul fast float %1991, 2.000000e+00
  %1993 = fadd fast float %1992, 2.000000e+00
  %1994 = call float @dx.op.unary.f32(i32 25, float %1993)  ; Rsqrt(value)
  %1995 = fadd fast float %1951, %1987
  %1996 = fadd fast float %1995, %1986
  %1997 = fmul fast float %1996, %1994
  %1998 = call float @dx.op.unary.f32(i32 7, float %1997)  ; Saturate(value)
  %1999 = fmul fast float %1991, %1994
  %2000 = fadd fast float %1999, %1994
  %2001 = call float @dx.op.unary.f32(i32 7, float %2000)  ; Saturate(value)
  br label %2002

; <label>:2002                                    ; preds = %1923, %1921, %1900
  %2003 = phi float [ %1922, %1921 ], [ %2001, %1923 ], [ %1911, %1900 ]
  %2004 = phi float [ 1.000000e+00, %1921 ], [ %1998, %1923 ], [ %1908, %1900 ]
  %2005 = call float @dx.op.unary.f32(i32 6, float %1901)  ; FAbs(value)
  %2006 = fadd fast float %2005, 0x3EE4F8B580000000
  %2007 = call float @dx.op.unary.f32(i32 7, float %2006)  ; Saturate(value)
  %2008 = fmul fast float %249, 0x3FD45F3060000000
  %2009 = fmul fast float %250, 0x3FD45F3060000000
  %2010 = fmul fast float %251, 0x3FD45F3060000000
  %2011 = fmul fast float %1642, %1643
  %2012 = fmul fast float %2008, %2011
  %2013 = fmul fast float %2009, %2011
  %2014 = fmul fast float %2010, %2011
  %2015 = fmul fast float %1595, %1595
  %2016 = fmul fast float %2015, %2015
  %2017 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %2017, label %2018, label %2025

; <label>:2018                                    ; preds = %2002
  %2019 = fmul fast float %1691, %1691
  %2020 = fmul fast float %2003, 0x400CCCCCC0000000
  %2021 = fadd fast float %2020, 0x3FD99999A0000000
  %2022 = fdiv fast float %2019, %2021
  %2023 = fadd fast float %2022, %2016
  %2024 = call float @dx.op.unary.f32(i32 7, float %2023)  ; Saturate(value)
  br label %2025

; <label>:2025                                    ; preds = %2018, %2002
  %2026 = phi float [ %2024, %2018 ], [ %2016, %2002 ]
  br i1 %1912, label %2027, label %2040

; <label>:2027                                    ; preds = %2025
  %2028 = fmul fast float %1689, 2.500000e-01
  %2029 = bitcast float %2026 to i32
  %2030 = ashr i32 %2029, 1
  %2031 = add nsw i32 %2030, 532487669
  %2032 = bitcast i32 %2031 to float
  %2033 = fmul fast float %2032, 3.000000e+00
  %2034 = fadd fast float %2033, %1689
  %2035 = fmul fast float %2028, %2034
  %2036 = fadd fast float %2003, 0x3F50624DE0000000
  %2037 = fdiv fast float %2035, %2036
  %2038 = fadd fast float %2037, %2026
  %2039 = fdiv fast float %2026, %2038
  br label %2040

; <label>:2040                                    ; preds = %2027, %2025
  %2041 = phi float [ %2038, %2027 ], [ %2026, %2025 ]
  %2042 = phi float [ %2039, %2027 ], [ 1.000000e+00, %2025 ]
  %2043 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %2043, label %2044, label %2063

; <label>:2044                                    ; preds = %2040
  %2045 = fsub fast float 0x3FF00068E0000000, %1625
  %2046 = fadd fast float %1625, 1.000000e+00
  %2047 = fdiv fast float %2045, %2046
  %2048 = call float @dx.op.unary.f32(i32 24, float %2047)  ; Sqrt(value)
  %2049 = fmul fast float %2048, 2.500000e-01
  %2050 = bitcast float %2041 to i32
  %2051 = ashr i32 %2050, 1
  %2052 = add nsw i32 %2051, 532487669
  %2053 = bitcast i32 %2052 to float
  %2054 = fmul fast float %2053, 3.000000e+00
  %2055 = fadd fast float %2048, %2054
  %2056 = fmul fast float %2049, %2055
  %2057 = fadd fast float %2003, 0x3F50624DE0000000
  %2058 = fdiv fast float %2056, %2057
  %2059 = fadd fast float %2058, %2041
  %2060 = fdiv fast float %2041, %2059
  %2061 = call float @dx.op.unary.f32(i32 24, float %2060)  ; Sqrt(value)
  %2062 = fmul fast float %2061, %2042
  br label %2063

; <label>:2063                                    ; preds = %2044, %2040
  %2064 = phi float [ %2062, %2044 ], [ %2042, %2040 ]
  %2065 = fmul fast float %2026, %2004
  %2066 = fsub fast float %2065, %2004
  %2067 = fmul fast float %2066, %2004
  %2068 = fadd fast float %2067, 1.000000e+00
  %2069 = fmul fast float %2068, %2068
  %2070 = fmul fast float %2069, 0x400921FB60000000
  %2071 = fdiv fast float %2026, %2070
  %2072 = fmul fast float %2071, %2064
  %2073 = call float @dx.op.unary.f32(i32 24, float %2026)  ; Sqrt(value)
  %2074 = fsub fast float 1.000000e+00, %2073
  %2075 = fmul fast float %2074, %2007
  %2076 = fadd fast float %2075, %2073
  %2077 = fmul fast float %2076, %1642
  %2078 = fmul fast float %2074, %1642
  %2079 = fadd fast float %2078, %2073
  %2080 = fmul fast float %2079, %2007
  %2081 = fadd fast float %2077, %2080
  %2082 = fdiv fast float 5.000000e-01, %2081
  %2083 = fsub fast float 1.000000e+00, %2003
  %2084 = fmul fast float %2083, %2083
  %2085 = fmul fast float %2084, %2084
  %2086 = fmul fast float %2085, %2083
  %2087 = fmul fast float %261, 5.000000e+01
  %2088 = call float @dx.op.unary.f32(i32 7, float %2087)  ; Saturate(value)
  %2089 = fmul fast float %2088, %2086
  %2090 = fsub fast float 1.000000e+00, %2086
  %2091 = fmul fast float %2090, %260
  %2092 = fmul fast float %2090, %261
  %2093 = fmul fast float %2090, %262
  %2094 = fadd fast float %2089, %2091
  %2095 = fadd fast float %2089, %2092
  %2096 = fadd fast float %2089, %2093
  %2097 = fmul fast float %2072, %2082
  %2098 = fmul fast float %2097, %2011
  %2099 = fmul fast float %2098, %2094
  %2100 = fmul fast float %2098, %2095
  %2101 = fmul fast float %2098, %2096
  br label %2102

; <label>:2102                                    ; preds = %2063, %1897
  %2103 = phi float [ %2099, %2063 ], [ 0.000000e+00, %1897 ]
  %2104 = phi float [ %2100, %2063 ], [ 0.000000e+00, %1897 ]
  %2105 = phi float [ %2101, %2063 ], [ 0.000000e+00, %1897 ]
  %2106 = phi float [ %2012, %2063 ], [ 0.000000e+00, %1897 ]
  %2107 = phi float [ %2013, %2063 ], [ 0.000000e+00, %1897 ]
  %2108 = phi float [ %2014, %2063 ], [ 0.000000e+00, %1897 ]
  %2109 = fmul fast float %214, %214
  %2110 = fmul fast float %215, %215
  %2111 = fmul fast float %216, %216
  %2112 = call float @dx.op.dot3.f32(i32 55, float %1681, float %1682, float %1683, float %1536, float %1537, float %1538)  ; Dot3(ax,ay,az,bx,by,bz)
  %2113 = call float @dx.op.unary.f32(i32 7, float %2112)  ; Saturate(value)
  %2114 = call float @dx.op.unary.f32(i32 23, float %2113)  ; Log(value)
  %2115 = fmul fast float %2114, 1.200000e+01
  %2116 = call float @dx.op.unary.f32(i32 21, float %2115)  ; Exp(value)
  %2117 = fmul fast float %217, 0x4007333340000000
  %2118 = fsub fast float 3.000000e+00, %2117
  %2119 = fmul fast float %2116, %2118
  %2120 = fmul fast float %1899, 0x3FE5555560000000
  %2121 = fadd fast float %2120, 0x3FD5555560000000
  %2122 = call float @dx.op.unary.f32(i32 7, float %2121)  ; Saturate(value)
  %2123 = call float @dx.op.unary.f32(i32 23, float %2122)  ; Log(value)
  %2124 = fmul fast float %2123, 1.500000e+00
  %2125 = call float @dx.op.unary.f32(i32 21, float %2124)  ; Exp(value)
  %2126 = fmul fast float %2125, 0x3FFAAAAAA0000000
  %2127 = fadd fast float %2126, -1.000000e+00
  %2128 = fmul fast float %2127, %217
  %2129 = fadd fast float %2128, 1.000000e+00
  %2130 = fmul fast float %190, 0x3FC45F3060000000
  %2131 = fmul fast float %2130, %2129
  %2132 = fsub fast float 1.000000e+00, %2131
  %2133 = fmul fast float %2119, %2132
  %2134 = fadd fast float %2133, %2131
  %2135 = fmul fast float %2134, %1643
  %2136 = fmul fast float %2109, %2135
  %2137 = fmul fast float %2110, %2135
  %2138 = fmul fast float %2111, %2135
  br label %3936

; <label>:2139                                    ; preds = %1675
  %2140 = fcmp fast ogt float %1642, 0.000000e+00
  %2141 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %2140, label %2142, label %2344, !dx.controlflow.hints !119

; <label>:2142                                    ; preds = %2139
  %2143 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %2144 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %2145 = fmul fast float %2144, 2.000000e+00
  %2146 = fadd fast float %2145, 2.000000e+00
  %2147 = call float @dx.op.unary.f32(i32 25, float %2146)  ; Rsqrt(value)
  %2148 = fadd fast float %2143, %2141
  %2149 = fmul fast float %2147, %2148
  %2150 = call float @dx.op.unary.f32(i32 7, float %2149)  ; Saturate(value)
  %2151 = fmul fast float %2147, %2144
  %2152 = fadd fast float %2151, %2147
  %2153 = call float @dx.op.unary.f32(i32 7, float %2152)  ; Saturate(value)
  %2154 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %2154, label %2155, label %2244

; <label>:2155                                    ; preds = %2142
  %2156 = fmul fast float %1689, %1689
  %2157 = fsub fast float 1.000000e+00, %2156
  %2158 = call float @dx.op.unary.f32(i32 24, float %2157)  ; Sqrt(value)
  %2159 = fmul fast float %2141, 2.000000e+00
  %2160 = fmul fast float %2159, %2143
  %2161 = fsub fast float %2160, %2144
  %2162 = fcmp fast ult float %2161, %2158
  br i1 %2162, label %2165, label %2163

; <label>:2163                                    ; preds = %2155
  %2164 = call float @dx.op.unary.f32(i32 6, float %2143)  ; FAbs(value)
  br label %2244

; <label>:2165                                    ; preds = %2155
  %2166 = fmul fast float %2161, %2161
  %2167 = fsub fast float 1.000000e+00, %2166
  %2168 = call float @dx.op.unary.f32(i32 25, float %2167)  ; Rsqrt(value)
  %2169 = fmul fast float %2168, %1689
  %2170 = fmul fast float %2161, %2141
  %2171 = fsub fast float %2143, %2170
  %2172 = fmul fast float %2169, %2171
  %2173 = fmul fast float %2143, %2143
  %2174 = fmul fast float %2173, 2.000000e+00
  %2175 = fadd fast float %2174, -1.000000e+00
  %2176 = fmul fast float %2161, %2144
  %2177 = fsub fast float %2175, %2176
  %2178 = fmul fast float %2169, %2177
  %2179 = fmul fast float %2141, %2141
  %2180 = fsub fast float 1.000000e+00, %2179
  %2181 = fsub fast float %2180, %2173
  %2182 = fmul fast float %2144, %2144
  %2183 = fsub fast float %2181, %2182
  %2184 = fmul fast float %2160, %2144
  %2185 = fadd fast float %2183, %2184
  %2186 = call float @dx.op.unary.f32(i32 7, float %2185)  ; Saturate(value)
  %2187 = call float @dx.op.unary.f32(i32 24, float %2186)  ; Sqrt(value)
  %2188 = fmul fast float %2187, %2169
  %2189 = fmul fast float %2143, 2.000000e+00
  %2190 = fmul fast float %2189, %2169
  %2191 = fmul fast float %2190, %2187
  %2192 = fmul fast float %2158, %2141
  %2193 = fadd fast float %2192, %2143
  %2194 = fadd fast float %2193, %2172
  %2195 = fmul fast float %2158, %2144
  %2196 = fadd fast float %2195, 1.000000e+00
  %2197 = fadd fast float %2196, %2178
  %2198 = fmul fast float %2188, %2197
  %2199 = fmul fast float %2194, %2197
  %2200 = fmul fast float %2191, %2194
  %2201 = fmul fast float %2198, 5.000000e-01
  %2202 = fmul fast float %2194, 2.500000e-01
  %2203 = fmul fast float %2202, %2191
  %2204 = fsub fast float %2203, %2201
  %2205 = fmul fast float %2204, %2199
  %2206 = fmul fast float %2198, %2198
  %2207 = fmul fast float %2198, 2.000000e+00
  %2208 = fsub fast float %2200, %2207
  %2209 = fmul fast float %2208, %2200
  %2210 = fadd fast float %2209, %2206
  %2211 = fmul fast float %2197, %2197
  %2212 = fmul fast float %2211, %2193
  %2213 = fadd fast float %2197, %2195
  %2214 = fmul fast float %2213, 5.000000e-01
  %2215 = fsub fast float -5.000000e-01, %2214
  %2216 = fmul fast float %2215, %2199
  %2217 = fadd fast float %2216, %2212
  %2218 = fmul fast float %2217, %2194
  %2219 = fadd fast float %2210, %2218
  %2220 = fmul fast float %2205, 2.000000e+00
  %2221 = fmul fast float %2219, %2219
  %2222 = fmul fast float %2205, %2205
  %2223 = fadd fast float %2221, %2222
  %2224 = fdiv fast float %2220, %2223
  %2225 = fmul fast float %2219, %2224
  %2226 = fmul fast float %2205, %2224
  %2227 = fsub fast float 1.000000e+00, %2226
  %2228 = fmul fast float %2227, %2172
  %2229 = fmul fast float %2225, %2188
  %2230 = fmul fast float %2227, %2178
  %2231 = fmul fast float %2225, %2191
  %2232 = fadd fast float %2231, %2195
  %2233 = fadd fast float %2232, %2230
  %2234 = fmul fast float %2233, 2.000000e+00
  %2235 = fadd fast float %2234, 2.000000e+00
  %2236 = call float @dx.op.unary.f32(i32 25, float %2235)  ; Rsqrt(value)
  %2237 = fadd fast float %2193, %2229
  %2238 = fadd fast float %2237, %2228
  %2239 = fmul fast float %2238, %2236
  %2240 = call float @dx.op.unary.f32(i32 7, float %2239)  ; Saturate(value)
  %2241 = fmul fast float %2233, %2236
  %2242 = fadd fast float %2241, %2236
  %2243 = call float @dx.op.unary.f32(i32 7, float %2242)  ; Saturate(value)
  br label %2244

; <label>:2244                                    ; preds = %2165, %2163, %2142
  %2245 = phi float [ %2164, %2163 ], [ %2243, %2165 ], [ %2153, %2142 ]
  %2246 = phi float [ 1.000000e+00, %2163 ], [ %2240, %2165 ], [ %2150, %2142 ]
  %2247 = call float @dx.op.unary.f32(i32 6, float %2143)  ; FAbs(value)
  %2248 = fadd fast float %2247, 0x3EE4F8B580000000
  %2249 = call float @dx.op.unary.f32(i32 7, float %2248)  ; Saturate(value)
  %2250 = fmul fast float %249, 0x3FD45F3060000000
  %2251 = fmul fast float %250, 0x3FD45F3060000000
  %2252 = fmul fast float %251, 0x3FD45F3060000000
  %2253 = fmul fast float %1642, %1643
  %2254 = fmul fast float %2250, %2253
  %2255 = fmul fast float %2251, %2253
  %2256 = fmul fast float %2252, %2253
  %2257 = fmul fast float %1595, %1595
  %2258 = fmul fast float %2257, %2257
  %2259 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %2259, label %2260, label %2267

; <label>:2260                                    ; preds = %2244
  %2261 = fmul fast float %1691, %1691
  %2262 = fmul fast float %2245, 0x400CCCCCC0000000
  %2263 = fadd fast float %2262, 0x3FD99999A0000000
  %2264 = fdiv fast float %2261, %2263
  %2265 = fadd fast float %2264, %2258
  %2266 = call float @dx.op.unary.f32(i32 7, float %2265)  ; Saturate(value)
  br label %2267

; <label>:2267                                    ; preds = %2260, %2244
  %2268 = phi float [ %2266, %2260 ], [ %2258, %2244 ]
  br i1 %2154, label %2269, label %2282

; <label>:2269                                    ; preds = %2267
  %2270 = fmul fast float %1689, 2.500000e-01
  %2271 = bitcast float %2268 to i32
  %2272 = ashr i32 %2271, 1
  %2273 = add nsw i32 %2272, 532487669
  %2274 = bitcast i32 %2273 to float
  %2275 = fmul fast float %2274, 3.000000e+00
  %2276 = fadd fast float %2275, %1689
  %2277 = fmul fast float %2270, %2276
  %2278 = fadd fast float %2245, 0x3F50624DE0000000
  %2279 = fdiv fast float %2277, %2278
  %2280 = fadd fast float %2279, %2268
  %2281 = fdiv fast float %2268, %2280
  br label %2282

; <label>:2282                                    ; preds = %2269, %2267
  %2283 = phi float [ %2280, %2269 ], [ %2268, %2267 ]
  %2284 = phi float [ %2281, %2269 ], [ 1.000000e+00, %2267 ]
  %2285 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %2285, label %2286, label %2305

; <label>:2286                                    ; preds = %2282
  %2287 = fsub fast float 0x3FF00068E0000000, %1625
  %2288 = fadd fast float %1625, 1.000000e+00
  %2289 = fdiv fast float %2287, %2288
  %2290 = call float @dx.op.unary.f32(i32 24, float %2289)  ; Sqrt(value)
  %2291 = fmul fast float %2290, 2.500000e-01
  %2292 = bitcast float %2283 to i32
  %2293 = ashr i32 %2292, 1
  %2294 = add nsw i32 %2293, 532487669
  %2295 = bitcast i32 %2294 to float
  %2296 = fmul fast float %2295, 3.000000e+00
  %2297 = fadd fast float %2290, %2296
  %2298 = fmul fast float %2291, %2297
  %2299 = fadd fast float %2245, 0x3F50624DE0000000
  %2300 = fdiv fast float %2298, %2299
  %2301 = fadd fast float %2300, %2283
  %2302 = fdiv fast float %2283, %2301
  %2303 = call float @dx.op.unary.f32(i32 24, float %2302)  ; Sqrt(value)
  %2304 = fmul fast float %2303, %2284
  br label %2305

; <label>:2305                                    ; preds = %2286, %2282
  %2306 = phi float [ %2304, %2286 ], [ %2284, %2282 ]
  %2307 = fmul fast float %2268, %2246
  %2308 = fsub fast float %2307, %2246
  %2309 = fmul fast float %2308, %2246
  %2310 = fadd fast float %2309, 1.000000e+00
  %2311 = fmul fast float %2310, %2310
  %2312 = fmul fast float %2311, 0x400921FB60000000
  %2313 = fdiv fast float %2268, %2312
  %2314 = fmul fast float %2313, %2306
  %2315 = call float @dx.op.unary.f32(i32 24, float %2268)  ; Sqrt(value)
  %2316 = fsub fast float 1.000000e+00, %2315
  %2317 = fmul fast float %2316, %2249
  %2318 = fadd fast float %2317, %2315
  %2319 = fmul fast float %2318, %1642
  %2320 = fmul fast float %2316, %1642
  %2321 = fadd fast float %2320, %2315
  %2322 = fmul fast float %2321, %2249
  %2323 = fadd fast float %2319, %2322
  %2324 = fdiv fast float 5.000000e-01, %2323
  %2325 = fsub fast float 1.000000e+00, %2245
  %2326 = fmul fast float %2325, %2325
  %2327 = fmul fast float %2326, %2326
  %2328 = fmul fast float %2327, %2325
  %2329 = fmul fast float %261, 5.000000e+01
  %2330 = call float @dx.op.unary.f32(i32 7, float %2329)  ; Saturate(value)
  %2331 = fmul fast float %2330, %2328
  %2332 = fsub fast float 1.000000e+00, %2328
  %2333 = fmul fast float %2332, %260
  %2334 = fmul fast float %2332, %261
  %2335 = fmul fast float %2332, %262
  %2336 = fadd fast float %2331, %2333
  %2337 = fadd fast float %2331, %2334
  %2338 = fadd fast float %2331, %2335
  %2339 = fmul fast float %2314, %2324
  %2340 = fmul fast float %2339, %2253
  %2341 = fmul fast float %2340, %2336
  %2342 = fmul fast float %2340, %2337
  %2343 = fmul fast float %2340, %2338
  br label %2344

; <label>:2344                                    ; preds = %2305, %2139
  %2345 = phi float [ %2341, %2305 ], [ 0.000000e+00, %2139 ]
  %2346 = phi float [ %2342, %2305 ], [ 0.000000e+00, %2139 ]
  %2347 = phi float [ %2343, %2305 ], [ 0.000000e+00, %2139 ]
  %2348 = phi float [ %2254, %2305 ], [ 0.000000e+00, %2139 ]
  %2349 = phi float [ %2255, %2305 ], [ 0.000000e+00, %2139 ]
  %2350 = phi float [ %2256, %2305 ], [ 0.000000e+00, %2139 ]
  %2351 = fmul fast float %2141, 5.000000e-01
  %2352 = fadd fast float %2351, 5.000000e-01
  %2353 = call float @dx.op.unary.f32(i32 7, float %2352)  ; Saturate(value)
  %2354 = fsub fast float 1.000000e+00, %217
  %2355 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2357 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2355, %dx.types.Handle %2356, float %2353, float %2354, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2358 = extractvalue %dx.types.ResRet.f32 %2357, 0
  %2359 = extractvalue %dx.types.ResRet.f32 %2357, 1
  %2360 = extractvalue %dx.types.ResRet.f32 %2357, 2
  %2361 = fmul fast float %214, %214
  %2362 = fmul fast float %2361, %1643
  %2363 = fmul fast float %2362, %2358
  %2364 = fmul fast float %215, %215
  %2365 = fmul fast float %2364, %1643
  %2366 = fmul fast float %2365, %2359
  %2367 = fmul fast float %216, %216
  %2368 = fmul fast float %2367, %1643
  %2369 = fmul fast float %2368, %2360
  br label %3936

; <label>:2370                                    ; preds = %1675
  %2371 = call float @dx.op.binary.f32(i32 35, float %215, float 0x3F947AE140000000)  ; FMax(a,b)
  %2372 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %2373 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %2374 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %2375 = fmul fast float %2374, 2.000000e+00
  %2376 = fadd fast float %2375, 2.000000e+00
  %2377 = call float @dx.op.unary.f32(i32 25, float %2376)  ; Rsqrt(value)
  %2378 = fadd fast float %2373, %2372
  %2379 = fmul fast float %2377, %2378
  %2380 = call float @dx.op.unary.f32(i32 7, float %2379)  ; Saturate(value)
  %2381 = fmul fast float %2377, %2374
  %2382 = fadd fast float %2381, %2377
  %2383 = call float @dx.op.unary.f32(i32 7, float %2382)  ; Saturate(value)
  %2384 = fmul fast float %1595, %1595
  %2385 = fsub fast float 1.000000e+00, %2384
  %2386 = fmul fast float %2371, %2371
  %2387 = fcmp fast ogt float %2385, 0.000000e+00
  %2388 = fsub fast float 1.000000e+00, %2386
  %2389 = fdiv fast float %2388, %2385
  %2390 = select i1 %2387, float %2389, float 0.000000e+00
  %2391 = fmul fast float %2390, %1689
  %2392 = call float @dx.op.unary.f32(i32 7, float %2391)  ; Saturate(value)
  %2393 = fcmp fast ogt float %2392, 0.000000e+00
  br i1 %2393, label %2394, label %2484

; <label>:2394                                    ; preds = %2370
  %2395 = fmul fast float %2392, %2392
  %2396 = fsub fast float 1.000000e+00, %2395
  %2397 = call float @dx.op.unary.f32(i32 24, float %2396)  ; Sqrt(value)
  %2398 = fmul fast float %2372, 2.000000e+00
  %2399 = fmul fast float %2398, %2373
  %2400 = fsub fast float %2399, %2374
  %2401 = fcmp fast ult float %2400, %2397
  br i1 %2401, label %2404, label %2402

; <label>:2402                                    ; preds = %2394
  %2403 = call float @dx.op.unary.f32(i32 6, float %2373)  ; FAbs(value)
  br label %2484

; <label>:2404                                    ; preds = %2394
  %2405 = fmul fast float %2400, %2400
  %2406 = fsub fast float 1.000000e+00, %2405
  %2407 = call float @dx.op.unary.f32(i32 25, float %2406)  ; Rsqrt(value)
  %2408 = fmul fast float %2407, %2392
  %2409 = fmul fast float %2400, %2372
  %2410 = fsub fast float %2373, %2409
  %2411 = fmul fast float %2408, %2410
  %2412 = fmul fast float %2373, %2373
  %2413 = fmul fast float %2412, 2.000000e+00
  %2414 = fadd fast float %2413, -1.000000e+00
  %2415 = fmul fast float %2400, %2374
  %2416 = fsub fast float %2414, %2415
  %2417 = fmul fast float %2408, %2416
  %2418 = fmul fast float %2372, %2372
  %2419 = fsub fast float 1.000000e+00, %2418
  %2420 = fsub fast float %2419, %2412
  %2421 = fmul fast float %2374, %2374
  %2422 = fsub fast float %2420, %2421
  %2423 = fmul fast float %2399, %2374
  %2424 = fadd fast float %2422, %2423
  %2425 = call float @dx.op.unary.f32(i32 7, float %2424)  ; Saturate(value)
  %2426 = call float @dx.op.unary.f32(i32 24, float %2425)  ; Sqrt(value)
  %2427 = fmul fast float %2426, %2408
  %2428 = fmul fast float %2373, 2.000000e+00
  %2429 = fmul fast float %2428, %2408
  %2430 = fmul fast float %2429, %2426
  %2431 = fmul fast float %2397, %2372
  %2432 = fadd fast float %2431, %2373
  %2433 = fadd fast float %2432, %2411
  %2434 = fmul fast float %2397, %2374
  %2435 = fadd fast float %2434, 1.000000e+00
  %2436 = fadd fast float %2435, %2417
  %2437 = fmul fast float %2427, %2436
  %2438 = fmul fast float %2433, %2436
  %2439 = fmul fast float %2430, %2433
  %2440 = fmul fast float %2437, 5.000000e-01
  %2441 = fmul fast float %2433, 2.500000e-01
  %2442 = fmul fast float %2441, %2430
  %2443 = fsub fast float %2442, %2440
  %2444 = fmul fast float %2443, %2438
  %2445 = fmul fast float %2437, %2437
  %2446 = fmul fast float %2437, 2.000000e+00
  %2447 = fsub fast float %2439, %2446
  %2448 = fmul fast float %2447, %2439
  %2449 = fadd fast float %2448, %2445
  %2450 = fmul fast float %2436, %2436
  %2451 = fmul fast float %2450, %2432
  %2452 = fadd fast float %2436, %2434
  %2453 = fmul fast float %2452, 5.000000e-01
  %2454 = fsub fast float -5.000000e-01, %2453
  %2455 = fmul fast float %2454, %2438
  %2456 = fadd fast float %2455, %2451
  %2457 = fmul fast float %2456, %2433
  %2458 = fadd fast float %2449, %2457
  %2459 = fmul fast float %2444, 2.000000e+00
  %2460 = fmul fast float %2458, %2458
  %2461 = fmul fast float %2444, %2444
  %2462 = fadd fast float %2460, %2461
  %2463 = fdiv fast float %2459, %2462
  %2464 = fmul fast float %2458, %2463
  %2465 = fmul fast float %2444, %2463
  %2466 = fsub fast float 1.000000e+00, %2465
  %2467 = fmul fast float %2466, %2411
  %2468 = fmul fast float %2464, %2427
  %2469 = fmul fast float %2466, %2417
  %2470 = fmul fast float %2464, %2430
  %2471 = fadd fast float %2468, %2431
  %2472 = fadd fast float %2471, %2467
  %2473 = fadd fast float %2470, %2434
  %2474 = fadd fast float %2473, %2469
  %2475 = fmul fast float %2474, 2.000000e+00
  %2476 = fadd fast float %2475, 2.000000e+00
  %2477 = call float @dx.op.unary.f32(i32 25, float %2476)  ; Rsqrt(value)
  %2478 = fadd fast float %2472, %2373
  %2479 = fmul fast float %2478, %2477
  %2480 = call float @dx.op.unary.f32(i32 7, float %2479)  ; Saturate(value)
  %2481 = fmul fast float %2474, %2477
  %2482 = fadd fast float %2481, %2477
  %2483 = call float @dx.op.unary.f32(i32 7, float %2482)  ; Saturate(value)
  br label %2484

; <label>:2484                                    ; preds = %2404, %2402, %2370
  %2485 = phi float [ %2403, %2402 ], [ %2483, %2404 ], [ %2383, %2370 ]
  %2486 = phi float [ 1.000000e+00, %2402 ], [ %2480, %2404 ], [ %2380, %2370 ]
  %2487 = phi float [ %2372, %2402 ], [ %2472, %2404 ], [ %2372, %2370 ]
  %2488 = call float @dx.op.unary.f32(i32 6, float %2373)  ; FAbs(value)
  %2489 = fadd fast float %2488, 0x3EE4F8B580000000
  %2490 = call float @dx.op.unary.f32(i32 7, float %2489)  ; Saturate(value)
  %2491 = fsub fast float 1.000000e+00, %2485
  %2492 = fmul fast float %2491, %2491
  %2493 = fmul fast float %2492, %2492
  %2494 = fmul fast float %2493, %2491
  %2495 = fsub fast float 1.000000e+00, %2494
  %2496 = fmul fast float %2495, 0x3FA47AE140000000
  %2497 = fadd fast float %2496, %2494
  %2498 = fmul fast float %2386, %2386
  %2499 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %2499, label %2500, label %2507

; <label>:2500                                    ; preds = %2484
  %2501 = fmul fast float %1691, %1691
  %2502 = fmul fast float %2485, 0x400CCCCCC0000000
  %2503 = fadd fast float %2502, 0x3FD99999A0000000
  %2504 = fdiv fast float %2501, %2503
  %2505 = fadd fast float %2504, %2498
  %2506 = call float @dx.op.unary.f32(i32 7, float %2505)  ; Saturate(value)
  br label %2507

; <label>:2507                                    ; preds = %2500, %2484
  %2508 = phi float [ %2506, %2500 ], [ %2498, %2484 ]
  br i1 %2393, label %2509, label %2522

; <label>:2509                                    ; preds = %2507
  %2510 = fmul fast float %2392, 2.500000e-01
  %2511 = bitcast float %2508 to i32
  %2512 = ashr i32 %2511, 1
  %2513 = add nsw i32 %2512, 532487669
  %2514 = bitcast i32 %2513 to float
  %2515 = fmul fast float %2514, 3.000000e+00
  %2516 = fadd fast float %2515, %2392
  %2517 = fmul fast float %2510, %2516
  %2518 = fadd fast float %2485, 0x3F50624DE0000000
  %2519 = fdiv fast float %2517, %2518
  %2520 = fadd fast float %2519, %2508
  %2521 = fdiv fast float %2508, %2520
  br label %2522

; <label>:2522                                    ; preds = %2509, %2507
  %2523 = phi float [ %2520, %2509 ], [ %2508, %2507 ]
  %2524 = phi float [ %2521, %2509 ], [ 1.000000e+00, %2507 ]
  %2525 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %2525, label %2526, label %2545

; <label>:2526                                    ; preds = %2522
  %2527 = fsub fast float 0x3FF00068E0000000, %1625
  %2528 = fadd fast float %1625, 1.000000e+00
  %2529 = fdiv fast float %2527, %2528
  %2530 = call float @dx.op.unary.f32(i32 24, float %2529)  ; Sqrt(value)
  %2531 = fmul fast float %2530, 2.500000e-01
  %2532 = bitcast float %2523 to i32
  %2533 = ashr i32 %2532, 1
  %2534 = add nsw i32 %2533, 532487669
  %2535 = bitcast i32 %2534 to float
  %2536 = fmul fast float %2535, 3.000000e+00
  %2537 = fadd fast float %2530, %2536
  %2538 = fmul fast float %2531, %2537
  %2539 = fadd fast float %2485, 0x3F50624DE0000000
  %2540 = fdiv fast float %2538, %2539
  %2541 = fadd fast float %2540, %2523
  %2542 = fdiv fast float %2523, %2541
  %2543 = call float @dx.op.unary.f32(i32 24, float %2542)  ; Sqrt(value)
  %2544 = fmul fast float %2543, %2524
  br label %2545

; <label>:2545                                    ; preds = %2526, %2522
  %2546 = phi float [ %2544, %2526 ], [ %2524, %2522 ]
  %2547 = call float @dx.op.unary.f32(i32 24, float %2508)  ; Sqrt(value)
  %2548 = fsub fast float 1.000000e+00, %2547
  %2549 = fmul fast float %2548, %2490
  %2550 = fadd fast float %2549, %2547
  %2551 = fmul fast float %2550, %1642
  %2552 = fmul fast float %2548, %1642
  %2553 = fadd fast float %2552, %2547
  %2554 = fmul fast float %2553, %2490
  %2555 = fadd fast float %2551, %2554
  %2556 = fdiv fast float 5.000000e-01, %2555
  %2557 = fmul fast float %2508, %2486
  %2558 = fsub fast float %2557, %2486
  %2559 = fmul fast float %2558, %2486
  %2560 = fadd fast float %2559, 1.000000e+00
  %2561 = fmul fast float %2560, %2560
  %2562 = fmul fast float %2561, 0x400921FB60000000
  %2563 = fdiv fast float %2508, %2562
  %2564 = fmul fast float %1642, %1643
  %2565 = fmul fast float %2564, %2497
  %2566 = fmul fast float %2565, %2546
  %2567 = fmul fast float %2566, %2556
  %2568 = fmul fast float %2567, %2563
  %2569 = fmul fast float %2568, %214
  %2570 = fsub fast float 1.000000e+00, %2497
  %2571 = fmul fast float %2570, %2570
  %2572 = fmul fast float %2485, 0x3FCC28F5C0000000
  %2573 = fsub fast float 0x3FE428F5C0000000, %2572
  %2574 = fmul fast float %2573, %2485
  %2575 = fadd fast float %2574, 0xBFE7D70A40000000
  %2576 = fmul fast float %2575, %2486
  %2577 = fmul fast float %2490, 0x3FE5555560000000
  %2578 = fsub fast float %2577, %2576
  %2579 = call float @dx.op.binary.f32(i32 35, float %2578, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2580 = call float @dx.op.binary.f32(i32 36, float %2579, float 1.000000e+00)  ; FMin(a,b)
  %2581 = fmul fast float %2485, 0x3FE5555560000000
  %2582 = fsub fast float %2581, %2575
  %2583 = call float @dx.op.unary.f32(i32 7, float %2582)  ; Saturate(value)
  %2584 = fcmp fast ogt float %224, 0.000000e+00
  br i1 %2584, label %2585, label %2622

; <label>:2585                                    ; preds = %2545
  %2586 = fmul fast float %2487, 0x3FE5555560000000
  %2587 = fsub fast float %2586, %2576
  %2588 = call float @dx.op.binary.f32(i32 35, float %2587, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2589 = call float @dx.op.binary.f32(i32 36, float %2588, float 1.000000e+00)  ; FMin(a,b)
  %2590 = fdiv fast float 1.000000e+00, %2580
  %2591 = fdiv fast float 1.000000e+00, %2589
  %2592 = fmul fast float %187, 0x3FD45F3060000000
  %2593 = fmul fast float %188, 0x3FD45F3060000000
  %2594 = fmul fast float %189, 0x3FD45F3060000000
  %2595 = call float @dx.op.binary.f32(i32 35, float %2592, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2596 = call float @dx.op.binary.f32(i32 35, float %2593, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2597 = call float @dx.op.binary.f32(i32 35, float %2594, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2598 = call float @dx.op.unary.f32(i32 23, float %2595)  ; Log(value)
  %2599 = call float @dx.op.unary.f32(i32 23, float %2596)  ; Log(value)
  %2600 = call float @dx.op.unary.f32(i32 23, float %2597)  ; Log(value)
  %2601 = fadd fast float %2590, -2.000000e+00
  %2602 = fadd fast float %2601, %2591
  %2603 = call float @dx.op.binary.f32(i32 35, float %2602, float 0.000000e+00)  ; FMax(a,b)
  %2604 = fmul fast float %2598, 5.000000e-01
  %2605 = fmul fast float %2604, %2603
  %2606 = fmul fast float %2599, 5.000000e-01
  %2607 = fmul fast float %2606, %2603
  %2608 = fmul fast float %2600, 5.000000e-01
  %2609 = fmul fast float %2608, %2603
  %2610 = call float @dx.op.unary.f32(i32 21, float %2605)  ; Exp(value)
  %2611 = call float @dx.op.unary.f32(i32 21, float %2607)  ; Exp(value)
  %2612 = call float @dx.op.unary.f32(i32 21, float %2609)  ; Exp(value)
  %2613 = fadd fast float %2610, -1.000000e+00
  %2614 = fadd fast float %2611, -1.000000e+00
  %2615 = fadd fast float %2612, -1.000000e+00
  %2616 = fmul fast float %2613, %224
  %2617 = fmul fast float %2614, %224
  %2618 = fmul fast float %2615, %224
  %2619 = fadd fast float %2616, 1.000000e+00
  %2620 = fadd fast float %2617, 1.000000e+00
  %2621 = fadd fast float %2618, 1.000000e+00
  br label %2622

; <label>:2622                                    ; preds = %2585, %2545
  %2623 = phi float [ %2619, %2585 ], [ 1.000000e+00, %2545 ]
  %2624 = phi float [ %2620, %2585 ], [ 1.000000e+00, %2545 ]
  %2625 = phi float [ %2621, %2585 ], [ 1.000000e+00, %2545 ]
  %2626 = fmul fast float %249, 0x3FD45F3060000000
  %2627 = fmul fast float %250, 0x3FD45F3060000000
  %2628 = fmul fast float %251, 0x3FD45F3060000000
  %2629 = fmul fast float %2626, %2564
  %2630 = fmul fast float %2627, %2564
  %2631 = fmul fast float %2628, %2564
  %2632 = fmul fast float %2571, %2629
  %2633 = fmul fast float %2632, %2623
  %2634 = fmul fast float %2571, %2630
  %2635 = fmul fast float %2634, %2624
  %2636 = fmul fast float %2571, %2631
  %2637 = fmul fast float %2636, %2625
  %2638 = fsub fast float %2633, %2629
  %2639 = fsub fast float %2635, %2630
  %2640 = fsub fast float %2637, %2631
  %2641 = fmul fast float %2638, %214
  %2642 = fmul fast float %2639, %214
  %2643 = fmul fast float %2640, %214
  %2644 = fadd fast float %2641, %2629
  %2645 = fadd fast float %2642, %2630
  %2646 = fadd fast float %2643, %2631
  %2647 = fmul fast float %2384, %2384
  %2648 = call float @dx.op.unary.f32(i32 24, float %2647)  ; Sqrt(value)
  %2649 = fsub fast float 1.000000e+00, %2648
  %2650 = fmul fast float %2649, %2580
  %2651 = fadd fast float %2650, %2648
  %2652 = fmul fast float %2651, %1642
  %2653 = fmul fast float %2649, %1642
  %2654 = fadd fast float %2653, %2648
  %2655 = fmul fast float %2654, %2580
  %2656 = fadd fast float %2652, %2655
  %2657 = fdiv fast float 5.000000e-01, %2656
  %2658 = fmul fast float %2486, %2647
  %2659 = fsub fast float %2658, %2486
  %2660 = fmul fast float %2659, %2486
  %2661 = fadd fast float %2660, 1.000000e+00
  %2662 = fmul fast float %2661, %2661
  %2663 = fmul fast float %2662, 0x400921FB60000000
  %2664 = fdiv fast float %2647, %2663
  %2665 = fsub fast float 1.000000e+00, %2583
  %2666 = fmul fast float %2665, %2665
  %2667 = fmul fast float %2666, %2666
  %2668 = fmul fast float %2667, %2665
  %2669 = fmul fast float %261, 5.000000e+01
  %2670 = call float @dx.op.unary.f32(i32 7, float %2669)  ; Saturate(value)
  %2671 = fmul fast float %2670, %2668
  %2672 = fsub fast float 1.000000e+00, %2668
  %2673 = fmul fast float %2672, %260
  %2674 = fmul fast float %2672, %261
  %2675 = fmul fast float %2672, %262
  %2676 = fadd fast float %2671, %2673
  %2677 = fadd fast float %2671, %2674
  %2678 = fadd fast float %2671, %2675
  %2679 = fmul fast float %2670, %2494
  %2680 = fmul fast float %2495, %260
  %2681 = fmul fast float %2495, %261
  %2682 = fmul fast float %2495, %262
  %2683 = fadd fast float %2679, %2680
  %2684 = fadd fast float %2679, %2681
  %2685 = fadd fast float %2679, %2682
  br i1 %2499, label %2686, label %2693

; <label>:2686                                    ; preds = %2622
  %2687 = fmul fast float %1691, %1691
  %2688 = fmul fast float %2485, 0x400CCCCCC0000000
  %2689 = fadd fast float %2688, 0x3FD99999A0000000
  %2690 = fdiv fast float %2687, %2689
  %2691 = fadd fast float %2690, %2647
  %2692 = call float @dx.op.unary.f32(i32 7, float %2691)  ; Saturate(value)
  br label %2693

; <label>:2693                                    ; preds = %2686, %2622
  %2694 = phi float [ %2692, %2686 ], [ %2647, %2622 ]
  %2695 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %2695, label %2696, label %2709

; <label>:2696                                    ; preds = %2693
  %2697 = fmul fast float %1689, 2.500000e-01
  %2698 = bitcast float %2694 to i32
  %2699 = ashr i32 %2698, 1
  %2700 = add nsw i32 %2699, 532487669
  %2701 = bitcast i32 %2700 to float
  %2702 = fmul fast float %2701, 3.000000e+00
  %2703 = fadd fast float %2702, %1689
  %2704 = fmul fast float %2697, %2703
  %2705 = fadd fast float %2485, 0x3F50624DE0000000
  %2706 = fdiv fast float %2704, %2705
  %2707 = fadd fast float %2706, %2694
  %2708 = fdiv fast float %2694, %2707
  br label %2709

; <label>:2709                                    ; preds = %2696, %2693
  %2710 = phi float [ %2707, %2696 ], [ %2694, %2693 ]
  %2711 = phi float [ %2708, %2696 ], [ 1.000000e+00, %2693 ]
  br i1 %2525, label %2712, label %2731

; <label>:2712                                    ; preds = %2709
  %2713 = fsub fast float 0x3FF00068E0000000, %1625
  %2714 = fadd fast float %1625, 1.000000e+00
  %2715 = fdiv fast float %2713, %2714
  %2716 = call float @dx.op.unary.f32(i32 24, float %2715)  ; Sqrt(value)
  %2717 = fmul fast float %2716, 2.500000e-01
  %2718 = bitcast float %2710 to i32
  %2719 = ashr i32 %2718, 1
  %2720 = add nsw i32 %2719, 532487669
  %2721 = bitcast i32 %2720 to float
  %2722 = fmul fast float %2721, 3.000000e+00
  %2723 = fadd fast float %2716, %2722
  %2724 = fmul fast float %2717, %2723
  %2725 = fadd fast float %2485, 0x3F50624DE0000000
  %2726 = fdiv fast float %2724, %2725
  %2727 = fadd fast float %2726, %2710
  %2728 = fdiv fast float %2710, %2727
  %2729 = call float @dx.op.unary.f32(i32 24, float %2728)  ; Sqrt(value)
  %2730 = fmul fast float %2729, %2711
  br label %2731

; <label>:2731                                    ; preds = %2712, %2709
  %2732 = phi float [ %2730, %2712 ], [ %2711, %2709 ]
  %2733 = fmul fast float %2564, %2657
  %2734 = fmul fast float %2733, %2664
  %2735 = fmul fast float %2734, %2732
  %2736 = fmul fast float %2623, %2571
  %2737 = fmul fast float %2624, %2571
  %2738 = fmul fast float %2625, %2571
  %2739 = fmul fast float %2736, %2676
  %2740 = fmul fast float %2737, %2677
  %2741 = fmul fast float %2738, %2678
  %2742 = fsub fast float %2739, %2683
  %2743 = fsub fast float %2740, %2684
  %2744 = fsub fast float %2741, %2685
  %2745 = fmul fast float %2742, %214
  %2746 = fmul fast float %2743, %214
  %2747 = fmul fast float %2744, %214
  %2748 = fadd fast float %2745, %2683
  %2749 = fadd fast float %2746, %2684
  %2750 = fadd fast float %2747, %2685
  %2751 = fmul fast float %2735, %2748
  %2752 = fmul fast float %2735, %2749
  %2753 = fmul fast float %2735, %2750
  %2754 = fadd fast float %2751, %2569
  %2755 = fadd fast float %2752, %2569
  %2756 = fadd fast float %2753, %2569
  br label %3936

; <label>:2757                                    ; preds = %1675
  %2758 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %2759 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %2760 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %2761 = fmul fast float %2760, 2.000000e+00
  %2762 = fadd fast float %2761, 2.000000e+00
  %2763 = call float @dx.op.unary.f32(i32 25, float %2762)  ; Rsqrt(value)
  %2764 = fadd fast float %2759, %2758
  %2765 = fmul fast float %2763, %2764
  %2766 = call float @dx.op.unary.f32(i32 7, float %2765)  ; Saturate(value)
  %2767 = fmul fast float %2763, %2760
  %2768 = fadd fast float %2767, %2763
  %2769 = call float @dx.op.unary.f32(i32 7, float %2768)  ; Saturate(value)
  %2770 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %2770, label %2771, label %2860

; <label>:2771                                    ; preds = %2757
  %2772 = fmul fast float %1689, %1689
  %2773 = fsub fast float 1.000000e+00, %2772
  %2774 = call float @dx.op.unary.f32(i32 24, float %2773)  ; Sqrt(value)
  %2775 = fmul fast float %2758, 2.000000e+00
  %2776 = fmul fast float %2775, %2759
  %2777 = fsub fast float %2776, %2760
  %2778 = fcmp fast ult float %2777, %2774
  br i1 %2778, label %2781, label %2779

; <label>:2779                                    ; preds = %2771
  %2780 = call float @dx.op.unary.f32(i32 6, float %2759)  ; FAbs(value)
  br label %2860

; <label>:2781                                    ; preds = %2771
  %2782 = fmul fast float %2777, %2777
  %2783 = fsub fast float 1.000000e+00, %2782
  %2784 = call float @dx.op.unary.f32(i32 25, float %2783)  ; Rsqrt(value)
  %2785 = fmul fast float %2784, %1689
  %2786 = fmul fast float %2777, %2758
  %2787 = fsub fast float %2759, %2786
  %2788 = fmul fast float %2785, %2787
  %2789 = fmul fast float %2759, %2759
  %2790 = fmul fast float %2789, 2.000000e+00
  %2791 = fadd fast float %2790, -1.000000e+00
  %2792 = fmul fast float %2777, %2760
  %2793 = fsub fast float %2791, %2792
  %2794 = fmul fast float %2785, %2793
  %2795 = fmul fast float %2758, %2758
  %2796 = fsub fast float 1.000000e+00, %2795
  %2797 = fsub fast float %2796, %2789
  %2798 = fmul fast float %2760, %2760
  %2799 = fsub fast float %2797, %2798
  %2800 = fmul fast float %2776, %2760
  %2801 = fadd fast float %2799, %2800
  %2802 = call float @dx.op.unary.f32(i32 7, float %2801)  ; Saturate(value)
  %2803 = call float @dx.op.unary.f32(i32 24, float %2802)  ; Sqrt(value)
  %2804 = fmul fast float %2803, %2785
  %2805 = fmul fast float %2759, 2.000000e+00
  %2806 = fmul fast float %2805, %2785
  %2807 = fmul fast float %2806, %2803
  %2808 = fmul fast float %2774, %2758
  %2809 = fadd fast float %2808, %2759
  %2810 = fadd fast float %2809, %2788
  %2811 = fmul fast float %2774, %2760
  %2812 = fadd fast float %2811, 1.000000e+00
  %2813 = fadd fast float %2812, %2794
  %2814 = fmul fast float %2804, %2813
  %2815 = fmul fast float %2810, %2813
  %2816 = fmul fast float %2807, %2810
  %2817 = fmul fast float %2814, 5.000000e-01
  %2818 = fmul fast float %2810, 2.500000e-01
  %2819 = fmul fast float %2818, %2807
  %2820 = fsub fast float %2819, %2817
  %2821 = fmul fast float %2820, %2815
  %2822 = fmul fast float %2814, %2814
  %2823 = fmul fast float %2814, 2.000000e+00
  %2824 = fsub fast float %2816, %2823
  %2825 = fmul fast float %2824, %2816
  %2826 = fadd fast float %2825, %2822
  %2827 = fmul fast float %2813, %2813
  %2828 = fmul fast float %2827, %2809
  %2829 = fadd fast float %2813, %2811
  %2830 = fmul fast float %2829, 5.000000e-01
  %2831 = fsub fast float -5.000000e-01, %2830
  %2832 = fmul fast float %2831, %2815
  %2833 = fadd fast float %2832, %2828
  %2834 = fmul fast float %2833, %2810
  %2835 = fadd fast float %2826, %2834
  %2836 = fmul fast float %2821, 2.000000e+00
  %2837 = fmul fast float %2835, %2835
  %2838 = fmul fast float %2821, %2821
  %2839 = fadd fast float %2837, %2838
  %2840 = fdiv fast float %2836, %2839
  %2841 = fmul fast float %2835, %2840
  %2842 = fmul fast float %2821, %2840
  %2843 = fsub fast float 1.000000e+00, %2842
  %2844 = fmul fast float %2843, %2788
  %2845 = fmul fast float %2841, %2804
  %2846 = fmul fast float %2843, %2794
  %2847 = fmul fast float %2841, %2807
  %2848 = fadd fast float %2847, %2811
  %2849 = fadd fast float %2848, %2846
  %2850 = fmul fast float %2849, 2.000000e+00
  %2851 = fadd fast float %2850, 2.000000e+00
  %2852 = call float @dx.op.unary.f32(i32 25, float %2851)  ; Rsqrt(value)
  %2853 = fadd fast float %2809, %2845
  %2854 = fadd fast float %2853, %2844
  %2855 = fmul fast float %2854, %2852
  %2856 = call float @dx.op.unary.f32(i32 7, float %2855)  ; Saturate(value)
  %2857 = fmul fast float %2849, %2852
  %2858 = fadd fast float %2857, %2852
  %2859 = call float @dx.op.unary.f32(i32 7, float %2858)  ; Saturate(value)
  br label %2860

; <label>:2860                                    ; preds = %2781, %2779, %2757
  %2861 = phi float [ %2780, %2779 ], [ %2859, %2781 ], [ %2769, %2757 ]
  %2862 = phi float [ 1.000000e+00, %2779 ], [ %2856, %2781 ], [ %2766, %2757 ]
  %2863 = call float @dx.op.unary.f32(i32 6, float %2759)  ; FAbs(value)
  %2864 = fadd fast float %2863, 0x3EE4F8B580000000
  %2865 = call float @dx.op.unary.f32(i32 7, float %2864)  ; Saturate(value)
  %2866 = fmul fast float %214, 2.550000e+02
  %2867 = fadd fast float %2866, 5.000000e-01
  %2868 = fptoui float %2867 to i32
  %2869 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2870 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2869, i32 0, i32 5, i32 %2868, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2871 = extractvalue %dx.types.ResRet.f32 %2870, 0
  %2872 = extractvalue %dx.types.ResRet.f32 %2870, 1
  %2873 = extractvalue %dx.types.ResRet.f32 %2870, 2
  %2874 = fadd fast float %217, 0xBFB99999A0000000
  %2875 = fmul fast float %2874, 1.000000e+01
  %2876 = call float @dx.op.unary.f32(i32 7, float %2875)  ; Saturate(value)
  %2877 = fmul fast float %2871, 2.000000e+00
  %2878 = fadd fast float %2877, -1.000000e+00
  %2879 = fmul fast float %2878, %2876
  %2880 = fadd fast float %2879, 1.000000e+00
  %2881 = fmul fast float %2872, 2.000000e+00
  %2882 = fadd fast float %2881, -1.000000e+00
  %2883 = fmul fast float %2882, %2876
  %2884 = fadd fast float %2883, 1.000000e+00
  %2885 = fmul fast float %2880, %1595
  %2886 = call float @dx.op.unary.f32(i32 7, float %2885)  ; Saturate(value)
  %2887 = call float @dx.op.binary.f32(i32 35, float %2886, float 0x3F947AE140000000)  ; FMax(a,b)
  %2888 = fmul fast float %2884, %1595
  %2889 = call float @dx.op.unary.f32(i32 7, float %2888)  ; Saturate(value)
  %2890 = fsub fast float %2889, %2887
  %2891 = fmul fast float %2890, %2873
  %2892 = fadd fast float %2891, %2887
  %2893 = fmul fast float %1595, 2.000000e+00
  %2894 = fmul fast float %2861, %2861
  %2895 = fmul fast float %2894, %2893
  %2896 = fadd fast float %2895, -5.000000e-01
  %2897 = fsub fast float 1.000000e+00, %2865
  %2898 = fmul fast float %2897, %2897
  %2899 = fmul fast float %2896, %2897
  %2900 = fmul fast float %2898, %2898
  %2901 = fmul fast float %2900, %2899
  %2902 = fadd fast float %2901, 1.000000e+00
  %2903 = fsub fast float 1.000000e+00, %1642
  %2904 = fmul fast float %2903, %2903
  %2905 = fmul fast float %2904, %2904
  %2906 = fmul fast float %2905, %2903
  %2907 = fmul fast float %2906, %2896
  %2908 = fadd fast float %2907, 1.000000e+00
  %2909 = fmul fast float %2908, 0x3FD45F3060000000
  %2910 = fmul fast float %2909, %2902
  %2911 = fmul fast float %1642, %1643
  %2912 = fmul fast float %2911, %249
  %2913 = fmul fast float %2912, %2910
  %2914 = fmul fast float %2911, %250
  %2915 = fmul fast float %2914, %2910
  %2916 = fmul fast float %2911, %251
  %2917 = fmul fast float %2916, %2910
  %2918 = fmul fast float %2892, %2892
  %2919 = fmul fast float %2918, %2918
  %2920 = fmul fast float %2887, %2887
  %2921 = fmul fast float %2920, %2920
  %2922 = fmul fast float %2889, %2889
  %2923 = fmul fast float %2922, %2922
  %2924 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %2924, label %2925, label %2932

; <label>:2925                                    ; preds = %2860
  %2926 = fmul fast float %1691, %1691
  %2927 = fmul fast float %2861, 0x400CCCCCC0000000
  %2928 = fadd fast float %2927, 0x3FD99999A0000000
  %2929 = fdiv fast float %2926, %2928
  %2930 = fadd fast float %2929, %2921
  %2931 = call float @dx.op.unary.f32(i32 7, float %2930)  ; Saturate(value)
  br label %2932

; <label>:2932                                    ; preds = %2925, %2860
  %2933 = phi float [ %2931, %2925 ], [ %2921, %2860 ]
  br i1 %2770, label %2934, label %2947

; <label>:2934                                    ; preds = %2932
  %2935 = fmul fast float %1689, 2.500000e-01
  %2936 = bitcast float %2933 to i32
  %2937 = ashr i32 %2936, 1
  %2938 = add nsw i32 %2937, 532487669
  %2939 = bitcast i32 %2938 to float
  %2940 = fmul fast float %2939, 3.000000e+00
  %2941 = fadd fast float %2940, %1689
  %2942 = fmul fast float %2935, %2941
  %2943 = fadd fast float %2861, 0x3F50624DE0000000
  %2944 = fdiv fast float %2942, %2943
  %2945 = fadd fast float %2944, %2933
  %2946 = fdiv fast float %2933, %2945
  br label %2947

; <label>:2947                                    ; preds = %2934, %2932
  %2948 = phi float [ %2945, %2934 ], [ %2933, %2932 ]
  %2949 = phi float [ %2946, %2934 ], [ 1.000000e+00, %2932 ]
  %2950 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %2950, label %2951, label %2970

; <label>:2951                                    ; preds = %2947
  %2952 = fsub fast float 0x3FF00068E0000000, %1625
  %2953 = fadd fast float %1625, 1.000000e+00
  %2954 = fdiv fast float %2952, %2953
  %2955 = call float @dx.op.unary.f32(i32 24, float %2954)  ; Sqrt(value)
  %2956 = fmul fast float %2955, 2.500000e-01
  %2957 = bitcast float %2948 to i32
  %2958 = ashr i32 %2957, 1
  %2959 = add nsw i32 %2958, 532487669
  %2960 = bitcast i32 %2959 to float
  %2961 = fmul fast float %2960, 3.000000e+00
  %2962 = fadd fast float %2955, %2961
  %2963 = fmul fast float %2956, %2962
  %2964 = fadd fast float %2861, 0x3F50624DE0000000
  %2965 = fdiv fast float %2963, %2964
  %2966 = fadd fast float %2965, %2948
  %2967 = fdiv fast float %2948, %2966
  %2968 = call float @dx.op.unary.f32(i32 24, float %2967)  ; Sqrt(value)
  %2969 = fmul fast float %2968, %2949
  br label %2970

; <label>:2970                                    ; preds = %2951, %2947
  %2971 = phi float [ %2969, %2951 ], [ %2949, %2947 ]
  br i1 %2924, label %2972, label %2979

; <label>:2972                                    ; preds = %2970
  %2973 = fmul fast float %1691, %1691
  %2974 = fmul fast float %2861, 0x400CCCCCC0000000
  %2975 = fadd fast float %2974, 0x3FD99999A0000000
  %2976 = fdiv fast float %2973, %2975
  %2977 = fadd fast float %2976, %2923
  %2978 = call float @dx.op.unary.f32(i32 7, float %2977)  ; Saturate(value)
  br label %2979

; <label>:2979                                    ; preds = %2972, %2970
  %2980 = phi float [ %2978, %2972 ], [ %2923, %2970 ]
  br i1 %2770, label %2981, label %2994

; <label>:2981                                    ; preds = %2979
  %2982 = fmul fast float %1689, 2.500000e-01
  %2983 = bitcast float %2980 to i32
  %2984 = ashr i32 %2983, 1
  %2985 = add nsw i32 %2984, 532487669
  %2986 = bitcast i32 %2985 to float
  %2987 = fmul fast float %2986, 3.000000e+00
  %2988 = fadd fast float %2987, %1689
  %2989 = fmul fast float %2982, %2988
  %2990 = fadd fast float %2861, 0x3F50624DE0000000
  %2991 = fdiv fast float %2989, %2990
  %2992 = fadd fast float %2991, %2980
  %2993 = fdiv fast float %2980, %2992
  br label %2994

; <label>:2994                                    ; preds = %2981, %2979
  %2995 = phi float [ %2992, %2981 ], [ %2980, %2979 ]
  %2996 = phi float [ %2993, %2981 ], [ 1.000000e+00, %2979 ]
  br i1 %2950, label %2997, label %3016

; <label>:2997                                    ; preds = %2994
  %2998 = fsub fast float 0x3FF00068E0000000, %1625
  %2999 = fadd fast float %1625, 1.000000e+00
  %3000 = fdiv fast float %2998, %2999
  %3001 = call float @dx.op.unary.f32(i32 24, float %3000)  ; Sqrt(value)
  %3002 = fmul fast float %3001, 2.500000e-01
  %3003 = bitcast float %2995 to i32
  %3004 = ashr i32 %3003, 1
  %3005 = add nsw i32 %3004, 532487669
  %3006 = bitcast i32 %3005 to float
  %3007 = fmul fast float %3006, 3.000000e+00
  %3008 = fadd fast float %3001, %3007
  %3009 = fmul fast float %3002, %3008
  %3010 = fadd fast float %2861, 0x3F50624DE0000000
  %3011 = fdiv fast float %3009, %3010
  %3012 = fadd fast float %3011, %2995
  %3013 = fdiv fast float %2995, %3012
  %3014 = call float @dx.op.unary.f32(i32 24, float %3013)  ; Sqrt(value)
  %3015 = fmul fast float %3014, %2996
  br label %3016

; <label>:3016                                    ; preds = %2997, %2994
  %3017 = phi float [ %3015, %2997 ], [ %2996, %2994 ]
  %3018 = fmul fast float %2980, %2862
  %3019 = fsub fast float %3018, %2862
  %3020 = fmul fast float %3019, %2862
  %3021 = fadd fast float %3020, 1.000000e+00
  %3022 = fmul fast float %3021, %3021
  %3023 = fmul fast float %3022, 0x400921FB60000000
  %3024 = fdiv fast float %2980, %3023
  %3025 = fmul fast float %3024, %3017
  %3026 = fmul fast float %2933, %2862
  %3027 = fsub fast float %3026, %2862
  %3028 = fmul fast float %3027, %2862
  %3029 = fadd fast float %3028, 1.000000e+00
  %3030 = fmul fast float %3029, %3029
  %3031 = fmul fast float %3030, 0x400921FB60000000
  %3032 = fdiv fast float %2933, %3031
  %3033 = fmul fast float %3032, %2971
  %3034 = fsub fast float %3025, %3033
  %3035 = fmul fast float %3034, %2873
  %3036 = fadd fast float %3035, %3033
  %3037 = call float @dx.op.unary.f32(i32 24, float %2919)  ; Sqrt(value)
  %3038 = fsub fast float 1.000000e+00, %3037
  %3039 = fmul fast float %3038, %2865
  %3040 = fadd fast float %3039, %3037
  %3041 = fmul fast float %3040, %1642
  %3042 = fmul fast float %3038, %1642
  %3043 = fadd fast float %3042, %3037
  %3044 = fmul fast float %3043, %2865
  %3045 = fadd fast float %3041, %3044
  %3046 = fdiv fast float 5.000000e-01, %3045
  %3047 = fsub fast float 1.000000e+00, %2861
  %3048 = fmul fast float %3047, %3047
  %3049 = fmul fast float %3048, %3048
  %3050 = fmul fast float %3049, %3047
  %3051 = fmul fast float %261, 5.000000e+01
  %3052 = call float @dx.op.unary.f32(i32 7, float %3051)  ; Saturate(value)
  %3053 = fmul fast float %3052, %3050
  %3054 = fsub fast float 1.000000e+00, %3050
  %3055 = fmul fast float %3054, %260
  %3056 = fmul fast float %3054, %261
  %3057 = fmul fast float %3054, %262
  %3058 = fadd fast float %3053, %3055
  %3059 = fadd fast float %3053, %3056
  %3060 = fadd fast float %3053, %3057
  %3061 = fmul fast float %3036, %3046
  %3062 = fmul fast float %3058, %2911
  %3063 = fmul fast float %3062, %3061
  %3064 = fmul fast float %3059, %2911
  %3065 = fmul fast float %3064, %3061
  %3066 = fmul fast float %3060, %2911
  %3067 = fmul fast float %3066, %3061
  br label %3936

; <label>:3068                                    ; preds = %1675
  %3069 = fcmp fast ogt float %1642, 0.000000e+00
  %3070 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3071 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %3069, label %3072, label %3273, !dx.controlflow.hints !119

; <label>:3072                                    ; preds = %3068
  %3073 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %3074 = fmul fast float %3071, 2.000000e+00
  %3075 = fadd fast float %3074, 2.000000e+00
  %3076 = call float @dx.op.unary.f32(i32 25, float %3075)  ; Rsqrt(value)
  %3077 = fadd fast float %3073, %3070
  %3078 = fmul fast float %3076, %3077
  %3079 = call float @dx.op.unary.f32(i32 7, float %3078)  ; Saturate(value)
  %3080 = fmul fast float %3076, %3071
  %3081 = fadd fast float %3080, %3076
  %3082 = call float @dx.op.unary.f32(i32 7, float %3081)  ; Saturate(value)
  %3083 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %3083, label %3084, label %3173

; <label>:3084                                    ; preds = %3072
  %3085 = fmul fast float %1689, %1689
  %3086 = fsub fast float 1.000000e+00, %3085
  %3087 = call float @dx.op.unary.f32(i32 24, float %3086)  ; Sqrt(value)
  %3088 = fmul fast float %3070, 2.000000e+00
  %3089 = fmul fast float %3088, %3073
  %3090 = fsub fast float %3089, %3071
  %3091 = fcmp fast ult float %3090, %3087
  br i1 %3091, label %3094, label %3092

; <label>:3092                                    ; preds = %3084
  %3093 = call float @dx.op.unary.f32(i32 6, float %3073)  ; FAbs(value)
  br label %3173

; <label>:3094                                    ; preds = %3084
  %3095 = fmul fast float %3090, %3090
  %3096 = fsub fast float 1.000000e+00, %3095
  %3097 = call float @dx.op.unary.f32(i32 25, float %3096)  ; Rsqrt(value)
  %3098 = fmul fast float %3097, %1689
  %3099 = fmul fast float %3090, %3070
  %3100 = fsub fast float %3073, %3099
  %3101 = fmul fast float %3098, %3100
  %3102 = fmul fast float %3073, %3073
  %3103 = fmul fast float %3102, 2.000000e+00
  %3104 = fadd fast float %3103, -1.000000e+00
  %3105 = fmul fast float %3090, %3071
  %3106 = fsub fast float %3104, %3105
  %3107 = fmul fast float %3098, %3106
  %3108 = fmul fast float %3070, %3070
  %3109 = fsub fast float 1.000000e+00, %3108
  %3110 = fsub fast float %3109, %3102
  %3111 = fmul fast float %3071, %3071
  %3112 = fsub fast float %3110, %3111
  %3113 = fmul fast float %3089, %3071
  %3114 = fadd fast float %3112, %3113
  %3115 = call float @dx.op.unary.f32(i32 7, float %3114)  ; Saturate(value)
  %3116 = call float @dx.op.unary.f32(i32 24, float %3115)  ; Sqrt(value)
  %3117 = fmul fast float %3116, %3098
  %3118 = fmul fast float %3073, 2.000000e+00
  %3119 = fmul fast float %3118, %3098
  %3120 = fmul fast float %3119, %3116
  %3121 = fmul fast float %3087, %3070
  %3122 = fadd fast float %3121, %3073
  %3123 = fadd fast float %3122, %3101
  %3124 = fmul fast float %3087, %3071
  %3125 = fadd fast float %3124, 1.000000e+00
  %3126 = fadd fast float %3125, %3107
  %3127 = fmul fast float %3117, %3126
  %3128 = fmul fast float %3123, %3126
  %3129 = fmul fast float %3120, %3123
  %3130 = fmul fast float %3127, 5.000000e-01
  %3131 = fmul fast float %3123, 2.500000e-01
  %3132 = fmul fast float %3131, %3120
  %3133 = fsub fast float %3132, %3130
  %3134 = fmul fast float %3133, %3128
  %3135 = fmul fast float %3127, %3127
  %3136 = fmul fast float %3127, 2.000000e+00
  %3137 = fsub fast float %3129, %3136
  %3138 = fmul fast float %3137, %3129
  %3139 = fadd fast float %3138, %3135
  %3140 = fmul fast float %3126, %3126
  %3141 = fmul fast float %3140, %3122
  %3142 = fadd fast float %3126, %3124
  %3143 = fmul fast float %3142, 5.000000e-01
  %3144 = fsub fast float -5.000000e-01, %3143
  %3145 = fmul fast float %3144, %3128
  %3146 = fadd fast float %3145, %3141
  %3147 = fmul fast float %3146, %3123
  %3148 = fadd fast float %3139, %3147
  %3149 = fmul fast float %3134, 2.000000e+00
  %3150 = fmul fast float %3148, %3148
  %3151 = fmul fast float %3134, %3134
  %3152 = fadd fast float %3150, %3151
  %3153 = fdiv fast float %3149, %3152
  %3154 = fmul fast float %3148, %3153
  %3155 = fmul fast float %3134, %3153
  %3156 = fsub fast float 1.000000e+00, %3155
  %3157 = fmul fast float %3156, %3101
  %3158 = fmul fast float %3154, %3117
  %3159 = fmul fast float %3156, %3107
  %3160 = fmul fast float %3154, %3120
  %3161 = fadd fast float %3160, %3124
  %3162 = fadd fast float %3161, %3159
  %3163 = fmul fast float %3162, 2.000000e+00
  %3164 = fadd fast float %3163, 2.000000e+00
  %3165 = call float @dx.op.unary.f32(i32 25, float %3164)  ; Rsqrt(value)
  %3166 = fadd fast float %3122, %3158
  %3167 = fadd fast float %3166, %3157
  %3168 = fmul fast float %3167, %3165
  %3169 = call float @dx.op.unary.f32(i32 7, float %3168)  ; Saturate(value)
  %3170 = fmul fast float %3162, %3165
  %3171 = fadd fast float %3170, %3165
  %3172 = call float @dx.op.unary.f32(i32 7, float %3171)  ; Saturate(value)
  br label %3173

; <label>:3173                                    ; preds = %3094, %3092, %3072
  %3174 = phi float [ %3093, %3092 ], [ %3172, %3094 ], [ %3082, %3072 ]
  %3175 = phi float [ 1.000000e+00, %3092 ], [ %3169, %3094 ], [ %3079, %3072 ]
  %3176 = call float @dx.op.unary.f32(i32 6, float %3073)  ; FAbs(value)
  %3177 = fadd fast float %3176, 0x3EE4F8B580000000
  %3178 = call float @dx.op.unary.f32(i32 7, float %3177)  ; Saturate(value)
  %3179 = fmul fast float %249, 0x3FD45F3060000000
  %3180 = fmul fast float %250, 0x3FD45F3060000000
  %3181 = fmul fast float %251, 0x3FD45F3060000000
  %3182 = fmul fast float %1642, %1643
  %3183 = fmul fast float %3179, %3182
  %3184 = fmul fast float %3180, %3182
  %3185 = fmul fast float %3181, %3182
  %3186 = fmul fast float %1595, %1595
  %3187 = fmul fast float %3186, %3186
  %3188 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %3188, label %3189, label %3196

; <label>:3189                                    ; preds = %3173
  %3190 = fmul fast float %1691, %1691
  %3191 = fmul fast float %3174, 0x400CCCCCC0000000
  %3192 = fadd fast float %3191, 0x3FD99999A0000000
  %3193 = fdiv fast float %3190, %3192
  %3194 = fadd fast float %3193, %3187
  %3195 = call float @dx.op.unary.f32(i32 7, float %3194)  ; Saturate(value)
  br label %3196

; <label>:3196                                    ; preds = %3189, %3173
  %3197 = phi float [ %3195, %3189 ], [ %3187, %3173 ]
  br i1 %3083, label %3198, label %3211

; <label>:3198                                    ; preds = %3196
  %3199 = fmul fast float %1689, 2.500000e-01
  %3200 = bitcast float %3197 to i32
  %3201 = ashr i32 %3200, 1
  %3202 = add nsw i32 %3201, 532487669
  %3203 = bitcast i32 %3202 to float
  %3204 = fmul fast float %3203, 3.000000e+00
  %3205 = fadd fast float %3204, %1689
  %3206 = fmul fast float %3199, %3205
  %3207 = fadd fast float %3174, 0x3F50624DE0000000
  %3208 = fdiv fast float %3206, %3207
  %3209 = fadd fast float %3208, %3197
  %3210 = fdiv fast float %3197, %3209
  br label %3211

; <label>:3211                                    ; preds = %3198, %3196
  %3212 = phi float [ %3209, %3198 ], [ %3197, %3196 ]
  %3213 = phi float [ %3210, %3198 ], [ 1.000000e+00, %3196 ]
  %3214 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %3214, label %3215, label %3234

; <label>:3215                                    ; preds = %3211
  %3216 = fsub fast float 0x3FF00068E0000000, %1625
  %3217 = fadd fast float %1625, 1.000000e+00
  %3218 = fdiv fast float %3216, %3217
  %3219 = call float @dx.op.unary.f32(i32 24, float %3218)  ; Sqrt(value)
  %3220 = fmul fast float %3219, 2.500000e-01
  %3221 = bitcast float %3212 to i32
  %3222 = ashr i32 %3221, 1
  %3223 = add nsw i32 %3222, 532487669
  %3224 = bitcast i32 %3223 to float
  %3225 = fmul fast float %3224, 3.000000e+00
  %3226 = fadd fast float %3219, %3225
  %3227 = fmul fast float %3220, %3226
  %3228 = fadd fast float %3174, 0x3F50624DE0000000
  %3229 = fdiv fast float %3227, %3228
  %3230 = fadd fast float %3229, %3212
  %3231 = fdiv fast float %3212, %3230
  %3232 = call float @dx.op.unary.f32(i32 24, float %3231)  ; Sqrt(value)
  %3233 = fmul fast float %3232, %3213
  br label %3234

; <label>:3234                                    ; preds = %3215, %3211
  %3235 = phi float [ %3233, %3215 ], [ %3213, %3211 ]
  %3236 = fmul fast float %3197, %3175
  %3237 = fsub fast float %3236, %3175
  %3238 = fmul fast float %3237, %3175
  %3239 = fadd fast float %3238, 1.000000e+00
  %3240 = fmul fast float %3239, %3239
  %3241 = fmul fast float %3240, 0x400921FB60000000
  %3242 = fdiv fast float %3197, %3241
  %3243 = fmul fast float %3242, %3235
  %3244 = call float @dx.op.unary.f32(i32 24, float %3197)  ; Sqrt(value)
  %3245 = fsub fast float 1.000000e+00, %3244
  %3246 = fmul fast float %3245, %3178
  %3247 = fadd fast float %3246, %3244
  %3248 = fmul fast float %3247, %1642
  %3249 = fmul fast float %3245, %1642
  %3250 = fadd fast float %3249, %3244
  %3251 = fmul fast float %3250, %3178
  %3252 = fadd fast float %3248, %3251
  %3253 = fdiv fast float 5.000000e-01, %3252
  %3254 = fsub fast float 1.000000e+00, %3174
  %3255 = fmul fast float %3254, %3254
  %3256 = fmul fast float %3255, %3255
  %3257 = fmul fast float %3256, %3254
  %3258 = fmul fast float %261, 5.000000e+01
  %3259 = call float @dx.op.unary.f32(i32 7, float %3258)  ; Saturate(value)
  %3260 = fmul fast float %3259, %3257
  %3261 = fsub fast float 1.000000e+00, %3257
  %3262 = fmul fast float %3261, %260
  %3263 = fmul fast float %3261, %261
  %3264 = fmul fast float %3261, %262
  %3265 = fadd fast float %3260, %3262
  %3266 = fadd fast float %3260, %3263
  %3267 = fadd fast float %3260, %3264
  %3268 = fmul fast float %3243, %3253
  %3269 = fmul fast float %3268, %3182
  %3270 = fmul fast float %3269, %3265
  %3271 = fmul fast float %3269, %3266
  %3272 = fmul fast float %3269, %3267
  br label %3273

; <label>:3273                                    ; preds = %3234, %3068
  %3274 = phi float [ %3270, %3234 ], [ 0.000000e+00, %3068 ]
  %3275 = phi float [ %3271, %3234 ], [ 0.000000e+00, %3068 ]
  %3276 = phi float [ %3272, %3234 ], [ 0.000000e+00, %3068 ]
  %3277 = phi float [ %3183, %3234 ], [ 0.000000e+00, %3068 ]
  %3278 = phi float [ %3184, %3234 ], [ 0.000000e+00, %3068 ]
  %3279 = phi float [ %3185, %3234 ], [ 0.000000e+00, %3068 ]
  %3280 = fmul fast float %214, %214
  %3281 = fmul fast float %215, %215
  %3282 = fmul fast float %216, %216
  %3283 = fsub fast float 5.000000e-01, %3070
  %3284 = fmul fast float %3283, 0x3FDC71C720000000
  %3285 = call float @dx.op.unary.f32(i32 7, float %3284)  ; Saturate(value)
  %3286 = fsub fast float -0.000000e+00, %3071
  %3287 = call float @dx.op.unary.f32(i32 7, float %3286)  ; Saturate(value)
  %3288 = fmul fast float %3287, %3287
  %3289 = fmul fast float %3288, 0x3FE47AE140000000
  %3290 = fsub fast float 1.000000e+00, %3289
  %3291 = fmul fast float %3288, 0x400015BFA0000000
  %3292 = fsub fast float 0x400921FB60000000, %3291
  %3293 = fmul fast float %3292, %3290
  %3294 = fdiv fast float 0x3FD70A3D80000000, %3293
  %3295 = fmul fast float %3285, %1643
  %3296 = fmul fast float %3295, %3294
  %3297 = fmul fast float %3280, %3296
  %3298 = fmul fast float %3281, %3296
  %3299 = fmul fast float %3282, %3296
  br label %3936

; <label>:3300                                    ; preds = %1675
  %3301 = call float @dx.op.binary.f32(i32 35, float %1595, float 0x3F70101020000000)  ; FMax(a,b)
  %3302 = call float @dx.op.binary.f32(i32 36, float %3301, float 1.000000e+00)  ; FMin(a,b)
  %3303 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3304 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3305 = call float @dx.op.binary.f32(i32 35, float %3304, float -1.000000e+00)  ; FMax(a,b)
  %3306 = call float @dx.op.binary.f32(i32 36, float %3305, float 1.000000e+00)  ; FMin(a,b)
  %3307 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %3308 = call float @dx.op.binary.f32(i32 35, float %3307, float -1.000000e+00)  ; FMax(a,b)
  %3309 = call float @dx.op.binary.f32(i32 36, float %3308, float 1.000000e+00)  ; FMin(a,b)
  %3310 = call float @dx.op.unary.f32(i32 6, float %3309)  ; FAbs(value)
  %3311 = fmul fast float %3310, 0x3FC40AE960000000
  %3312 = fsub fast float 0x3FF921FB60000000, %3311
  %3313 = fsub fast float 1.000000e+00, %3310
  %3314 = call float @dx.op.unary.f32(i32 24, float %3313)  ; Sqrt(value)
  %3315 = fmul fast float %3312, %3314
  %3316 = fcmp fast oge float %3309, 0.000000e+00
  %3317 = fsub fast float 0x400921FB60000000, %3315
  %3318 = select i1 %3316, float %3315, float %3317
  %3319 = call float @dx.op.unary.f32(i32 6, float %3306)  ; FAbs(value)
  %3320 = fmul fast float %3319, 0x3FC40AE960000000
  %3321 = fsub fast float 0x3FF921FB60000000, %3320
  %3322 = fsub fast float 1.000000e+00, %3319
  %3323 = call float @dx.op.unary.f32(i32 24, float %3322)  ; Sqrt(value)
  %3324 = fmul fast float %3321, %3323
  %3325 = fcmp fast oge float %3306, 0.000000e+00
  %3326 = fsub fast float 0x400921FB60000000, %3324
  %3327 = select i1 %3325, float %3324, float %3326
  %3328 = fsub fast float %3327, %3318
  %3329 = call float @dx.op.unary.f32(i32 6, float %3328)  ; FAbs(value)
  %3330 = fmul fast float %3329, 5.000000e-01
  %3331 = call float @dx.op.unary.f32(i32 12, float %3330)  ; Cos(value)
  %3332 = fmul fast float %3306, %220
  %3333 = fmul fast float %3306, %221
  %3334 = fmul fast float %3306, %222
  %3335 = fsub fast float %1681, %3332
  %3336 = fsub fast float %1682, %3333
  %3337 = fsub fast float %1683, %3334
  %3338 = fmul fast float %3309, %220
  %3339 = fmul fast float %3309, %221
  %3340 = fmul fast float %3309, %222
  %3341 = fsub fast float %1539, %3338
  %3342 = fsub fast float %1540, %3339
  %3343 = fsub fast float %1541, %3340
  %3344 = call float @dx.op.dot3.f32(i32 55, float %3335, float %3336, float %3337, float %3341, float %3342, float %3343)  ; Dot3(ax,ay,az,bx,by,bz)
  %3345 = call float @dx.op.dot3.f32(i32 55, float %3335, float %3336, float %3337, float %3335, float %3336, float %3337)  ; Dot3(ax,ay,az,bx,by,bz)
  %3346 = call float @dx.op.dot3.f32(i32 55, float %3341, float %3342, float %3343, float %3341, float %3342, float %3343)  ; Dot3(ax,ay,az,bx,by,bz)
  %3347 = fmul fast float %3346, %3345
  %3348 = fadd fast float %3347, 0x3F1A36E2E0000000
  %3349 = call float @dx.op.unary.f32(i32 25, float %3348)  ; Rsqrt(value)
  %3350 = fmul fast float %3349, %3344
  %3351 = fmul fast float %3350, 5.000000e-01
  %3352 = fadd fast float %3351, 5.000000e-01
  %3353 = call float @dx.op.unary.f32(i32 7, float %3352)  ; Saturate(value)
  %3354 = call float @dx.op.unary.f32(i32 24, float %3353)  ; Sqrt(value)
  %3355 = fmul fast float %3302, %3302
  %3356 = fmul fast float %3355, 2.000000e+00
  %3357 = fmul fast float %3354, 0x3FEFEBF020000000
  %3358 = fmul fast float %3309, %3309
  %3359 = fsub fast float 1.000000e+00, %3358
  %3360 = call float @dx.op.unary.f32(i32 24, float %3359)  ; Sqrt(value)
  %3361 = fmul fast float %3357, %3360
  %3362 = fmul fast float %3309, 0x3FB1E7C640000000
  %3363 = fsub fast float %3361, %3362
  %3364 = fmul fast float %3363, 0x3FC1E7C640000000
  %3365 = fadd fast float %3309, %3306
  %3366 = fadd fast float %3365, %3364
  %3367 = fmul fast float %3355, 0x3FF6A09E60000000
  %3368 = fmul fast float %3367, %3354
  %3369 = call float @dx.op.binary.f32(i32 35, float %3368, float 0x3F847AE140000000)  ; FMax(a,b)
  %3370 = fmul fast float %3366, %3366
  %3371 = fmul fast float %3370, -5.000000e-01
  %3372 = fmul fast float %3368, %3368
  %3373 = fdiv fast float %3371, %3372
  %3374 = fmul fast float %3373, 0x3FF7154760000000
  %3375 = call float @dx.op.unary.f32(i32 21, float %3374)  ; Exp(value)
  %3376 = fmul fast float %3369, 0x40040D9320000000
  %3377 = fdiv fast float %3375, %3376
  %3378 = fmul fast float %3303, 5.000000e-01
  %3379 = fadd fast float %3378, 5.000000e-01
  %3380 = call float @dx.op.unary.f32(i32 7, float %3379)  ; Saturate(value)
  %3381 = call float @dx.op.unary.f32(i32 24, float %3380)  ; Sqrt(value)
  %3382 = fsub fast float 1.000000e+00, %3381
  %3383 = fmul fast float %3382, %3382
  %3384 = fmul fast float %3382, 0x3FEE82E740000000
  %3385 = fmul fast float %3383, %3383
  %3386 = fmul fast float %3385, %3384
  %3387 = fadd fast float %3386, 0x3FA7D18B20000000
  %3388 = fsub fast float -0.000000e+00, %3303
  %3389 = call float @dx.op.unary.f32(i32 7, float %3388)  ; Saturate(value)
  %3390 = fsub fast float 1.000000e+00, %3389
  %3391 = fmul fast float %182, 5.000000e-01
  %3392 = fmul fast float %3391, %3354
  %3393 = fmul fast float %3392, %3377
  %3394 = fmul fast float %3393, %3390
  %3395 = fmul fast float %3394, %3387
  %3396 = fadd fast float %3306, 0xBFC1EB8520000000
  %3397 = fadd fast float %3396, %3309
  %3398 = call float @dx.op.binary.f32(i32 35, float %3356, float 0x3F847AE140000000)  ; FMax(a,b)
  %3399 = fmul fast float %3397, %3397
  %3400 = fmul fast float %3399, -5.000000e-01
  %3401 = fmul fast float %3356, %3356
  %3402 = fdiv fast float %3400, %3401
  %3403 = fmul fast float %3402, 0x3FF7154760000000
  %3404 = call float @dx.op.unary.f32(i32 21, float %3403)  ; Exp(value)
  %3405 = fmul fast float %3398, 0x40040D9320000000
  %3406 = fdiv fast float %3404, %3405
  %3407 = fmul fast float %3331, 5.000000e-01
  %3408 = fsub fast float 1.000000e+00, %3407
  %3409 = fmul fast float %3408, %3408
  %3410 = fmul fast float %3331, 0x3FDE82E740000000
  %3411 = fsub fast float 0x3FEE82E740000000, %3410
  %3412 = fmul fast float %3409, %3409
  %3413 = fmul fast float %3412, %3411
  %3414 = fadd fast float %3413, 0x3FA7D18B20000000
  %3415 = fsub fast float 0x3FEE82E740000000, %3413
  %3416 = fdiv fast float 0x3FE99999A0000000, %3331
  %3417 = call float @dx.op.unary.f32(i32 6, float %187)  ; FAbs(value)
  %3418 = call float @dx.op.unary.f32(i32 6, float %188)  ; FAbs(value)
  %3419 = call float @dx.op.unary.f32(i32 6, float %189)  ; FAbs(value)
  %3420 = call float @dx.op.unary.f32(i32 23, float %3417)  ; Log(value)
  %3421 = call float @dx.op.unary.f32(i32 23, float %3418)  ; Log(value)
  %3422 = call float @dx.op.unary.f32(i32 23, float %3419)  ; Log(value)
  %3423 = fmul fast float %3420, %3416
  %3424 = fmul fast float %3421, %3416
  %3425 = fmul fast float %3422, %3416
  %3426 = call float @dx.op.unary.f32(i32 21, float %3423)  ; Exp(value)
  %3427 = call float @dx.op.unary.f32(i32 21, float %3424)  ; Exp(value)
  %3428 = call float @dx.op.unary.f32(i32 21, float %3425)  ; Exp(value)
  %3429 = fmul fast float %3350, 0x4038869BE0000000
  %3430 = fadd fast float %3429, 0xC038355B40000000
  %3431 = call float @dx.op.unary.f32(i32 21, float %3430)  ; Exp(value)
  %3432 = fmul fast float %3415, %3415
  %3433 = fmul fast float %3432, %3414
  %3434 = fmul fast float %3433, %3406
  %3435 = fmul fast float %3434, %3431
  %3436 = fmul fast float %3435, %3426
  %3437 = fmul fast float %3435, %3427
  %3438 = fmul fast float %3435, %3428
  %3439 = fadd fast float %3395, %3436
  %3440 = fadd fast float %3395, %3437
  %3441 = fadd fast float %3395, %3438
  %3442 = call float @dx.op.unary.f32(i32 6, float %3304)  ; FAbs(value)
  %3443 = fsub fast float 1.000000e+00, %3442
  %3444 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %220, float %221, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %3445 = fmul fast float %3444, %220
  %3446 = fmul fast float %3444, %221
  %3447 = fmul fast float %3444, %222
  %3448 = fsub fast float %1539, %3445
  %3449 = fsub fast float %1540, %3446
  %3450 = fsub fast float %1541, %3447
  %3451 = call float @dx.op.dot3.f32(i32 55, float %3448, float %3449, float %3450, float %3448, float %3449, float %3450)  ; Dot3(ax,ay,az,bx,by,bz)
  %3452 = call float @dx.op.unary.f32(i32 25, float %3451)  ; Rsqrt(value)
  %3453 = fmul fast float %3448, %3452
  %3454 = fmul fast float %3449, %3452
  %3455 = fmul fast float %3450, %3452
  %3456 = call float @dx.op.dot3.f32(i32 55, float %3453, float %3454, float %3455, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3457 = fadd fast float %3456, 1.000000e+00
  %3458 = fmul fast float %3457, 2.500000e-01
  %3459 = call float @dx.op.unary.f32(i32 7, float %3458)  ; Saturate(value)
  %3460 = fsub fast float %3443, %3459
  %3461 = fmul fast float %3460, 0x3FD51EB860000000
  %3462 = fadd fast float %3461, %3459
  %3463 = fmul fast float %224, 0x3FD45F3060000000
  %3464 = fmul fast float %3463, %3462
  %3465 = call float @dx.op.unary.f32(i32 24, float %3417)  ; Sqrt(value)
  %3466 = call float @dx.op.unary.f32(i32 24, float %3418)  ; Sqrt(value)
  %3467 = call float @dx.op.unary.f32(i32 24, float %3419)  ; Sqrt(value)
  %3468 = fmul fast float %3464, %3465
  %3469 = fmul fast float %3466, %3464
  %3470 = fmul fast float %3467, %3464
  %3471 = fadd fast float %3439, %3468
  %3472 = fadd fast float %3440, %3469
  %3473 = fadd fast float %3441, %3470
  %3474 = fsub fast float -0.000000e+00, %3471
  %3475 = fsub fast float -0.000000e+00, %3472
  %3476 = fsub fast float -0.000000e+00, %3473
  %3477 = call float @dx.op.binary.f32(i32 36, float %3474, float 0.000000e+00)  ; FMin(a,b)
  %3478 = call float @dx.op.binary.f32(i32 36, float %3475, float 0.000000e+00)  ; FMin(a,b)
  %3479 = call float @dx.op.binary.f32(i32 36, float %3476, float 0.000000e+00)  ; FMin(a,b)
  %3480 = fmul fast float %1643, %3477
  %3481 = fsub fast float -0.000000e+00, %3480
  %3482 = fmul fast float %1643, %3478
  %3483 = fsub fast float -0.000000e+00, %3482
  %3484 = fmul fast float %1643, %3479
  %3485 = fsub fast float -0.000000e+00, %3484
  br label %3936

; <label>:3486                                    ; preds = %1675
  %3487 = fmul fast float %214, %214
  %3488 = fmul fast float %215, %215
  %3489 = fmul fast float %216, %216
  %3490 = call float @dx.op.unary.f32(i32 7, float %217)  ; Saturate(value)
  %3491 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3492 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %3493 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3494 = fmul fast float %3493, 2.000000e+00
  %3495 = fadd fast float %3494, 2.000000e+00
  %3496 = call float @dx.op.unary.f32(i32 25, float %3495)  ; Rsqrt(value)
  %3497 = fadd fast float %3492, %3491
  %3498 = fmul fast float %3496, %3497
  %3499 = call float @dx.op.unary.f32(i32 7, float %3498)  ; Saturate(value)
  %3500 = fmul fast float %3496, %3493
  %3501 = fadd fast float %3500, %3496
  %3502 = call float @dx.op.unary.f32(i32 7, float %3501)  ; Saturate(value)
  %3503 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %3503, label %3504, label %3593

; <label>:3504                                    ; preds = %3486
  %3505 = fmul fast float %1689, %1689
  %3506 = fsub fast float 1.000000e+00, %3505
  %3507 = call float @dx.op.unary.f32(i32 24, float %3506)  ; Sqrt(value)
  %3508 = fmul fast float %3491, 2.000000e+00
  %3509 = fmul fast float %3508, %3492
  %3510 = fsub fast float %3509, %3493
  %3511 = fcmp fast ult float %3510, %3507
  br i1 %3511, label %3514, label %3512

; <label>:3512                                    ; preds = %3504
  %3513 = call float @dx.op.unary.f32(i32 6, float %3492)  ; FAbs(value)
  br label %3593

; <label>:3514                                    ; preds = %3504
  %3515 = fmul fast float %3510, %3510
  %3516 = fsub fast float 1.000000e+00, %3515
  %3517 = call float @dx.op.unary.f32(i32 25, float %3516)  ; Rsqrt(value)
  %3518 = fmul fast float %3517, %1689
  %3519 = fmul fast float %3510, %3491
  %3520 = fsub fast float %3492, %3519
  %3521 = fmul fast float %3518, %3520
  %3522 = fmul fast float %3492, %3492
  %3523 = fmul fast float %3522, 2.000000e+00
  %3524 = fadd fast float %3523, -1.000000e+00
  %3525 = fmul fast float %3510, %3493
  %3526 = fsub fast float %3524, %3525
  %3527 = fmul fast float %3518, %3526
  %3528 = fmul fast float %3491, %3491
  %3529 = fsub fast float 1.000000e+00, %3528
  %3530 = fsub fast float %3529, %3522
  %3531 = fmul fast float %3493, %3493
  %3532 = fsub fast float %3530, %3531
  %3533 = fmul fast float %3509, %3493
  %3534 = fadd fast float %3532, %3533
  %3535 = call float @dx.op.unary.f32(i32 7, float %3534)  ; Saturate(value)
  %3536 = call float @dx.op.unary.f32(i32 24, float %3535)  ; Sqrt(value)
  %3537 = fmul fast float %3536, %3518
  %3538 = fmul fast float %3492, 2.000000e+00
  %3539 = fmul fast float %3538, %3518
  %3540 = fmul fast float %3539, %3536
  %3541 = fmul fast float %3507, %3491
  %3542 = fadd fast float %3541, %3492
  %3543 = fadd fast float %3542, %3521
  %3544 = fmul fast float %3507, %3493
  %3545 = fadd fast float %3544, 1.000000e+00
  %3546 = fadd fast float %3545, %3527
  %3547 = fmul fast float %3537, %3546
  %3548 = fmul fast float %3543, %3546
  %3549 = fmul fast float %3540, %3543
  %3550 = fmul fast float %3547, 5.000000e-01
  %3551 = fmul fast float %3543, 2.500000e-01
  %3552 = fmul fast float %3551, %3540
  %3553 = fsub fast float %3552, %3550
  %3554 = fmul fast float %3553, %3548
  %3555 = fmul fast float %3547, %3547
  %3556 = fmul fast float %3547, 2.000000e+00
  %3557 = fsub fast float %3549, %3556
  %3558 = fmul fast float %3557, %3549
  %3559 = fadd fast float %3558, %3555
  %3560 = fmul fast float %3546, %3546
  %3561 = fmul fast float %3560, %3542
  %3562 = fadd fast float %3546, %3544
  %3563 = fmul fast float %3562, 5.000000e-01
  %3564 = fsub fast float -5.000000e-01, %3563
  %3565 = fmul fast float %3564, %3548
  %3566 = fadd fast float %3565, %3561
  %3567 = fmul fast float %3566, %3543
  %3568 = fadd fast float %3559, %3567
  %3569 = fmul fast float %3554, 2.000000e+00
  %3570 = fmul fast float %3568, %3568
  %3571 = fmul fast float %3554, %3554
  %3572 = fadd fast float %3570, %3571
  %3573 = fdiv fast float %3569, %3572
  %3574 = fmul fast float %3568, %3573
  %3575 = fmul fast float %3554, %3573
  %3576 = fsub fast float 1.000000e+00, %3575
  %3577 = fmul fast float %3576, %3521
  %3578 = fmul fast float %3574, %3537
  %3579 = fmul fast float %3576, %3527
  %3580 = fmul fast float %3574, %3540
  %3581 = fadd fast float %3580, %3544
  %3582 = fadd fast float %3581, %3579
  %3583 = fmul fast float %3582, 2.000000e+00
  %3584 = fadd fast float %3583, 2.000000e+00
  %3585 = call float @dx.op.unary.f32(i32 25, float %3584)  ; Rsqrt(value)
  %3586 = fadd fast float %3542, %3578
  %3587 = fadd fast float %3586, %3577
  %3588 = fmul fast float %3587, %3585
  %3589 = call float @dx.op.unary.f32(i32 7, float %3588)  ; Saturate(value)
  %3590 = fmul fast float %3582, %3585
  %3591 = fadd fast float %3590, %3585
  %3592 = call float @dx.op.unary.f32(i32 7, float %3591)  ; Saturate(value)
  br label %3593

; <label>:3593                                    ; preds = %3514, %3512, %3486
  %3594 = phi float [ %3513, %3512 ], [ %3592, %3514 ], [ %3502, %3486 ]
  %3595 = phi float [ 1.000000e+00, %3512 ], [ %3589, %3514 ], [ %3499, %3486 ]
  %3596 = call float @dx.op.unary.f32(i32 6, float %3492)  ; FAbs(value)
  %3597 = fadd fast float %3596, 0x3EE4F8B580000000
  %3598 = call float @dx.op.unary.f32(i32 7, float %3597)  ; Saturate(value)
  %3599 = fmul fast float %1642, %1643
  %3600 = fmul fast float %1595, %1595
  %3601 = fmul fast float %3600, %3600
  %3602 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %3602, label %3603, label %3610

; <label>:3603                                    ; preds = %3593
  %3604 = fmul fast float %1691, %1691
  %3605 = fmul fast float %3594, 0x400CCCCCC0000000
  %3606 = fadd fast float %3605, 0x3FD99999A0000000
  %3607 = fdiv fast float %3604, %3606
  %3608 = fadd fast float %3607, %3601
  %3609 = call float @dx.op.unary.f32(i32 7, float %3608)  ; Saturate(value)
  br label %3610

; <label>:3610                                    ; preds = %3603, %3593
  %3611 = phi float [ %3609, %3603 ], [ %3601, %3593 ]
  br i1 %3503, label %3612, label %3625

; <label>:3612                                    ; preds = %3610
  %3613 = fmul fast float %1689, 2.500000e-01
  %3614 = bitcast float %3611 to i32
  %3615 = ashr i32 %3614, 1
  %3616 = add nsw i32 %3615, 532487669
  %3617 = bitcast i32 %3616 to float
  %3618 = fmul fast float %3617, 3.000000e+00
  %3619 = fadd fast float %3618, %1689
  %3620 = fmul fast float %3613, %3619
  %3621 = fadd fast float %3594, 0x3F50624DE0000000
  %3622 = fdiv fast float %3620, %3621
  %3623 = fadd fast float %3622, %3611
  %3624 = fdiv fast float %3611, %3623
  br label %3625

; <label>:3625                                    ; preds = %3612, %3610
  %3626 = phi float [ %3623, %3612 ], [ %3611, %3610 ]
  %3627 = phi float [ %3624, %3612 ], [ 1.000000e+00, %3610 ]
  %3628 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %3628, label %3629, label %3648

; <label>:3629                                    ; preds = %3625
  %3630 = fsub fast float 0x3FF00068E0000000, %1625
  %3631 = fadd fast float %1625, 1.000000e+00
  %3632 = fdiv fast float %3630, %3631
  %3633 = call float @dx.op.unary.f32(i32 24, float %3632)  ; Sqrt(value)
  %3634 = fmul fast float %3633, 2.500000e-01
  %3635 = bitcast float %3626 to i32
  %3636 = ashr i32 %3635, 1
  %3637 = add nsw i32 %3636, 532487669
  %3638 = bitcast i32 %3637 to float
  %3639 = fmul fast float %3638, 3.000000e+00
  %3640 = fadd fast float %3633, %3639
  %3641 = fmul fast float %3634, %3640
  %3642 = fadd fast float %3594, 0x3F50624DE0000000
  %3643 = fdiv fast float %3641, %3642
  %3644 = fadd fast float %3643, %3626
  %3645 = fdiv fast float %3626, %3644
  %3646 = call float @dx.op.unary.f32(i32 24, float %3645)  ; Sqrt(value)
  %3647 = fmul fast float %3646, %3627
  br label %3648

; <label>:3648                                    ; preds = %3629, %3625
  %3649 = phi float [ %3647, %3629 ], [ %3627, %3625 ]
  %3650 = fmul fast float %3611, %3595
  %3651 = fsub fast float %3650, %3595
  %3652 = fmul fast float %3651, %3595
  %3653 = fadd fast float %3652, 1.000000e+00
  %3654 = fmul fast float %3653, %3653
  %3655 = fmul fast float %3654, 0x400921FB60000000
  %3656 = fdiv fast float %3611, %3655
  %3657 = fmul fast float %3656, %3649
  %3658 = call float @dx.op.unary.f32(i32 24, float %3611)  ; Sqrt(value)
  %3659 = fsub fast float 1.000000e+00, %3658
  %3660 = fmul fast float %3659, %3598
  %3661 = fadd fast float %3660, %3658
  %3662 = fmul fast float %3661, %1642
  %3663 = fmul fast float %3659, %1642
  %3664 = fadd fast float %3663, %3658
  %3665 = fmul fast float %3664, %3598
  %3666 = fadd fast float %3662, %3665
  %3667 = fdiv fast float 5.000000e-01, %3666
  %3668 = fsub fast float 1.000000e+00, %3594
  %3669 = fmul fast float %3668, %3668
  %3670 = fmul fast float %3669, %3669
  %3671 = fmul fast float %3670, %3668
  %3672 = fmul fast float %261, 5.000000e+01
  %3673 = call float @dx.op.unary.f32(i32 7, float %3672)  ; Saturate(value)
  %3674 = fmul fast float %3673, %3671
  %3675 = fsub fast float 1.000000e+00, %3671
  %3676 = fmul fast float %3675, %260
  %3677 = fmul fast float %3675, %261
  %3678 = fmul fast float %3675, %262
  %3679 = fadd fast float %3674, %3676
  %3680 = fadd fast float %3674, %3677
  %3681 = fadd fast float %3674, %3678
  %3682 = fmul fast float %3657, %3667
  %3683 = fmul fast float %3682, %3599
  %3684 = fmul fast float %3683, %3679
  %3685 = fmul fast float %3683, %3680
  %3686 = fmul fast float %3683, %3681
  %3687 = fmul fast float %3595, %3601
  %3688 = fsub fast float %3595, %3687
  %3689 = fmul fast float %3688, %3595
  %3690 = fadd fast float %3689, %3601
  %3691 = fmul fast float %3601, 0x402921FB60000000
  %3692 = fadd fast float %3691, 0x400921FB60000000
  %3693 = fdiv fast float 1.000000e+00, %3692
  %3694 = fmul fast float %3601, %3601
  %3695 = fmul fast float %3694, 4.000000e+00
  %3696 = fmul fast float %3690, %3690
  %3697 = fdiv fast float %3695, %3696
  %3698 = fadd fast float %3697, 1.000000e+00
  %3699 = fmul fast float %3698, %3693
  %3700 = fadd fast float %3598, %1642
  %3701 = fmul fast float %3598, %1642
  %3702 = fsub fast float %3700, %3701
  %3703 = fdiv fast float 2.500000e-01, %3702
  %3704 = fmul fast float %3488, 5.000000e+01
  %3705 = call float @dx.op.unary.f32(i32 7, float %3704)  ; Saturate(value)
  %3706 = fmul fast float %3705, %3671
  %3707 = fmul fast float %3487, %3675
  %3708 = fmul fast float %3675, %3488
  %3709 = fmul fast float %3489, %3675
  %3710 = fadd fast float %3706, %3707
  %3711 = fadd fast float %3706, %3708
  %3712 = fadd fast float %3706, %3709
  %3713 = fmul fast float %3699, %3703
  %3714 = fmul fast float %3713, %3599
  %3715 = fmul fast float %3714, %3710
  %3716 = fmul fast float %3714, %3711
  %3717 = fmul fast float %3714, %3712
  %3718 = fmul fast float %249, 0x3FD45F3060000000
  %3719 = fmul fast float %250, 0x3FD45F3060000000
  %3720 = fmul fast float %251, 0x3FD45F3060000000
  %3721 = fmul fast float %3718, %3599
  %3722 = fmul fast float %3719, %3599
  %3723 = fmul fast float %3720, %3599
  %3724 = fsub fast float %3715, %3684
  %3725 = fsub fast float %3716, %3685
  %3726 = fsub fast float %3717, %3686
  %3727 = fmul fast float %3724, %3490
  %3728 = fmul fast float %3725, %3490
  %3729 = fmul fast float %3726, %3490
  %3730 = fadd fast float %3727, %3684
  %3731 = fadd fast float %3728, %3685
  %3732 = fadd fast float %3729, %3686
  br label %3936

; <label>:3733                                    ; preds = %1675
  %3734 = fmul fast float %215, 2.000000e+00
  %3735 = fmul fast float %216, 2.000000e+00
  %3736 = fadd fast float %3734, -1.000000e+00
  %3737 = fadd fast float %3735, -1.000000e+00
  %3738 = call float @dx.op.unary.f32(i32 6, float %3736)  ; FAbs(value)
  %3739 = call float @dx.op.unary.f32(i32 6, float %3737)  ; FAbs(value)
  %3740 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %3738, float %3739)  ; Dot2(ax,ay,bx,by)
  %3741 = fsub fast float 1.000000e+00, %3740
  %3742 = fsub fast float -0.000000e+00, %3741
  %3743 = call float @dx.op.binary.f32(i32 35, float %3742, float 0.000000e+00)  ; FMax(a,b)
  %3744 = fsub fast float -0.000000e+00, %3743
  %3745 = fcmp fast oge float %3736, 0.000000e+00
  %3746 = fcmp fast oge float %3737, 0.000000e+00
  %3747 = select i1 %3745, float %3744, float %3743
  %3748 = select i1 %3746, float %3744, float %3743
  %3749 = fadd fast float %3747, %3736
  %3750 = fadd fast float %3748, %3737
  %3751 = call float @dx.op.dot3.f32(i32 55, float %3749, float %3750, float %3741, float %3749, float %3750, float %3741)  ; Dot3(ax,ay,az,bx,by,bz)
  %3752 = call float @dx.op.unary.f32(i32 25, float %3751)  ; Rsqrt(value)
  %3753 = fmul fast float %3749, %3752
  %3754 = fmul fast float %3750, %3752
  %3755 = fmul fast float %3752, %3741
  %3756 = fsub fast float 1.000000e+00, %217
  %3757 = fmul fast float %3756, %181
  %3758 = fsub fast float -0.000000e+00, %220
  %3759 = fsub fast float -0.000000e+00, %221
  %3760 = fsub fast float -0.000000e+00, %222
  %3761 = fsub fast float %3758, %3753
  %3762 = fsub fast float %3759, %3754
  %3763 = fsub fast float %3760, %3755
  %3764 = fmul fast float %3761, %3757
  %3765 = fmul fast float %3762, %3757
  %3766 = fmul fast float %3763, %3757
  %3767 = fadd fast float %3764, %3753
  %3768 = fadd fast float %3765, %3754
  %3769 = fadd fast float %3766, %3755
  %3770 = call float @dx.op.dot3.f32(i32 55, float %3767, float %3768, float %3769, float %3767, float %3768, float %3769)  ; Dot3(ax,ay,az,bx,by,bz)
  %3771 = call float @dx.op.unary.f32(i32 25, float %3770)  ; Rsqrt(value)
  %3772 = fmul fast float %3767, %3771
  %3773 = fmul fast float %3768, %3771
  %3774 = fmul fast float %3769, %3771
  %3775 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3776 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %1539, float %1540, float %1541)  ; Dot3(ax,ay,az,bx,by,bz)
  %3777 = call float @dx.op.dot3.f32(i32 55, float %1539, float %1540, float %1541, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3778 = fmul fast float %3777, 2.000000e+00
  %3779 = fadd fast float %3778, 2.000000e+00
  %3780 = call float @dx.op.unary.f32(i32 25, float %3779)  ; Rsqrt(value)
  %3781 = fadd fast float %3776, %3775
  %3782 = fmul fast float %3780, %3781
  %3783 = call float @dx.op.unary.f32(i32 7, float %3782)  ; Saturate(value)
  %3784 = fmul fast float %3780, %3777
  %3785 = fadd fast float %3784, %3780
  %3786 = call float @dx.op.unary.f32(i32 7, float %3785)  ; Saturate(value)
  %3787 = fcmp fast ogt float %1689, 0.000000e+00
  br i1 %3787, label %3788, label %3825

; <label>:3788                                    ; preds = %3733
  %3789 = fmul fast float %1689, %1689
  %3790 = fsub fast float 1.000000e+00, %3789
  %3791 = call float @dx.op.unary.f32(i32 24, float %3790)  ; Sqrt(value)
  %3792 = fmul fast float %3775, 2.000000e+00
  %3793 = fmul fast float %3792, %3776
  %3794 = fsub fast float %3793, %3777
  %3795 = fcmp fast ult float %3794, %3791
  br i1 %3795, label %3798, label %3796

; <label>:3796                                    ; preds = %3788
  %3797 = call float @dx.op.unary.f32(i32 6, float %3776)  ; FAbs(value)
  br label %3825

; <label>:3798                                    ; preds = %3788
  %3799 = fmul fast float %3794, %3794
  %3800 = fsub fast float 1.000000e+00, %3799
  %3801 = call float @dx.op.unary.f32(i32 25, float %3800)  ; Rsqrt(value)
  %3802 = fmul fast float %3801, %1689
  %3803 = fmul fast float %3794, %3775
  %3804 = fsub fast float %3776, %3803
  %3805 = fmul fast float %3802, %3804
  %3806 = fmul fast float %3776, %3776
  %3807 = fmul fast float %3806, 2.000000e+00
  %3808 = fadd fast float %3807, -1.000000e+00
  %3809 = fmul fast float %3794, %3777
  %3810 = fsub fast float %3808, %3809
  %3811 = fmul fast float %3802, %3810
  %3812 = fmul fast float %3791, %3775
  %3813 = fmul fast float %3791, %3777
  %3814 = fadd fast float %3811, %3813
  %3815 = fmul fast float %3814, 2.000000e+00
  %3816 = fadd fast float %3815, 2.000000e+00
  %3817 = call float @dx.op.unary.f32(i32 25, float %3816)  ; Rsqrt(value)
  %3818 = fadd fast float %3812, %3776
  %3819 = fadd fast float %3818, %3805
  %3820 = fmul fast float %3819, %3817
  %3821 = call float @dx.op.unary.f32(i32 7, float %3820)  ; Saturate(value)
  %3822 = fmul fast float %3814, %3817
  %3823 = fadd fast float %3822, %3817
  %3824 = call float @dx.op.unary.f32(i32 7, float %3823)  ; Saturate(value)
  br label %3825

; <label>:3825                                    ; preds = %3798, %3796, %3733
  %3826 = phi float [ %3797, %3796 ], [ %3824, %3798 ], [ %3786, %3733 ]
  %3827 = phi float [ 1.000000e+00, %3796 ], [ %3821, %3798 ], [ %3783, %3733 ]
  %3828 = call float @dx.op.unary.f32(i32 6, float %3776)  ; FAbs(value)
  %3829 = fadd fast float %3828, 0x3EE4F8B580000000
  %3830 = call float @dx.op.unary.f32(i32 7, float %3829)  ; Saturate(value)
  %3831 = fsub fast float 1.000000e+00, %3826
  %3832 = fmul fast float %3831, %3831
  %3833 = fmul fast float %3832, %3832
  %3834 = fmul fast float %3833, %3831
  %3835 = fsub fast float 1.000000e+00, %3834
  %3836 = fmul fast float %225, %3835
  %3837 = fadd fast float %3836, %3834
  %3838 = fmul fast float %1595, %1595
  %3839 = fmul fast float %3838, %3838
  %3840 = fcmp fast ogt float %1691, 0.000000e+00
  br i1 %3840, label %3841, label %3848

; <label>:3841                                    ; preds = %3825
  %3842 = fmul fast float %1691, %1691
  %3843 = fmul fast float %3826, 0x400CCCCCC0000000
  %3844 = fadd fast float %3843, 0x3FD99999A0000000
  %3845 = fdiv fast float %3842, %3844
  %3846 = fadd fast float %3845, %3839
  %3847 = call float @dx.op.unary.f32(i32 7, float %3846)  ; Saturate(value)
  br label %3848

; <label>:3848                                    ; preds = %3841, %3825
  %3849 = phi float [ %3847, %3841 ], [ %3839, %3825 ]
  br i1 %3787, label %3850, label %3863

; <label>:3850                                    ; preds = %3848
  %3851 = fmul fast float %1689, 2.500000e-01
  %3852 = bitcast float %3849 to i32
  %3853 = ashr i32 %3852, 1
  %3854 = add nsw i32 %3853, 532487669
  %3855 = bitcast i32 %3854 to float
  %3856 = fmul fast float %3855, 3.000000e+00
  %3857 = fadd fast float %3856, %1689
  %3858 = fmul fast float %3851, %3857
  %3859 = fadd fast float %3826, 0x3F50624DE0000000
  %3860 = fdiv fast float %3858, %3859
  %3861 = fadd fast float %3860, %3849
  %3862 = fdiv fast float %3849, %3861
  br label %3863

; <label>:3863                                    ; preds = %3850, %3848
  %3864 = phi float [ %3861, %3850 ], [ %3849, %3848 ]
  %3865 = phi float [ %3862, %3850 ], [ 1.000000e+00, %3848 ]
  %3866 = fcmp fast olt float %1625, 1.000000e+00
  br i1 %3866, label %3867, label %3886

; <label>:3867                                    ; preds = %3863
  %3868 = fsub fast float 0x3FF00068E0000000, %1625
  %3869 = fadd fast float %1625, 1.000000e+00
  %3870 = fdiv fast float %3868, %3869
  %3871 = call float @dx.op.unary.f32(i32 24, float %3870)  ; Sqrt(value)
  %3872 = fmul fast float %3871, 2.500000e-01
  %3873 = bitcast float %3864 to i32
  %3874 = ashr i32 %3873, 1
  %3875 = add nsw i32 %3874, 532487669
  %3876 = bitcast i32 %3875 to float
  %3877 = fmul fast float %3876, 3.000000e+00
  %3878 = fadd fast float %3871, %3877
  %3879 = fmul fast float %3872, %3878
  %3880 = fadd fast float %3826, 0x3F50624DE0000000
  %3881 = fdiv fast float %3879, %3880
  %3882 = fadd fast float %3881, %3864
  %3883 = fdiv fast float %3864, %3882
  %3884 = call float @dx.op.unary.f32(i32 24, float %3883)  ; Sqrt(value)
  %3885 = fmul fast float %3884, %3865
  br label %3886

; <label>:3886                                    ; preds = %3867, %3863
  %3887 = phi float [ %3885, %3867 ], [ %3865, %3863 ]
  %3888 = call float @dx.op.unary.f32(i32 24, float %3849)  ; Sqrt(value)
  %3889 = fsub fast float 1.000000e+00, %3888
  %3890 = fmul fast float %3889, %3830
  %3891 = fadd fast float %3890, %3888
  %3892 = fmul fast float %3891, %1642
  %3893 = fmul fast float %3889, %1642
  %3894 = fadd fast float %3893, %3888
  %3895 = fmul fast float %3894, %3830
  %3896 = fadd fast float %3892, %3895
  %3897 = fdiv fast float 5.000000e-01, %3896
  %3898 = fmul fast float %3849, %3827
  %3899 = fsub fast float %3898, %3827
  %3900 = fmul fast float %3899, %3827
  %3901 = fadd fast float %3900, 1.000000e+00
  %3902 = fmul fast float %3901, %3901
  %3903 = fmul fast float %3902, 0x400921FB60000000
  %3904 = fdiv fast float %3849, %3903
  %3905 = fmul fast float %3904, %3887
  %3906 = fmul fast float %1642, %1643
  %3907 = fmul fast float %3837, %3906
  %3908 = fmul fast float %3907, %3897
  %3909 = fmul fast float %3908, %3905
  %3910 = call float @dx.op.dot3.f32(i32 55, float %3753, float %3754, float %3755, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3911 = call float @dx.op.unary.f32(i32 7, float %3910)  ; Saturate(value)
  %3912 = fmul fast float %3911, 1.100000e+01
  %3913 = fsub fast float 1.200000e+01, %3912
  %3914 = fmul fast float %3911, 0x40019999A0000000
  %3915 = fsub fast float 0x4004CCCCE0000000, %3914
  %3916 = call float @dx.op.dot3.f32(i32 55, float %3772, float %3773, float %3774, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %3917 = call float @dx.op.unary.f32(i32 7, float %3916)  ; Saturate(value)
  %3918 = call float @dx.op.unary.f32(i32 23, float %3917)  ; Log(value)
  %3919 = fmul fast float %3918, %3913
  %3920 = call float @dx.op.unary.f32(i32 21, float %3919)  ; Exp(value)
  %3921 = fmul fast float %3920, %3915
  %3922 = fadd fast float %3921, 0x3FE99999A0000000
  %3923 = fmul fast float %3922, %3911
  %3924 = fsub fast float 1.000000e+00, %3837
  %3925 = fsub fast float %3923, %1642
  %3926 = fmul fast float %3925, %3756
  %3927 = fadd fast float %3926, %1642
  %3928 = fmul fast float %3924, %1643
  %3929 = fmul fast float %3928, %3927
  %3930 = fmul fast float %249, 0x3FD45F3060000000
  %3931 = fmul fast float %250, 0x3FD45F3060000000
  %3932 = fmul fast float %251, 0x3FD45F3060000000
  %3933 = fmul fast float %3930, %3929
  %3934 = fmul fast float %3931, %3929
  %3935 = fmul fast float %3932, %3929
  br label %3936

; <label>:3936                                    ; preds = %3886, %3648, %3300, %3273, %3016, %2731, %2344, %2102, %1858, %1692, %1675
  %3937 = phi float [ %3933, %3886 ], [ 0.000000e+00, %3648 ], [ %3481, %3300 ], [ %3297, %3273 ], [ 0.000000e+00, %3016 ], [ 0.000000e+00, %2731 ], [ %2363, %2344 ], [ %2136, %2102 ], [ 0.000000e+00, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3938 = phi float [ %3934, %3886 ], [ 0.000000e+00, %3648 ], [ %3483, %3300 ], [ %3298, %3273 ], [ 0.000000e+00, %3016 ], [ 0.000000e+00, %2731 ], [ %2366, %2344 ], [ %2137, %2102 ], [ 0.000000e+00, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3939 = phi float [ %3935, %3886 ], [ 0.000000e+00, %3648 ], [ %3485, %3300 ], [ %3299, %3273 ], [ 0.000000e+00, %3016 ], [ 0.000000e+00, %2731 ], [ %2369, %2344 ], [ %2138, %2102 ], [ 0.000000e+00, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3940 = phi float [ %3909, %3886 ], [ %3730, %3648 ], [ 0.000000e+00, %3300 ], [ %3274, %3273 ], [ %3063, %3016 ], [ %2754, %2731 ], [ %2345, %2344 ], [ %2103, %2102 ], [ %1894, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3941 = phi float [ %3909, %3886 ], [ %3731, %3648 ], [ 0.000000e+00, %3300 ], [ %3275, %3273 ], [ %3065, %3016 ], [ %2755, %2731 ], [ %2346, %2344 ], [ %2104, %2102 ], [ %1895, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3942 = phi float [ %3909, %3886 ], [ %3732, %3648 ], [ 0.000000e+00, %3300 ], [ %3276, %3273 ], [ %3067, %3016 ], [ %2756, %2731 ], [ %2347, %2344 ], [ %2105, %2102 ], [ %1896, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3943 = phi float [ 0.000000e+00, %3886 ], [ %3721, %3648 ], [ 0.000000e+00, %3300 ], [ %3277, %3273 ], [ %2913, %3016 ], [ %2644, %2731 ], [ %2348, %2344 ], [ %2106, %2102 ], [ %1807, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3944 = phi float [ 0.000000e+00, %3886 ], [ %3722, %3648 ], [ 0.000000e+00, %3300 ], [ %3278, %3273 ], [ %2915, %3016 ], [ %2645, %2731 ], [ %2349, %2344 ], [ %2107, %2102 ], [ %1808, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3945 = phi float [ 0.000000e+00, %3886 ], [ %3723, %3648 ], [ 0.000000e+00, %3300 ], [ %3279, %3273 ], [ %2917, %3016 ], [ %2646, %2731 ], [ %2350, %2344 ], [ %2108, %2102 ], [ %1809, %1858 ], [ 0.000000e+00, %1692 ], [ 0.000000e+00, %1675 ]
  %3946 = fmul fast float %3940, %1505
  %3947 = fmul fast float %3941, %1505
  %3948 = fmul fast float %3942, %1505
  %3949 = fmul fast float %3943, %1509
  %3950 = fmul fast float %3944, %1509
  %3951 = fmul fast float %3945, %1509
  %3952 = icmp eq i32 %1523, 0
  br i1 %3952, label %4094, label %3953

; <label>:3953                                    ; preds = %3936
  %3954 = mul nuw nsw i32 %1523, 5
  %3955 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3956 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3955, i32 %3954, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3957 = extractvalue %dx.types.ResRet.f32 %3956, 0
  %3958 = extractvalue %dx.types.ResRet.f32 %3956, 1
  %3959 = extractvalue %dx.types.ResRet.f32 %3956, 2
  %3960 = extractvalue %dx.types.ResRet.f32 %3956, 3
  %3961 = bitcast float %3958 to i32
  %3962 = bitcast float %3959 to i32
  %3963 = and i32 %3961, 255
  %3964 = lshr i32 %3961, 8
  %3965 = and i32 %3964, 65535
  %3966 = call float @dx.op.legacyF16ToF32(i32 131, i32 %3965)  ; LegacyF16ToF32(value)
  %3967 = and i32 %3962, 65535
  %3968 = uitofp i32 %3967 to float
  %3969 = fmul fast float %3968, 0x3EF0000000000000
  %3970 = lshr i32 %3962, 16
  %3971 = uitofp i32 %3970 to float
  %3972 = fmul fast float %3971, 0x3EF0000000000000
  %3973 = add nuw nsw i32 %3954, 1
  %3974 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3955, i32 %3973, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3975 = extractvalue %dx.types.ResRet.f32 %3974, 0
  %3976 = extractvalue %dx.types.ResRet.f32 %3974, 1
  %3977 = extractvalue %dx.types.ResRet.f32 %3974, 2
  %3978 = extractvalue %dx.types.ResRet.f32 %3974, 3
  %3979 = add nuw nsw i32 %3954, 2
  %3980 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3955, i32 %3979, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3981 = extractvalue %dx.types.ResRet.f32 %3980, 0
  %3982 = extractvalue %dx.types.ResRet.f32 %3980, 1
  %3983 = extractvalue %dx.types.ResRet.f32 %3980, 2
  %3984 = extractvalue %dx.types.ResRet.f32 %3980, 3
  %3985 = add nuw nsw i32 %3954, 3
  %3986 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3955, i32 %3985, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3987 = extractvalue %dx.types.ResRet.f32 %3986, 0
  %3988 = extractvalue %dx.types.ResRet.f32 %3986, 1
  %3989 = extractvalue %dx.types.ResRet.f32 %3986, 2
  %3990 = extractvalue %dx.types.ResRet.f32 %3986, 3
  %3991 = add nuw nsw i32 %3954, 4
  %3992 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3955, i32 %3991, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3993 = extractvalue %dx.types.ResRet.f32 %3992, 0
  %3994 = extractvalue %dx.types.ResRet.f32 %3992, 1
  %3995 = extractvalue %dx.types.ResRet.f32 %3992, 2
  %3996 = extractvalue %dx.types.ResRet.f32 %3992, 3
  %3997 = fmul fast float %3975, %387
  %3998 = call float @dx.op.tertiary.f32(i32 46, float %391, float %3981, float %3997)  ; FMad(a,b,c)
  %3999 = call float @dx.op.tertiary.f32(i32 46, float %395, float %3987, float %3998)  ; FMad(a,b,c)
  %4000 = fadd fast float %3999, %3993
  %4001 = fmul fast float %3976, %387
  %4002 = call float @dx.op.tertiary.f32(i32 46, float %391, float %3982, float %4001)  ; FMad(a,b,c)
  %4003 = call float @dx.op.tertiary.f32(i32 46, float %395, float %3988, float %4002)  ; FMad(a,b,c)
  %4004 = fadd fast float %4003, %3994
  %4005 = fmul fast float %3977, %387
  %4006 = call float @dx.op.tertiary.f32(i32 46, float %391, float %3983, float %4005)  ; FMad(a,b,c)
  %4007 = call float @dx.op.tertiary.f32(i32 46, float %395, float %3989, float %4006)  ; FMad(a,b,c)
  %4008 = fadd fast float %4007, %3995
  %4009 = fmul fast float %3978, %387
  %4010 = call float @dx.op.tertiary.f32(i32 46, float %391, float %3984, float %4009)  ; FMad(a,b,c)
  %4011 = call float @dx.op.tertiary.f32(i32 46, float %395, float %3990, float %4010)  ; FMad(a,b,c)
  %4012 = fadd fast float %4011, %3996
  %4013 = fdiv fast float %4008, %4012
  %4014 = fdiv fast float %4004, %4012
  %4015 = fdiv fast float %4000, %4012
  switch i32 %3963, label %4060 [
    i32 2, label %4016
    i32 1, label %4024
    i32 3, label %4050
  ]

; <label>:4016                                    ; preds = %3953
  %4017 = fmul fast float %4015, %3960
  %4018 = fdiv fast float %4013, %4017
  %4019 = fdiv fast float %4014, %4017
  %4020 = fmul fast float %4018, 5.000000e-01
  %4021 = fmul fast float %4019, 5.000000e-01
  %4022 = fadd fast float %4020, 5.000000e-01
  %4023 = fadd fast float %4021, 5.000000e-01
  br label %4060

; <label>:4024                                    ; preds = %3953
  %4025 = call float @dx.op.dot3.f32(i32 55, float %4013, float %4014, float %4015, float %4013, float %4014, float %4015)  ; Dot3(ax,ay,az,bx,by,bz)
  %4026 = call float @dx.op.unary.f32(i32 25, float %4025)  ; Rsqrt(value)
  %4027 = fmul fast float %4026, %4013
  %4028 = fmul fast float %4026, %4014
  %4029 = fmul fast float %4026, %4015
  %4030 = fdiv fast float %4028, %4027
  %4031 = call float @dx.op.unary.f32(i32 17, float %4030)  ; Atan(value)
  %4032 = fadd fast float %4031, 0x400921FB60000000
  %4033 = fadd fast float %4031, 0xC00921FB60000000
  %4034 = fcmp fast olt float %4027, 0.000000e+00
  %4035 = fcmp fast oeq float %4027, 0.000000e+00
  %4036 = fcmp fast oge float %4028, 0.000000e+00
  %4037 = fcmp fast olt float %4028, 0.000000e+00
  %4038 = and i1 %4034, %4036
  %4039 = select i1 %4038, float %4032, float %4031
  %4040 = and i1 %4034, %4037
  %4041 = select i1 %4040, float %4033, float %4039
  %4042 = and i1 %4035, %4037
  %4043 = and i1 %4035, %4036
  %4044 = fadd fast float %4041, 0x400921FB60000000
  %4045 = fmul fast float %4044, 0x3FC45F3060000000
  %4046 = select i1 %4042, float 2.500000e-01, float %4045
  %4047 = select i1 %4043, float 7.500000e-01, float %4046
  %4048 = call float @dx.op.unary.f32(i32 15, float %4029)  ; Acos(value)
  %4049 = fmul fast float %4048, 0x3FD45F3060000000
  br label %4060

; <label>:4050                                    ; preds = %3953
  %4051 = fcmp fast ogt float %3960, 0.000000e+00
  br i1 %4051, label %4052, label %4060

; <label>:4052                                    ; preds = %4050
  %4053 = fmul fast float %4015, %3960
  %4054 = fdiv fast float %4013, %4053
  %4055 = fdiv fast float %4014, %4053
  %4056 = fmul fast float %4054, 5.000000e-01
  %4057 = fmul fast float %4055, 5.000000e-01
  %4058 = fadd fast float %4056, 5.000000e-01
  %4059 = fadd fast float %4057, 5.000000e-01
  br label %4060

; <label>:4060                                    ; preds = %4052, %4050, %4024, %4016, %3953
  %4061 = phi float [ %4013, %3953 ], [ %4058, %4052 ], [ %4013, %4050 ], [ %4047, %4024 ], [ %4022, %4016 ]
  %4062 = phi float [ %4014, %3953 ], [ %4059, %4052 ], [ %4014, %4050 ], [ %4049, %4024 ], [ %4023, %4016 ]
  %4063 = call float @dx.op.unary.f32(i32 22, float %4061)  ; Frc(value)
  %4064 = call float @dx.op.unary.f32(i32 22, float %4062)  ; Frc(value)
  %4065 = call float @dx.op.unary.f32(i32 7, float %4063)  ; Saturate(value)
  %4066 = call float @dx.op.unary.f32(i32 7, float %4064)  ; Saturate(value)
  %4067 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %4068 = extractvalue %dx.types.CBufRet.f32 %4067, 2
  %4069 = fmul fast float %4068, %4065
  %4070 = fmul fast float %4068, %4066
  %4071 = fadd fast float %4069, %3969
  %4072 = fadd fast float %4070, %3972
  %4073 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4074 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4075 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4073, %dx.types.Handle %4074, float %4071, float %4072, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4076 = extractvalue %dx.types.ResRet.f32 %4075, 0
  %4077 = fmul fast float %4076, %4076
  %4078 = fsub fast float %1528, %387
  %4079 = fsub fast float %1529, %391
  %4080 = fsub fast float %1530, %395
  %4081 = fmul fast float %4078, %4078
  %4082 = fmul fast float %4079, %4079
  %4083 = fadd fast float %4081, %4082
  %4084 = fmul fast float %4080, %4080
  %4085 = fadd fast float %4083, %4084
  %4086 = call float @dx.op.unary.f32(i32 24, float %4085)  ; Sqrt(value)
  %4087 = fsub fast float %3957, %4086
  %4088 = fmul fast float %3957, 0x3FC99999A0000000
  %4089 = fdiv fast float %4087, %4088
  %4090 = call float @dx.op.unary.f32(i32 7, float %4089)  ; Saturate(value)
  %4091 = fsub fast float %4077, %3966
  %4092 = fmul fast float %4090, %4091
  %4093 = fadd fast float %4092, %3966
  br label %4094

; <label>:4094                                    ; preds = %4060, %3936
  %4095 = phi float [ %4093, %4060 ], [ 1.000000e+00, %3936 ]
  %4096 = fmul fast float %1578, %4095
  %4097 = fmul fast float %1579, %4095
  %4098 = fmul fast float %1580, %4095
  %4099 = fadd fast float %3949, %3946
  %4100 = fadd fast float %3950, %3947
  %4101 = fadd fast float %3951, %3948
  %4102 = fmul fast float %4096, %4099
  %4103 = fmul fast float %4097, %4100
  %4104 = fmul fast float %4098, %4101
  %4105 = call float @dx.op.dot3.f32(i32 55, float %4102, float %4103, float %4104, float 0x3FCB37C140000000, float 0x3FE6E2A960000000, float 0x3FB27B3220000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %4106 = fmul fast float %4096, %3937
  %4107 = fmul fast float %4097, %3938
  %4108 = fmul fast float %4098, %3939
  %4109 = call float @dx.op.dot3.f32(i32 55, float %4106, float %4107, float %4108, float 0x3FCB37C140000000, float 0x3FE6E2A960000000, float 0x3FB27B3220000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %4110 = fadd fast float %4109, %4105
  br label %4111

; <label>:4111                                    ; preds = %4094, %1576
  %4112 = phi float [ 0.000000e+00, %1576 ], [ %4110, %4094 ]
  %4113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 155)  ; CBufferLoadLegacy(handle,regIndex)
  %4114 = extractvalue %dx.types.CBufRet.f32 %4113, 2
  %4115 = fmul fast float %4114, %4112
  %4116 = fcmp fast oge float %1526, 0.000000e+00
  %4117 = fcmp fast ogt float %4115, 0x3F847AE140000000
  %4118 = and i1 %4116, %4117
  br i1 %4118, label %4119, label %4172

; <label>:4119                                    ; preds = %4111
  %4120 = fsub fast float -0.000000e+00, %1464
  %4121 = fsub fast float -0.000000e+00, %1465
  %4122 = fsub fast float -0.000000e+00, %1466
  %4123 = fmul fast float %1453, %4122
  %4124 = fmul fast float %1454, %4121
  %4125 = fsub fast float %4123, %4124
  %4126 = fmul fast float %1454, %4120
  %4127 = fmul fast float %1452, %4122
  %4128 = fsub fast float %4126, %4127
  %4129 = fmul fast float %1452, %4121
  %4130 = fmul fast float %1453, %4120
  %4131 = fsub fast float %4129, %4130
  %4132 = call float @dx.op.dot3.f32(i32 55, float %4125, float %4128, float %4131, float %4125, float %4128, float %4131)  ; Dot3(ax,ay,az,bx,by,bz)
  %4133 = call float @dx.op.unary.f32(i32 25, float %4132)  ; Rsqrt(value)
  %4134 = fmul fast float %4133, %4125
  %4135 = fmul fast float %4133, %4128
  %4136 = fmul fast float %4133, %4131
  %4137 = fmul fast float %4134, %1547
  %4138 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %4135, float %4137)  ; FMad(a,b,c)
  %4139 = call float @dx.op.tertiary.f32(i32 46, float %1549, float %4136, float %4138)  ; FMad(a,b,c)
  %4140 = fmul fast float %1547, %1452
  %4141 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %1453, float %4140)  ; FMad(a,b,c)
  %4142 = call float @dx.op.tertiary.f32(i32 46, float %1549, float %1454, float %4141)  ; FMad(a,b,c)
  %4143 = call float @dx.op.dot3.f32(i32 55, float %1547, float %1548, float %1549, float %4120, float %4121, float %4122)  ; Dot3(ax,ay,az,bx,by,bz)
  %4144 = call float @dx.op.unary.f32(i32 16, float %4143)  ; Asin(value)
  %4145 = fmul fast float %4144, 0x3FD45F3060000000
  %4146 = fadd fast float %4145, 5.000000e-01
  %4147 = fsub fast float -0.000000e+00, %4139
  %4148 = fsub fast float -0.000000e+00, %4142
  %4149 = fdiv fast float %4148, %4147
  %4150 = call float @dx.op.unary.f32(i32 17, float %4149)  ; Atan(value)
  %4151 = fadd fast float %4150, 0x400921FB60000000
  %4152 = fadd fast float %4150, 0xC00921FB60000000
  %4153 = fcmp ogt float %4139, -0.000000e+00
  %4154 = fcmp oeq float %4139, -0.000000e+00
  %4155 = fcmp ole float %4142, -0.000000e+00
  %4156 = fcmp ogt float %4142, -0.000000e+00
  %4157 = and i1 %4153, %4155
  %4158 = select i1 %4157, float %4151, float %4150
  %4159 = and i1 %4153, %4156
  %4160 = select i1 %4159, float %4152, float %4158
  %4161 = and i1 %4154, %4156
  %4162 = and i1 %4154, %4155
  %4163 = fmul fast float %4160, 0x3FC45F3060000000
  %4164 = fadd fast float %4163, 5.000000e-01
  %4165 = select i1 %4161, float 2.500000e-01, float %4164
  %4166 = select i1 %4162, float 7.500000e-01, float %4165
  %4167 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 7, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<F32>
  %4168 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4169 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4167, %dx.types.Handle %4168, float %4146, float %4166, float %1526, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4170 = extractvalue %dx.types.ResRet.f32 %4169, 0
  %4171 = fmul fast float %4170, %4115
  br label %4172

; <label>:4172                                    ; preds = %4119, %4111
  %4173 = phi float [ %4171, %4119 ], [ %4115, %4111 ]
  %4174 = fadd fast float %4173, 1.000000e+00
  %4175 = call float @dx.op.unary.f32(i32 23, float %4174)  ; Log(value)
  br i1 %132, label %4176, label %4540

; <label>:4176                                    ; preds = %4172
  %4177 = fadd fast float %1436, %135
  %4178 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %4179 = extractvalue %dx.types.CBufRet.i32 %4178, 3
  %4180 = icmp eq i32 %1479, %4179
  %4181 = select i1 %4180, float 0.000000e+00, float 1.000000e+00
  %4182 = icmp eq i32 %137, 0
  br i1 %4182, label %4208, label %4183

; <label>:4183                                    ; preds = %4176
  %4184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4185 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4184, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4186 = icmp ult i32 %4185, %137
  br i1 %4186, label %4187, label %4208

; <label>:4187                                    ; preds = %4183
  %4188 = shl i32 %4185, 2
  %4189 = add i32 %4188, 4
  %4190 = call float @dx.op.unary.f32(i32 7, float %4181)  ; Saturate(value)
  %4191 = fmul fast float %4190, 2.550000e+02
  %4192 = fptoui float %4191 to i32
  %4193 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0x3FA99999A0000000)  ; LegacyF32ToF16(value)
  %4194 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4195 = shl i32 %4194, 16
  %4196 = or i32 %4195, %4193
  %4197 = shl i32 %4192, 24
  %4198 = shl i32 %4192, 16
  %4199 = or i32 %4198, %4197
  %4200 = or i32 %4199, 65282
  %4201 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4201, i32 %4189, i32 undef, i32 %4196, i32 %4196, i32 %4196, i32 %4196, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4202 = add i32 %4188, 5
  %4203 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4203, i32 %4202, i32 undef, i32 %1479, i32 %1479, i32 %1479, i32 %1479, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4204 = add i32 %4188, 6
  %4205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4205, i32 %4204, i32 undef, i32 %4200, i32 %4200, i32 %4200, i32 %4200, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4206 = add i32 %4188, 7
  %4207 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4207, i32 %4206, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4208

; <label>:4208                                    ; preds = %4187, %4183, %4176
  %4209 = fmul fast float %134, 1.200000e+01
  %4210 = fadd fast float %4209, 0x3FA99999A0000000
  %4211 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %4212 = extractvalue %dx.types.CBufRet.i32 %4211, 3
  %4213 = icmp eq i32 %1479, %4212
  %4214 = select i1 %4213, float 0.000000e+00, float 1.000000e+00
  br i1 %4182, label %4240, label %4215

; <label>:4215                                    ; preds = %4208
  %4216 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4217 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4216, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4218 = icmp ult i32 %4217, %137
  br i1 %4218, label %4219, label %4240

; <label>:4219                                    ; preds = %4215
  %4220 = shl i32 %4217, 2
  %4221 = add i32 %4220, 4
  %4222 = call float @dx.op.unary.f32(i32 7, float %4214)  ; Saturate(value)
  %4223 = fmul fast float %4222, 2.550000e+02
  %4224 = fptoui float %4223 to i32
  %4225 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4210)  ; LegacyF32ToF16(value)
  %4226 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4227 = shl i32 %4226, 16
  %4228 = or i32 %4227, %4225
  %4229 = shl i32 %4224, 24
  %4230 = shl i32 %4224, 16
  %4231 = or i32 %4230, %4229
  %4232 = or i32 %4231, 65283
  %4233 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4233, i32 %4221, i32 undef, i32 %4228, i32 %4228, i32 %4228, i32 %4228, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4234 = add i32 %4220, 5
  %4235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4235, i32 %4234, i32 undef, i32 %1444, i32 %1444, i32 %1444, i32 %1444, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4236 = add i32 %4220, 6
  %4237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4237, i32 %4236, i32 undef, i32 %4232, i32 %4232, i32 %4232, i32 %4232, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4238 = add i32 %4220, 7
  %4239 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4239, i32 %4238, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4240

; <label>:4240                                    ; preds = %4219, %4215, %4208
  %4241 = fadd fast float %4210, %4209
  %4242 = bitcast float %4175 to i32
  br i1 %4182, label %4261, label %4243

; <label>:4243                                    ; preds = %4240
  %4244 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4245 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4244, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4246 = icmp ult i32 %4245, %137
  br i1 %4246, label %4247, label %4261

; <label>:4247                                    ; preds = %4243
  %4248 = shl i32 %4245, 2
  %4249 = add i32 %4248, 4
  %4250 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4241)  ; LegacyF32ToF16(value)
  %4251 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4252 = shl i32 %4251, 16
  %4253 = or i32 %4252, %4250
  %4254 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4254, i32 %4249, i32 undef, i32 %4253, i32 %4253, i32 %4253, i32 %4253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4255 = add i32 %4248, 5
  %4256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4256, i32 %4255, i32 undef, i32 %4242, i32 %4242, i32 %4242, i32 %4242, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4257 = add i32 %4248, 6
  %4258 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4258, i32 %4257, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4259 = add i32 %4248, 7
  %4260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4260, i32 %4259, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4261

; <label>:4261                                    ; preds = %4247, %4243, %4240
  %4262 = fadd fast float %4241, %4209
  %4263 = icmp ne i32 %1523, 0
  %4264 = select i1 %4263, float 1.000000e+00, float 5.000000e-01
  br i1 %4182, label %4292, label %4265

; <label>:4265                                    ; preds = %4261
  %4266 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4267 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4266, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4268 = icmp ult i32 %4267, %137
  br i1 %4268, label %4269, label %4292

; <label>:4269                                    ; preds = %4265
  %4270 = shl i32 %4267, 2
  %4271 = add i32 %4270, 4
  %4272 = call float @dx.op.unary.f32(i32 7, float %4264)  ; Saturate(value)
  %4273 = fmul fast float %4272, 2.550000e+02
  %4274 = fptoui float %4273 to i32
  %4275 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4262)  ; LegacyF32ToF16(value)
  %4276 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4277 = shl i32 %4276, 16
  %4278 = or i32 %4277, %4275
  %4279 = shl i32 %4274, 24
  %4280 = shl i32 %4274, 16
  %4281 = shl i32 %4274, 8
  %4282 = or i32 %4281, %4280
  %4283 = or i32 %4282, %4279
  %4284 = or i32 %4283, 3
  %4285 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4285, i32 %4271, i32 undef, i32 %4278, i32 %4278, i32 %4278, i32 %4278, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4286 = add i32 %4270, 5
  %4287 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4287, i32 %4286, i32 undef, i32 %1523, i32 %1523, i32 %1523, i32 %1523, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4288 = add i32 %4270, 6
  %4289 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4289, i32 %4288, i32 undef, i32 %4284, i32 %4284, i32 %4284, i32 %4284, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4290 = add i32 %4270, 7
  %4291 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4291, i32 %4290, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4292

; <label>:4292                                    ; preds = %4269, %4265, %4261
  %4293 = fadd fast float %4262, %4209
  %4294 = fcmp fast une float %1526, -1.000000e+00
  %4295 = select i1 %4294, float 1.000000e+00, float 5.000000e-01
  %4296 = bitcast float %1526 to i32
  br i1 %4182, label %4324, label %4297

; <label>:4297                                    ; preds = %4292
  %4298 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4299 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4298, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4300 = icmp ult i32 %4299, %137
  br i1 %4300, label %4301, label %4324

; <label>:4301                                    ; preds = %4297
  %4302 = shl i32 %4299, 2
  %4303 = add i32 %4302, 4
  %4304 = call float @dx.op.unary.f32(i32 7, float %4295)  ; Saturate(value)
  %4305 = fmul fast float %4304, 2.550000e+02
  %4306 = fptoui float %4305 to i32
  %4307 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4293)  ; LegacyF32ToF16(value)
  %4308 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4309 = shl i32 %4308, 16
  %4310 = or i32 %4309, %4307
  %4311 = shl i32 %4306, 24
  %4312 = shl i32 %4306, 16
  %4313 = shl i32 %4306, 8
  %4314 = or i32 %4313, %4312
  %4315 = or i32 %4314, %4311
  %4316 = or i32 %4315, 1
  %4317 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4317, i32 %4303, i32 undef, i32 %4310, i32 %4310, i32 %4310, i32 %4310, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4318 = add i32 %4302, 5
  %4319 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4319, i32 %4318, i32 undef, i32 %4296, i32 %4296, i32 %4296, i32 %4296, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4320 = add i32 %4302, 6
  %4321 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4321, i32 %4320, i32 undef, i32 %4316, i32 %4316, i32 %4316, i32 %4316, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4322 = add i32 %4302, 7
  %4323 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4323, i32 %4322, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4324

; <label>:4324                                    ; preds = %4301, %4297, %4292
  %4325 = fadd fast float %4293, %4209
  br i1 %4182, label %4344, label %4326

; <label>:4326                                    ; preds = %4324
  %4327 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4328 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4327, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4329 = icmp ult i32 %4328, %137
  br i1 %4329, label %4330, label %4344

; <label>:4330                                    ; preds = %4326
  %4331 = shl i32 %4328, 2
  %4332 = add i32 %4331, 4
  %4333 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4325)  ; LegacyF32ToF16(value)
  %4334 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4177)  ; LegacyF32ToF16(value)
  %4335 = shl i32 %4334, 16
  %4336 = or i32 %4335, %4333
  %4337 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4337, i32 %4332, i32 undef, i32 %4336, i32 %4336, i32 %4336, i32 %4336, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4338 = add i32 %4331, 5
  %4339 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4339, i32 %4338, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4340 = add i32 %4331, 6
  %4341 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4341, i32 %4340, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4342 = add i32 %4331, 7
  %4343 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4343, i32 %4342, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4344

; <label>:4344                                    ; preds = %4330, %4326, %4324
  %4345 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %4346 = extractvalue %dx.types.CBufRet.i32 %4345, 0
  %4347 = icmp eq i32 %4346, 0
  br i1 %4347, label %4540, label %4348

; <label>:4348                                    ; preds = %4344
  %4349 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %4350 = extractvalue %dx.types.CBufRet.i32 %4349, 3
  %4351 = icmp eq i32 %1479, %4350
  %4352 = icmp eq i32 %4346, 2
  %4353 = or i1 %4351, %4352
  br i1 %4353, label %4354, label %4540

; <label>:4354                                    ; preds = %4348
  %4355 = fadd fast float %1476, 1.000000e+01
  %4356 = icmp eq i32 %138, 0
  br label %4357

; <label>:4357                                    ; preds = %4402, %4354
  %4358 = phi float [ 0.000000e+00, %4354 ], [ %4362, %4402 ]
  %4359 = phi float [ %4355, %4354 ], [ %4366, %4402 ]
  %4360 = phi float [ %1477, %4354 ], [ %4368, %4402 ]
  %4361 = phi i32 [ 0, %4354 ], [ %4403, %4402 ]
  %4362 = fadd fast float %4358, 0x3FDACEEA20000000
  %4363 = call float @dx.op.unary.f32(i32 13, float %4362)  ; Sin(value)
  %4364 = call float @dx.op.unary.f32(i32 12, float %4362)  ; Cos(value)
  %4365 = fmul fast float %4364, 1.000000e+01
  %4366 = fadd fast float %4365, %1476
  %4367 = fmul fast float %4363, 1.000000e+01
  %4368 = fadd fast float %4367, %1477
  br i1 %4356, label %4374, label %4369

; <label>:4369                                    ; preds = %4357
  %4370 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4371 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4370, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4372 = add i32 %4371, 1
  %4373 = icmp ult i32 %4372, %138
  br label %4374

; <label>:4374                                    ; preds = %4369, %4357
  %4375 = phi i32 [ %4371, %4369 ], [ 0, %4357 ]
  %4376 = phi i1 [ %4373, %4369 ], [ false, %4357 ]
  br i1 %4376, label %4377, label %4402

; <label>:4377                                    ; preds = %4374
  %4378 = shl i32 %137, 2
  %4379 = add i32 %4378, 4
  %4380 = shl i32 %4375, 3
  %4381 = add i32 %4379, %4380
  %4382 = bitcast float %1475 to i32
  %4383 = bitcast float %4359 to i32
  %4384 = bitcast float %4360 to i32
  %4385 = bitcast float %4366 to i32
  %4386 = bitcast float %4368 to i32
  %4387 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4387, i32 %4381, i32 undef, i32 %4382, i32 %4382, i32 %4382, i32 %4382, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4388 = or i32 %4381, 1
  %4389 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4389, i32 %4388, i32 undef, i32 %4383, i32 %4383, i32 %4383, i32 %4383, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4390 = or i32 %4381, 2
  %4391 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4391, i32 %4390, i32 undef, i32 %4384, i32 %4384, i32 %4384, i32 %4384, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4392 = or i32 %4381, 3
  %4393 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4393, i32 %4392, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4394 = add i32 %4381, 4
  %4395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4395, i32 %4394, i32 undef, i32 %4382, i32 %4382, i32 %4382, i32 %4382, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4396 = add i32 %4381, 5
  %4397 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4397, i32 %4396, i32 undef, i32 %4385, i32 %4385, i32 %4385, i32 %4385, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4398 = add i32 %4381, 6
  %4399 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4399, i32 %4398, i32 undef, i32 %4386, i32 %4386, i32 %4386, i32 %4386, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4400 = add i32 %4381, 7
  %4401 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4401, i32 %4400, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4402

; <label>:4402                                    ; preds = %4377, %4374
  %4403 = add nuw nsw i32 %4361, 1
  %4404 = icmp eq i32 %4403, 16
  br i1 %4404, label %4405, label %4357

; <label>:4405                                    ; preds = %4402
  %4406 = fadd fast float %1475, -1.000000e+01
  br label %4407

; <label>:4407                                    ; preds = %4452, %4405
  %4408 = phi float [ 0.000000e+00, %4405 ], [ %4412, %4452 ]
  %4409 = phi float [ %4406, %4405 ], [ %4416, %4452 ]
  %4410 = phi float [ %1477, %4405 ], [ %4418, %4452 ]
  %4411 = phi i32 [ 0, %4405 ], [ %4453, %4452 ]
  %4412 = fadd fast float %4408, 0x3FDACEEA20000000
  %4413 = call float @dx.op.unary.f32(i32 13, float %4412)  ; Sin(value)
  %4414 = call float @dx.op.unary.f32(i32 12, float %4412)  ; Cos(value)
  %4415 = fmul fast float %4414, 1.000000e+01
  %4416 = fsub fast float %1475, %4415
  %4417 = fmul fast float %4413, 1.000000e+01
  %4418 = fadd fast float %4417, %1477
  br i1 %4356, label %4424, label %4419

; <label>:4419                                    ; preds = %4407
  %4420 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4421 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4420, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4422 = add i32 %4421, 1
  %4423 = icmp ult i32 %4422, %138
  br label %4424

; <label>:4424                                    ; preds = %4419, %4407
  %4425 = phi i32 [ %4421, %4419 ], [ 0, %4407 ]
  %4426 = phi i1 [ %4423, %4419 ], [ false, %4407 ]
  br i1 %4426, label %4427, label %4452

; <label>:4427                                    ; preds = %4424
  %4428 = shl i32 %137, 2
  %4429 = add i32 %4428, 4
  %4430 = shl i32 %4425, 3
  %4431 = add i32 %4429, %4430
  %4432 = bitcast float %4409 to i32
  %4433 = bitcast float %1476 to i32
  %4434 = bitcast float %4410 to i32
  %4435 = bitcast float %4416 to i32
  %4436 = bitcast float %4418 to i32
  %4437 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4437, i32 %4431, i32 undef, i32 %4432, i32 %4432, i32 %4432, i32 %4432, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4438 = or i32 %4431, 1
  %4439 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4439, i32 %4438, i32 undef, i32 %4433, i32 %4433, i32 %4433, i32 %4433, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4440 = or i32 %4431, 2
  %4441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4441, i32 %4440, i32 undef, i32 %4434, i32 %4434, i32 %4434, i32 %4434, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4442 = or i32 %4431, 3
  %4443 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4443, i32 %4442, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4444 = add i32 %4431, 4
  %4445 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4445, i32 %4444, i32 undef, i32 %4435, i32 %4435, i32 %4435, i32 %4435, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4446 = add i32 %4431, 5
  %4447 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4447, i32 %4446, i32 undef, i32 %4433, i32 %4433, i32 %4433, i32 %4433, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4448 = add i32 %4431, 6
  %4449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4449, i32 %4448, i32 undef, i32 %4436, i32 %4436, i32 %4436, i32 %4436, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4450 = add i32 %4431, 7
  %4451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4451, i32 %4450, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4452

; <label>:4452                                    ; preds = %4427, %4424
  %4453 = add nuw nsw i32 %4411, 1
  %4454 = icmp eq i32 %4453, 16
  br i1 %4454, label %4455, label %4407

; <label>:4455                                    ; preds = %4452
  %4456 = fadd fast float %1476, -1.000000e+01
  br label %4457

; <label>:4457                                    ; preds = %4502, %4455
  %4458 = phi float [ 0.000000e+00, %4455 ], [ %4462, %4502 ]
  %4459 = phi float [ %1475, %4455 ], [ %4468, %4502 ]
  %4460 = phi float [ %4456, %4455 ], [ %4466, %4502 ]
  %4461 = phi i32 [ 0, %4455 ], [ %4503, %4502 ]
  %4462 = fadd fast float %4458, 0x3FDACEEA20000000
  %4463 = call float @dx.op.unary.f32(i32 13, float %4462)  ; Sin(value)
  %4464 = call float @dx.op.unary.f32(i32 12, float %4462)  ; Cos(value)
  %4465 = fmul fast float %4464, 1.000000e+01
  %4466 = fsub fast float %1476, %4465
  %4467 = fmul fast float %4463, 1.000000e+01
  %4468 = fadd fast float %4467, %1475
  br i1 %4356, label %4474, label %4469

; <label>:4469                                    ; preds = %4457
  %4470 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4471 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4470, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4472 = add i32 %4471, 1
  %4473 = icmp ult i32 %4472, %138
  br label %4474

; <label>:4474                                    ; preds = %4469, %4457
  %4475 = phi i32 [ %4471, %4469 ], [ 0, %4457 ]
  %4476 = phi i1 [ %4473, %4469 ], [ false, %4457 ]
  br i1 %4476, label %4477, label %4502

; <label>:4477                                    ; preds = %4474
  %4478 = shl i32 %137, 2
  %4479 = add i32 %4478, 4
  %4480 = shl i32 %4475, 3
  %4481 = add i32 %4479, %4480
  %4482 = bitcast float %4459 to i32
  %4483 = bitcast float %4460 to i32
  %4484 = bitcast float %1477 to i32
  %4485 = bitcast float %4468 to i32
  %4486 = bitcast float %4466 to i32
  %4487 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4487, i32 %4481, i32 undef, i32 %4482, i32 %4482, i32 %4482, i32 %4482, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4488 = or i32 %4481, 1
  %4489 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4489, i32 %4488, i32 undef, i32 %4483, i32 %4483, i32 %4483, i32 %4483, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4490 = or i32 %4481, 2
  %4491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4491, i32 %4490, i32 undef, i32 %4484, i32 %4484, i32 %4484, i32 %4484, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4492 = or i32 %4481, 3
  %4493 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4493, i32 %4492, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4494 = add i32 %4481, 4
  %4495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4495, i32 %4494, i32 undef, i32 %4485, i32 %4485, i32 %4485, i32 %4485, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4496 = add i32 %4481, 5
  %4497 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4497, i32 %4496, i32 undef, i32 %4486, i32 %4486, i32 %4486, i32 %4486, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4498 = add i32 %4481, 6
  %4499 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4499, i32 %4498, i32 undef, i32 %4484, i32 %4484, i32 %4484, i32 %4484, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4500 = add i32 %4481, 7
  %4501 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4501, i32 %4500, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4502

; <label>:4502                                    ; preds = %4477, %4474
  %4503 = add nuw nsw i32 %4461, 1
  %4504 = icmp eq i32 %4503, 16
  br i1 %4504, label %4505, label %4457

; <label>:4505                                    ; preds = %4502
  br i1 %4356, label %4511, label %4506

; <label>:4506                                    ; preds = %4505
  %4507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %4508 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %4507, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %4509 = add i32 %4508, 1
  %4510 = icmp ult i32 %4509, %138
  br label %4511

; <label>:4511                                    ; preds = %4506, %4505
  %4512 = phi i32 [ %4508, %4506 ], [ 0, %4505 ]
  %4513 = phi i1 [ %4510, %4506 ], [ false, %4505 ]
  br i1 %4513, label %4514, label %4540

; <label>:4514                                    ; preds = %4511
  %4515 = shl i32 %137, 2
  %4516 = add i32 %4515, 4
  %4517 = shl i32 %4512, 3
  %4518 = add i32 %4516, %4517
  %4519 = bitcast float %387 to i32
  %4520 = bitcast float %391 to i32
  %4521 = bitcast float %395 to i32
  %4522 = bitcast float %1475 to i32
  %4523 = bitcast float %1476 to i32
  %4524 = bitcast float %1477 to i32
  %4525 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4525, i32 %4518, i32 undef, i32 %4519, i32 %4519, i32 %4519, i32 %4519, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4526 = or i32 %4518, 1
  %4527 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4527, i32 %4526, i32 undef, i32 %4520, i32 %4520, i32 %4520, i32 %4520, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4528 = or i32 %4518, 2
  %4529 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4529, i32 %4528, i32 undef, i32 %4521, i32 %4521, i32 %4521, i32 %4521, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4530 = or i32 %4518, 3
  %4531 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4531, i32 %4530, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4532 = add i32 %4518, 4
  %4533 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4533, i32 %4532, i32 undef, i32 %4522, i32 %4522, i32 %4522, i32 %4522, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4534 = add i32 %4518, 5
  %4535 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4535, i32 %4534, i32 undef, i32 %4523, i32 %4523, i32 %4523, i32 %4523, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4536 = add i32 %4518, 6
  %4537 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4537, i32 %4536, i32 undef, i32 %4524, i32 %4524, i32 %4524, i32 %4524, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %4538 = add i32 %4518, 7
  %4539 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4539, i32 %4538, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %4540

; <label>:4540                                    ; preds = %4514, %4511, %4348, %4344, %4172
  %4541 = phi float [ %1436, %4172 ], [ %4177, %4514 ], [ %4177, %4511 ], [ %4177, %4348 ], [ %4177, %4344 ]
  %4542 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %4543 = extractvalue %dx.types.CBufRet.f32 %4542, 0
  %4544 = fcmp fast ogt float %4175, %4543
  br i1 %4544, label %4545, label %4571

; <label>:4545                                    ; preds = %4540
  %4546 = fadd fast float %4175, %1437
  %4547 = fdiv fast float %1437, %4546
  br label %4548

; <label>:4548                                    ; preds = %4545
  %4549 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 0
  %4550 = load float, float* %4549, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %4551 = fcmp fast olt float %4550, %4547
  br i1 %4551, label %4552, label %4554

; <label>:4552                                    ; preds = %4548
  %4553 = fdiv fast float %4550, %4547
  store float %4553, float* %4549, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  br label %4564

; <label>:4554                                    ; preds = %4548
  %4555 = fsub fast float %4550, %4547
  %4556 = fsub fast float 1.000000e+00, %4547
  %4557 = fdiv fast float %4555, %4556
  store float %4557, float* %4549, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %4558 = and i32 %1444, 4095
  %4559 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4175)  ; LegacyF32ToF16(value)
  %4560 = shl i32 %4559, 16
  %4561 = or i32 %4558, %4560
  %4562 = or i32 %4561, 32768
  %4563 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 0
  store i32 %4562, i32* %4563, align 4, !tbaa !50, !alias.scope !120, !noalias !123
  br label %4564

; <label>:4564                                    ; preds = %4554, %4552
  %4565 = phi float [ %4557, %4554 ], [ %4553, %4552 ]
  %4566 = call float @dx.op.binary.f32(i32 35, float %4565, float 0.000000e+00)  ; FMax(a,b)
  %4567 = call float @dx.op.binary.f32(i32 36, float %4566, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %4567, float* %4549, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %4568 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 1
  %4569 = load float, float* %4568, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %4570 = fcmp fast olt float %4569, %4547
  br i1 %4570, label %9264, label %9254

; <label>:4571                                    ; preds = %9304, %4540, %1446
  %4572 = phi float [ %1436, %1446 ], [ %4541, %4540 ], [ %4541, %9304 ]
  %4573 = phi float [ %1437, %1446 ], [ %1437, %4540 ], [ %4546, %9304 ]
  %4574 = icmp ult i32 %1447, %1432
  br i1 %4574, label %1435, label %7722

; <label>:4575                                    ; preds = %1410
  %4576 = icmp eq i32 %443, 0
  br i1 %4576, label %7728, label %4577

; <label>:4577                                    ; preds = %4575
  br label %4578

; <label>:4578                                    ; preds = %4589, %4577
  %4579 = phi float [ %4590, %4589 ], [ %1411, %4577 ]
  %4580 = phi float [ %4591, %4589 ], [ 0.000000e+00, %4577 ]
  %4581 = phi i32 [ %4592, %4589 ], [ 0, %4577 ]
  %4582 = sub i32 %436, %437
  %4583 = add i32 %4582, %441
  %4584 = add i32 %4583, %4581
  %4585 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %4586 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4585, i32 %4584, i32 undef)  ; BufferLoad(srv,index,wot)
  %4587 = extractvalue %dx.types.ResRet.i32 %4586, 0
  %4588 = icmp ugt i32 %4587, 4094
  br i1 %4588, label %7725, label %4594

; <label>:4589                                    ; preds = %9358, %7691, %4597, %4594
  %4590 = phi float [ %4579, %4594 ], [ %4579, %4597 ], [ %7692, %7691 ], [ %7692, %9358 ]
  %4591 = phi float [ %4580, %4594 ], [ %4580, %4597 ], [ %4580, %7691 ], [ %7697, %9358 ]
  %4592 = phi i32 [ %4581, %4594 ], [ %4598, %4597 ], [ %4598, %7691 ], [ %4598, %9358 ]
  %4593 = icmp ult i32 %4592, %443
  br i1 %4593, label %4578, label %7725

; <label>:4594                                    ; preds = %4578
  %4595 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %4587, i8 2, i8 1)  ; WaveActiveOp(value,op,sop)
  %4596 = icmp eq i32 %4595, %4587
  br i1 %4596, label %4597, label %4589

; <label>:4597                                    ; preds = %4594
  %4598 = add i32 %4581, 1
  %4599 = mul i32 %4587, 6
  %4600 = add i32 %4599, 4
  %4601 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %4602 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %4601, i32 %4600, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %4603 = extractvalue %dx.types.ResRet.f32 %4602, 0
  %4604 = extractvalue %dx.types.ResRet.f32 %4602, 1
  %4605 = extractvalue %dx.types.ResRet.f32 %4602, 2
  %4606 = extractvalue %dx.types.ResRet.f32 %4602, 3
  %4607 = add i32 %4599, 3
  %4608 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %4601, i32 %4607, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %4609 = extractvalue %dx.types.ResRet.f32 %4608, 0
  %4610 = extractvalue %dx.types.ResRet.f32 %4608, 1
  %4611 = extractvalue %dx.types.ResRet.f32 %4608, 2
  %4612 = extractvalue %dx.types.ResRet.f32 %4608, 3
  %4613 = add i32 %4599, 2
  %4614 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %4601, i32 %4613, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %4615 = extractvalue %dx.types.ResRet.f32 %4614, 0
  %4616 = extractvalue %dx.types.ResRet.f32 %4614, 1
  %4617 = extractvalue %dx.types.ResRet.f32 %4614, 2
  %4618 = extractvalue %dx.types.ResRet.f32 %4614, 3
  %4619 = or i32 %4599, 1
  %4620 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %4601, i32 %4619, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %4621 = extractvalue %dx.types.ResRet.f32 %4620, 0
  %4622 = extractvalue %dx.types.ResRet.f32 %4620, 1
  %4623 = extractvalue %dx.types.ResRet.f32 %4620, 2
  %4624 = extractvalue %dx.types.ResRet.f32 %4620, 3
  %4625 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %4601, i32 %4599, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %4626 = extractvalue %dx.types.ResRet.f32 %4625, 0
  %4627 = extractvalue %dx.types.ResRet.f32 %4625, 1
  %4628 = extractvalue %dx.types.ResRet.f32 %4625, 2
  %4629 = extractvalue %dx.types.ResRet.f32 %4625, 3
  %4630 = fptosi float %4623 to i32
  %4631 = bitcast float %4618 to i32
  %4632 = and i32 %4631, 196608
  %4633 = bitcast float %4622 to i32
  %4634 = and i32 %4633, 1023
  %4635 = uitofp i32 %4634 to float
  %4636 = lshr i32 %4633, 10
  %4637 = and i32 %4636, 1023
  %4638 = uitofp i32 %4637 to float
  %4639 = lshr i32 %4633, 20
  %4640 = and i32 %4639, 1023
  %4641 = uitofp i32 %4640 to float
  %4642 = fmul fast float %4635, %4621
  %4643 = fmul fast float %4638, %4621
  %4644 = fmul fast float %4641, %4621
  %4645 = bitcast float %4611 to i32
  %4646 = and i32 %4645, 65535
  %4647 = call float @dx.op.legacyF16ToF32(i32 131, i32 %4646)  ; LegacyF16ToF32(value)
  %4648 = bitcast float %4612 to i32
  %4649 = call float @dx.op.legacyF16ToF32(i32 131, i32 %4648)  ; LegacyF16ToF32(value)
  %4650 = lshr i32 %4645, 16
  %4651 = call float @dx.op.legacyF16ToF32(i32 131, i32 %4650)  ; LegacyF16ToF32(value)
  %4652 = fcmp fast oeq float %4624, 0.000000e+00
  %4653 = bitcast float %4606 to i32
  %4654 = and i32 %4653, 1023
  %4655 = uitofp i32 %4654 to float
  %4656 = fmul fast float %4655, 0x3F50040100000000
  %4657 = lshr i32 %4653, 10
  %4658 = and i32 %4657, 1023
  %4659 = uitofp i32 %4658 to float
  %4660 = fmul fast float %4659, 0x3F50040100000000
  %4661 = icmp eq i32 %4632, 131072
  %4662 = lshr i32 %4631, 8
  %4663 = and i32 %453, %4662
  %4664 = icmp eq i32 %4663, 0
  br i1 %4664, label %4589, label %4665

; <label>:4665                                    ; preds = %4597
  %4666 = lshr i32 %4631, 20
  %4667 = and i32 %4666, 255
  %4668 = lshr i32 %4653, 20
  %4669 = add nsw i32 %4668, -1
  %4670 = sitofp i32 %4669 to float
  %4671 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %4672 = extractvalue %dx.types.CBufRet.i32 %4671, 2
  %4673 = icmp eq i32 %4672, 0
  %4674 = select i1 %4673, i32 0, i32 %4667
  %4675 = extractvalue %dx.types.CBufRet.i32 %4671, 1
  %4676 = icmp eq i32 %4675, 0
  %4677 = select i1 %4676, float -1.000000e+00, float %4670
  %4678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %4679 = extractvalue %dx.types.CBufRet.f32 %4678, 0
  %4680 = extractvalue %dx.types.CBufRet.f32 %4678, 1
  %4681 = extractvalue %dx.types.CBufRet.f32 %4678, 2
  %4682 = fsub fast float %387, %4679
  %4683 = fsub fast float %391, %4680
  %4684 = fsub fast float %395, %4681
  %4685 = call float @dx.op.dot3.f32(i32 55, float %4682, float %4683, float %4684, float %4682, float %4683, float %4684)  ; Dot3(ax,ay,az,bx,by,bz)
  %4686 = call float @dx.op.unary.f32(i32 25, float %4685)  ; Rsqrt(value)
  %4687 = fmul fast float %4682, %4686
  %4688 = fmul fast float %4683, %4686
  %4689 = fmul fast float %4684, %4686
  %4690 = fsub fast float -0.000000e+00, %4687
  %4691 = fsub fast float -0.000000e+00, %4688
  %4692 = fsub fast float -0.000000e+00, %4689
  %4693 = fsub fast float %4626, %387
  %4694 = fsub fast float %4627, %391
  %4695 = fsub fast float %4628, %395
  %4696 = call float @dx.op.dot3.f32(i32 55, float %4693, float %4694, float %4695, float %4693, float %4694, float %4695)  ; Dot3(ax,ay,az,bx,by,bz)
  %4697 = call float @dx.op.unary.f32(i32 25, float %4696)  ; Rsqrt(value)
  %4698 = fmul fast float %4697, %4693
  %4699 = fmul fast float %4697, %4694
  %4700 = fmul fast float %4697, %4695
  br i1 %4652, label %4701, label %4708

; <label>:4701                                    ; preds = %4665
  %4702 = fmul fast float %4629, %4629
  %4703 = fmul fast float %4702, %4696
  %4704 = fmul fast float %4703, %4703
  %4705 = fsub fast float 1.000000e+00, %4704
  %4706 = call float @dx.op.unary.f32(i32 7, float %4705)  ; Saturate(value)
  %4707 = fmul fast float %4706, %4706
  br label %4718

; <label>:4708                                    ; preds = %4665
  %4709 = fmul fast float %4693, %4629
  %4710 = fmul fast float %4694, %4629
  %4711 = fmul fast float %4695, %4629
  %4712 = call float @dx.op.dot3.f32(i32 55, float %4709, float %4710, float %4711, float %4709, float %4710, float %4711)  ; Dot3(ax,ay,az,bx,by,bz)
  %4713 = call float @dx.op.unary.f32(i32 7, float %4712)  ; Saturate(value)
  %4714 = fsub fast float 1.000000e+00, %4713
  %4715 = call float @dx.op.unary.f32(i32 23, float %4714)  ; Log(value)
  %4716 = fmul fast float %4715, %4624
  %4717 = call float @dx.op.unary.f32(i32 21, float %4716)  ; Exp(value)
  br label %4718

; <label>:4718                                    ; preds = %4708, %4701
  %4719 = phi float [ %4707, %4701 ], [ %4717, %4708 ]
  br i1 %4661, label %4720, label %4727

; <label>:4720                                    ; preds = %4718
  %4721 = call float @dx.op.dot3.f32(i32 55, float %4698, float %4699, float %4700, float %4615, float %4616, float %4617)  ; Dot3(ax,ay,az,bx,by,bz)
  %4722 = fsub fast float %4721, %4609
  %4723 = fmul fast float %4722, %4610
  %4724 = call float @dx.op.unary.f32(i32 7, float %4723)  ; Saturate(value)
  %4725 = fmul fast float %4724, %4724
  %4726 = fmul fast float %4725, %4719
  br label %4727

; <label>:4727                                    ; preds = %4720, %4718
  %4728 = phi float [ %4726, %4720 ], [ %4719, %4718 ]
  %4729 = fmul fast float %4642, %4728
  %4730 = fmul fast float %4643, %4728
  %4731 = fmul fast float %4644, %4728
  %4732 = fcmp fast ogt float %4728, 0.000000e+00
  br i1 %4732, label %4733, label %7262, !dx.controlflow.hints !117

; <label>:4733                                    ; preds = %4727
  %4734 = fmul fast float %4649, 5.000000e-01
  %4735 = fmul fast float %4734, %4603
  %4736 = fmul fast float %4734, %4604
  %4737 = fmul fast float %4734, %4605
  %4738 = fsub fast float %4693, %4735
  %4739 = fsub fast float %4694, %4736
  %4740 = fsub fast float %4695, %4737
  %4741 = fadd fast float %4735, %4693
  %4742 = fadd fast float %4736, %4694
  %4743 = fadd fast float %4737, %4695
  %4744 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 271)  ; CBufferLoadLegacy(handle,regIndex)
  %4745 = extractvalue %dx.types.CBufRet.f32 %4744, 1
  %4746 = call float @dx.op.binary.f32(i32 35, float %265, float %4745)  ; FMax(a,b)
  %4747 = fcmp fast ogt float %4649, 0.000000e+00
  %4748 = call float @dx.op.dot3.f32(i32 55, float %4738, float %4739, float %4740, float %4738, float %4739, float %4740)  ; Dot3(ax,ay,az,bx,by,bz)
  %4749 = call float @dx.op.unary.f32(i32 25, float %4748)  ; Rsqrt(value)
  br i1 %4747, label %4750, label %4766, !dx.controlflow.hints !118

; <label>:4750                                    ; preds = %4733
  %4751 = call float @dx.op.dot3.f32(i32 55, float %4741, float %4742, float %4743, float %4741, float %4742, float %4743)  ; Dot3(ax,ay,az,bx,by,bz)
  %4752 = call float @dx.op.unary.f32(i32 25, float %4751)  ; Rsqrt(value)
  %4753 = fmul fast float %4752, %4749
  %4754 = call float @dx.op.dot3.f32(i32 55, float %4738, float %4739, float %4740, float %4741, float %4742, float %4743)  ; Dot3(ax,ay,az,bx,by,bz)
  %4755 = fmul fast float %4754, %4753
  %4756 = fmul fast float %4755, 5.000000e-01
  %4757 = fadd fast float %4753, 5.000000e-01
  %4758 = fadd fast float %4757, %4756
  %4759 = fdiv fast float %4753, %4758
  %4760 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4738, float %4739, float %4740)  ; Dot3(ax,ay,az,bx,by,bz)
  %4761 = fmul fast float %4760, %4749
  %4762 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4741, float %4742, float %4743)  ; Dot3(ax,ay,az,bx,by,bz)
  %4763 = fmul fast float %4762, %4752
  %4764 = fadd fast float %4763, %4761
  %4765 = fmul fast float %4764, 5.000000e-01
  br label %4773

; <label>:4766                                    ; preds = %4733
  %4767 = fadd fast float %4748, 1.000000e+00
  %4768 = fdiv fast float 1.000000e+00, %4767
  %4769 = fmul fast float %4749, %4738
  %4770 = fmul fast float %4749, %4739
  %4771 = fmul fast float %4749, %4740
  %4772 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4769, float %4770, float %4771)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %4773

; <label>:4773                                    ; preds = %4766, %4750
  %4774 = phi float [ %4765, %4750 ], [ %4772, %4766 ]
  %4775 = phi float [ %4759, %4750 ], [ %4768, %4766 ]
  %4776 = phi float [ %4755, %4750 ], [ 1.000000e+00, %4766 ]
  %4777 = fcmp fast ogt float %4647, 0.000000e+00
  br i1 %4777, label %4778, label %4791

; <label>:4778                                    ; preds = %4773
  %4779 = fmul fast float %4647, %4647
  %4780 = fmul fast float %4779, %4775
  %4781 = call float @dx.op.unary.f32(i32 7, float %4780)  ; Saturate(value)
  %4782 = call float @dx.op.unary.f32(i32 24, float %4781)  ; Sqrt(value)
  %4783 = fcmp fast olt float %4774, %4782
  br i1 %4783, label %4784, label %4791

; <label>:4784                                    ; preds = %4778
  %4785 = fsub fast float -0.000000e+00, %4782
  %4786 = call float @dx.op.binary.f32(i32 35, float %4774, float %4785)  ; FMax(a,b)
  %4787 = fadd fast float %4786, %4782
  %4788 = fmul fast float %4787, %4787
  %4789 = fmul fast float %4782, 4.000000e+00
  %4790 = fdiv fast float %4788, %4789
  br label %4791

; <label>:4791                                    ; preds = %4784, %4778, %4773
  %4792 = phi float [ %4774, %4773 ], [ %4790, %4784 ], [ %4774, %4778 ]
  %4793 = call float @dx.op.unary.f32(i32 7, float %4792)  ; Saturate(value)
  %4794 = select i1 %4652, float %4775, float 1.000000e+00
  br i1 %4747, label %4795, label %4826

; <label>:4795                                    ; preds = %4791
  %4796 = call float @dx.op.dot3.f32(i32 55, float %4687, float %4688, float %4689, float %220, float %221, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %4797 = fmul fast float %4796, 2.000000e+00
  %4798 = fmul fast float %4797, %220
  %4799 = fmul fast float %4797, %221
  %4800 = fmul fast float %4797, %222
  %4801 = fsub fast float %4687, %4798
  %4802 = fsub fast float %4688, %4799
  %4803 = fsub fast float %4689, %4800
  %4804 = fmul fast float %4649, %4603
  %4805 = fmul fast float %4649, %4604
  %4806 = fmul fast float %4649, %4605
  %4807 = fmul fast float %4649, %4649
  %4808 = call float @dx.op.dot3.f32(i32 55, float %4801, float %4802, float %4803, float %4804, float %4805, float %4806)  ; Dot3(ax,ay,az,bx,by,bz)
  %4809 = fmul fast float %4801, %4808
  %4810 = fmul fast float %4802, %4808
  %4811 = fmul fast float %4803, %4808
  %4812 = fsub fast float %4809, %4804
  %4813 = fsub fast float %4810, %4805
  %4814 = fsub fast float %4811, %4806
  %4815 = call float @dx.op.dot3.f32(i32 55, float %4738, float %4739, float %4740, float %4812, float %4813, float %4814)  ; Dot3(ax,ay,az,bx,by,bz)
  %4816 = fmul fast float %4808, %4808
  %4817 = fsub fast float %4807, %4816
  %4818 = fdiv fast float %4815, %4817
  %4819 = call float @dx.op.unary.f32(i32 7, float %4818)  ; Saturate(value)
  %4820 = fmul fast float %4819, %4804
  %4821 = fmul fast float %4819, %4805
  %4822 = fmul fast float %4819, %4806
  %4823 = fadd fast float %4820, %4738
  %4824 = fadd fast float %4821, %4739
  %4825 = fadd fast float %4822, %4740
  br label %4826

; <label>:4826                                    ; preds = %4795, %4791
  %4827 = phi float [ %4823, %4795 ], [ %4738, %4791 ]
  %4828 = phi float [ %4824, %4795 ], [ %4739, %4791 ]
  %4829 = phi float [ %4825, %4795 ], [ %4740, %4791 ]
  %4830 = call float @dx.op.dot3.f32(i32 55, float %4827, float %4828, float %4829, float %4827, float %4828, float %4829)  ; Dot3(ax,ay,az,bx,by,bz)
  %4831 = call float @dx.op.unary.f32(i32 25, float %4830)  ; Rsqrt(value)
  %4832 = fmul fast float %4831, %4827
  %4833 = fmul fast float %4831, %4828
  %4834 = fmul fast float %4831, %4829
  %4835 = call float @dx.op.binary.f32(i32 35, float %4746, float %4745)  ; FMax(a,b)
  %4836 = fmul fast float %4835, %4835
  %4837 = fmul fast float %4831, %4647
  %4838 = fsub fast float 1.000000e+00, %4836
  %4839 = fmul fast float %4837, %4838
  %4840 = call float @dx.op.unary.f32(i32 7, float %4839)  ; Saturate(value)
  %4841 = fmul fast float %4831, %4651
  %4842 = call float @dx.op.unary.f32(i32 7, float %4841)  ; Saturate(value)
  switch i32 %200, label %7087 [
    i32 1, label %4843
    i32 10, label %4843
    i32 11, label %4843
    i32 2, label %5048
    i32 3, label %5290
    i32 4, label %5521
    i32 5, label %5908
    i32 6, label %6219
    i32 7, label %6451
    i32 8, label %6637
    i32 9, label %6884
  ]

; <label>:4843                                    ; preds = %4826, %4826, %4826
  %4844 = fcmp fast ogt float %4793, 0.000000e+00
  br i1 %4844, label %4845, label %7087, !dx.controlflow.hints !119

; <label>:4845                                    ; preds = %4843
  %4846 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %4847 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %4848 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %4849 = fmul fast float %4848, 2.000000e+00
  %4850 = fadd fast float %4849, 2.000000e+00
  %4851 = call float @dx.op.unary.f32(i32 25, float %4850)  ; Rsqrt(value)
  %4852 = fadd fast float %4847, %4846
  %4853 = fmul fast float %4851, %4852
  %4854 = call float @dx.op.unary.f32(i32 7, float %4853)  ; Saturate(value)
  %4855 = fmul fast float %4851, %4848
  %4856 = fadd fast float %4855, %4851
  %4857 = call float @dx.op.unary.f32(i32 7, float %4856)  ; Saturate(value)
  %4858 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %4858, label %4859, label %4948

; <label>:4859                                    ; preds = %4845
  %4860 = fmul fast float %4840, %4840
  %4861 = fsub fast float 1.000000e+00, %4860
  %4862 = call float @dx.op.unary.f32(i32 24, float %4861)  ; Sqrt(value)
  %4863 = fmul fast float %4846, 2.000000e+00
  %4864 = fmul fast float %4863, %4847
  %4865 = fsub fast float %4864, %4848
  %4866 = fcmp fast ult float %4865, %4862
  br i1 %4866, label %4869, label %4867

; <label>:4867                                    ; preds = %4859
  %4868 = call float @dx.op.unary.f32(i32 6, float %4847)  ; FAbs(value)
  br label %4948

; <label>:4869                                    ; preds = %4859
  %4870 = fmul fast float %4865, %4865
  %4871 = fsub fast float 1.000000e+00, %4870
  %4872 = call float @dx.op.unary.f32(i32 25, float %4871)  ; Rsqrt(value)
  %4873 = fmul fast float %4872, %4840
  %4874 = fmul fast float %4865, %4846
  %4875 = fsub fast float %4847, %4874
  %4876 = fmul fast float %4873, %4875
  %4877 = fmul fast float %4847, %4847
  %4878 = fmul fast float %4877, 2.000000e+00
  %4879 = fadd fast float %4878, -1.000000e+00
  %4880 = fmul fast float %4865, %4848
  %4881 = fsub fast float %4879, %4880
  %4882 = fmul fast float %4873, %4881
  %4883 = fmul fast float %4846, %4846
  %4884 = fsub fast float 1.000000e+00, %4883
  %4885 = fsub fast float %4884, %4877
  %4886 = fmul fast float %4848, %4848
  %4887 = fsub fast float %4885, %4886
  %4888 = fmul fast float %4864, %4848
  %4889 = fadd fast float %4887, %4888
  %4890 = call float @dx.op.unary.f32(i32 7, float %4889)  ; Saturate(value)
  %4891 = call float @dx.op.unary.f32(i32 24, float %4890)  ; Sqrt(value)
  %4892 = fmul fast float %4891, %4873
  %4893 = fmul fast float %4847, 2.000000e+00
  %4894 = fmul fast float %4893, %4873
  %4895 = fmul fast float %4894, %4891
  %4896 = fmul fast float %4862, %4846
  %4897 = fadd fast float %4896, %4847
  %4898 = fadd fast float %4897, %4876
  %4899 = fmul fast float %4862, %4848
  %4900 = fadd fast float %4899, 1.000000e+00
  %4901 = fadd fast float %4900, %4882
  %4902 = fmul fast float %4892, %4901
  %4903 = fmul fast float %4898, %4901
  %4904 = fmul fast float %4895, %4898
  %4905 = fmul fast float %4902, 5.000000e-01
  %4906 = fmul fast float %4898, 2.500000e-01
  %4907 = fmul fast float %4906, %4895
  %4908 = fsub fast float %4907, %4905
  %4909 = fmul fast float %4908, %4903
  %4910 = fmul fast float %4902, %4902
  %4911 = fmul fast float %4902, 2.000000e+00
  %4912 = fsub fast float %4904, %4911
  %4913 = fmul fast float %4912, %4904
  %4914 = fadd fast float %4913, %4910
  %4915 = fmul fast float %4901, %4901
  %4916 = fmul fast float %4915, %4897
  %4917 = fadd fast float %4901, %4899
  %4918 = fmul fast float %4917, 5.000000e-01
  %4919 = fsub fast float -5.000000e-01, %4918
  %4920 = fmul fast float %4919, %4903
  %4921 = fadd fast float %4920, %4916
  %4922 = fmul fast float %4921, %4898
  %4923 = fadd fast float %4914, %4922
  %4924 = fmul fast float %4909, 2.000000e+00
  %4925 = fmul fast float %4923, %4923
  %4926 = fmul fast float %4909, %4909
  %4927 = fadd fast float %4925, %4926
  %4928 = fdiv fast float %4924, %4927
  %4929 = fmul fast float %4923, %4928
  %4930 = fmul fast float %4909, %4928
  %4931 = fsub fast float 1.000000e+00, %4930
  %4932 = fmul fast float %4931, %4876
  %4933 = fmul fast float %4929, %4892
  %4934 = fmul fast float %4931, %4882
  %4935 = fmul fast float %4929, %4895
  %4936 = fadd fast float %4935, %4899
  %4937 = fadd fast float %4936, %4934
  %4938 = fmul fast float %4937, 2.000000e+00
  %4939 = fadd fast float %4938, 2.000000e+00
  %4940 = call float @dx.op.unary.f32(i32 25, float %4939)  ; Rsqrt(value)
  %4941 = fadd fast float %4897, %4933
  %4942 = fadd fast float %4941, %4932
  %4943 = fmul fast float %4942, %4940
  %4944 = call float @dx.op.unary.f32(i32 7, float %4943)  ; Saturate(value)
  %4945 = fmul fast float %4937, %4940
  %4946 = fadd fast float %4945, %4940
  %4947 = call float @dx.op.unary.f32(i32 7, float %4946)  ; Saturate(value)
  br label %4948

; <label>:4948                                    ; preds = %4869, %4867, %4845
  %4949 = phi float [ %4868, %4867 ], [ %4947, %4869 ], [ %4857, %4845 ]
  %4950 = phi float [ 1.000000e+00, %4867 ], [ %4944, %4869 ], [ %4854, %4845 ]
  %4951 = call float @dx.op.unary.f32(i32 6, float %4847)  ; FAbs(value)
  %4952 = fadd fast float %4951, 0x3EE4F8B580000000
  %4953 = call float @dx.op.unary.f32(i32 7, float %4952)  ; Saturate(value)
  %4954 = fmul fast float %249, 0x3FD45F3060000000
  %4955 = fmul fast float %250, 0x3FD45F3060000000
  %4956 = fmul fast float %251, 0x3FD45F3060000000
  %4957 = fmul fast float %4793, %4794
  %4958 = fmul fast float %4954, %4957
  %4959 = fmul fast float %4955, %4957
  %4960 = fmul fast float %4956, %4957
  %4961 = fmul fast float %4746, %4746
  %4962 = fmul fast float %4961, %4961
  %4963 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %4963, label %4964, label %4971

; <label>:4964                                    ; preds = %4948
  %4965 = fmul fast float %4842, %4842
  %4966 = fmul fast float %4949, 0x400CCCCCC0000000
  %4967 = fadd fast float %4966, 0x3FD99999A0000000
  %4968 = fdiv fast float %4965, %4967
  %4969 = fadd fast float %4968, %4962
  %4970 = call float @dx.op.unary.f32(i32 7, float %4969)  ; Saturate(value)
  br label %4971

; <label>:4971                                    ; preds = %4964, %4948
  %4972 = phi float [ %4970, %4964 ], [ %4962, %4948 ]
  br i1 %4858, label %4973, label %4986

; <label>:4973                                    ; preds = %4971
  %4974 = fmul fast float %4840, 2.500000e-01
  %4975 = bitcast float %4972 to i32
  %4976 = ashr i32 %4975, 1
  %4977 = add nsw i32 %4976, 532487669
  %4978 = bitcast i32 %4977 to float
  %4979 = fmul fast float %4978, 3.000000e+00
  %4980 = fadd fast float %4979, %4840
  %4981 = fmul fast float %4974, %4980
  %4982 = fadd fast float %4949, 0x3F50624DE0000000
  %4983 = fdiv fast float %4981, %4982
  %4984 = fadd fast float %4983, %4972
  %4985 = fdiv fast float %4972, %4984
  br label %4986

; <label>:4986                                    ; preds = %4973, %4971
  %4987 = phi float [ %4984, %4973 ], [ %4972, %4971 ]
  %4988 = phi float [ %4985, %4973 ], [ 1.000000e+00, %4971 ]
  %4989 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %4989, label %4990, label %5009

; <label>:4990                                    ; preds = %4986
  %4991 = fsub fast float 0x3FF00068E0000000, %4776
  %4992 = fadd fast float %4776, 1.000000e+00
  %4993 = fdiv fast float %4991, %4992
  %4994 = call float @dx.op.unary.f32(i32 24, float %4993)  ; Sqrt(value)
  %4995 = fmul fast float %4994, 2.500000e-01
  %4996 = bitcast float %4987 to i32
  %4997 = ashr i32 %4996, 1
  %4998 = add nsw i32 %4997, 532487669
  %4999 = bitcast i32 %4998 to float
  %5000 = fmul fast float %4999, 3.000000e+00
  %5001 = fadd fast float %4994, %5000
  %5002 = fmul fast float %4995, %5001
  %5003 = fadd fast float %4949, 0x3F50624DE0000000
  %5004 = fdiv fast float %5002, %5003
  %5005 = fadd fast float %5004, %4987
  %5006 = fdiv fast float %4987, %5005
  %5007 = call float @dx.op.unary.f32(i32 24, float %5006)  ; Sqrt(value)
  %5008 = fmul fast float %5007, %4988
  br label %5009

; <label>:5009                                    ; preds = %4990, %4986
  %5010 = phi float [ %5008, %4990 ], [ %4988, %4986 ]
  %5011 = fmul fast float %4972, %4950
  %5012 = fsub fast float %5011, %4950
  %5013 = fmul fast float %5012, %4950
  %5014 = fadd fast float %5013, 1.000000e+00
  %5015 = fmul fast float %5014, %5014
  %5016 = fmul fast float %5015, 0x400921FB60000000
  %5017 = fdiv fast float %4972, %5016
  %5018 = fmul fast float %5017, %5010
  %5019 = call float @dx.op.unary.f32(i32 24, float %4972)  ; Sqrt(value)
  %5020 = fsub fast float 1.000000e+00, %5019
  %5021 = fmul fast float %5020, %4953
  %5022 = fadd fast float %5021, %5019
  %5023 = fmul fast float %5022, %4793
  %5024 = fmul fast float %5020, %4793
  %5025 = fadd fast float %5024, %5019
  %5026 = fmul fast float %5025, %4953
  %5027 = fadd fast float %5023, %5026
  %5028 = fdiv fast float 5.000000e-01, %5027
  %5029 = fsub fast float 1.000000e+00, %4949
  %5030 = fmul fast float %5029, %5029
  %5031 = fmul fast float %5030, %5030
  %5032 = fmul fast float %5031, %5029
  %5033 = fmul fast float %261, 5.000000e+01
  %5034 = call float @dx.op.unary.f32(i32 7, float %5033)  ; Saturate(value)
  %5035 = fmul fast float %5034, %5032
  %5036 = fsub fast float 1.000000e+00, %5032
  %5037 = fmul fast float %5036, %260
  %5038 = fmul fast float %5036, %261
  %5039 = fmul fast float %5036, %262
  %5040 = fadd fast float %5035, %5037
  %5041 = fadd fast float %5035, %5038
  %5042 = fadd fast float %5035, %5039
  %5043 = fmul fast float %5018, %5028
  %5044 = fmul fast float %5043, %4957
  %5045 = fmul fast float %5044, %5040
  %5046 = fmul fast float %5044, %5041
  %5047 = fmul fast float %5044, %5042
  br label %7087

; <label>:5048                                    ; preds = %4826
  %5049 = fcmp fast ogt float %4793, 0.000000e+00
  %5050 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %5049, label %5051, label %5253, !dx.controlflow.hints !119

; <label>:5051                                    ; preds = %5048
  %5052 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %5053 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5054 = fmul fast float %5053, 2.000000e+00
  %5055 = fadd fast float %5054, 2.000000e+00
  %5056 = call float @dx.op.unary.f32(i32 25, float %5055)  ; Rsqrt(value)
  %5057 = fadd fast float %5052, %5050
  %5058 = fmul fast float %5056, %5057
  %5059 = call float @dx.op.unary.f32(i32 7, float %5058)  ; Saturate(value)
  %5060 = fmul fast float %5056, %5053
  %5061 = fadd fast float %5060, %5056
  %5062 = call float @dx.op.unary.f32(i32 7, float %5061)  ; Saturate(value)
  %5063 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %5063, label %5064, label %5153

; <label>:5064                                    ; preds = %5051
  %5065 = fmul fast float %4840, %4840
  %5066 = fsub fast float 1.000000e+00, %5065
  %5067 = call float @dx.op.unary.f32(i32 24, float %5066)  ; Sqrt(value)
  %5068 = fmul fast float %5050, 2.000000e+00
  %5069 = fmul fast float %5068, %5052
  %5070 = fsub fast float %5069, %5053
  %5071 = fcmp fast ult float %5070, %5067
  br i1 %5071, label %5074, label %5072

; <label>:5072                                    ; preds = %5064
  %5073 = call float @dx.op.unary.f32(i32 6, float %5052)  ; FAbs(value)
  br label %5153

; <label>:5074                                    ; preds = %5064
  %5075 = fmul fast float %5070, %5070
  %5076 = fsub fast float 1.000000e+00, %5075
  %5077 = call float @dx.op.unary.f32(i32 25, float %5076)  ; Rsqrt(value)
  %5078 = fmul fast float %5077, %4840
  %5079 = fmul fast float %5070, %5050
  %5080 = fsub fast float %5052, %5079
  %5081 = fmul fast float %5078, %5080
  %5082 = fmul fast float %5052, %5052
  %5083 = fmul fast float %5082, 2.000000e+00
  %5084 = fadd fast float %5083, -1.000000e+00
  %5085 = fmul fast float %5070, %5053
  %5086 = fsub fast float %5084, %5085
  %5087 = fmul fast float %5078, %5086
  %5088 = fmul fast float %5050, %5050
  %5089 = fsub fast float 1.000000e+00, %5088
  %5090 = fsub fast float %5089, %5082
  %5091 = fmul fast float %5053, %5053
  %5092 = fsub fast float %5090, %5091
  %5093 = fmul fast float %5069, %5053
  %5094 = fadd fast float %5092, %5093
  %5095 = call float @dx.op.unary.f32(i32 7, float %5094)  ; Saturate(value)
  %5096 = call float @dx.op.unary.f32(i32 24, float %5095)  ; Sqrt(value)
  %5097 = fmul fast float %5096, %5078
  %5098 = fmul fast float %5052, 2.000000e+00
  %5099 = fmul fast float %5098, %5078
  %5100 = fmul fast float %5099, %5096
  %5101 = fmul fast float %5067, %5050
  %5102 = fadd fast float %5101, %5052
  %5103 = fadd fast float %5102, %5081
  %5104 = fmul fast float %5067, %5053
  %5105 = fadd fast float %5104, 1.000000e+00
  %5106 = fadd fast float %5105, %5087
  %5107 = fmul fast float %5097, %5106
  %5108 = fmul fast float %5103, %5106
  %5109 = fmul fast float %5100, %5103
  %5110 = fmul fast float %5107, 5.000000e-01
  %5111 = fmul fast float %5103, 2.500000e-01
  %5112 = fmul fast float %5111, %5100
  %5113 = fsub fast float %5112, %5110
  %5114 = fmul fast float %5113, %5108
  %5115 = fmul fast float %5107, %5107
  %5116 = fmul fast float %5107, 2.000000e+00
  %5117 = fsub fast float %5109, %5116
  %5118 = fmul fast float %5117, %5109
  %5119 = fadd fast float %5118, %5115
  %5120 = fmul fast float %5106, %5106
  %5121 = fmul fast float %5120, %5102
  %5122 = fadd fast float %5106, %5104
  %5123 = fmul fast float %5122, 5.000000e-01
  %5124 = fsub fast float -5.000000e-01, %5123
  %5125 = fmul fast float %5124, %5108
  %5126 = fadd fast float %5125, %5121
  %5127 = fmul fast float %5126, %5103
  %5128 = fadd fast float %5119, %5127
  %5129 = fmul fast float %5114, 2.000000e+00
  %5130 = fmul fast float %5128, %5128
  %5131 = fmul fast float %5114, %5114
  %5132 = fadd fast float %5130, %5131
  %5133 = fdiv fast float %5129, %5132
  %5134 = fmul fast float %5128, %5133
  %5135 = fmul fast float %5114, %5133
  %5136 = fsub fast float 1.000000e+00, %5135
  %5137 = fmul fast float %5136, %5081
  %5138 = fmul fast float %5134, %5097
  %5139 = fmul fast float %5136, %5087
  %5140 = fmul fast float %5134, %5100
  %5141 = fadd fast float %5140, %5104
  %5142 = fadd fast float %5141, %5139
  %5143 = fmul fast float %5142, 2.000000e+00
  %5144 = fadd fast float %5143, 2.000000e+00
  %5145 = call float @dx.op.unary.f32(i32 25, float %5144)  ; Rsqrt(value)
  %5146 = fadd fast float %5102, %5138
  %5147 = fadd fast float %5146, %5137
  %5148 = fmul fast float %5147, %5145
  %5149 = call float @dx.op.unary.f32(i32 7, float %5148)  ; Saturate(value)
  %5150 = fmul fast float %5142, %5145
  %5151 = fadd fast float %5150, %5145
  %5152 = call float @dx.op.unary.f32(i32 7, float %5151)  ; Saturate(value)
  br label %5153

; <label>:5153                                    ; preds = %5074, %5072, %5051
  %5154 = phi float [ %5073, %5072 ], [ %5152, %5074 ], [ %5062, %5051 ]
  %5155 = phi float [ 1.000000e+00, %5072 ], [ %5149, %5074 ], [ %5059, %5051 ]
  %5156 = call float @dx.op.unary.f32(i32 6, float %5052)  ; FAbs(value)
  %5157 = fadd fast float %5156, 0x3EE4F8B580000000
  %5158 = call float @dx.op.unary.f32(i32 7, float %5157)  ; Saturate(value)
  %5159 = fmul fast float %249, 0x3FD45F3060000000
  %5160 = fmul fast float %250, 0x3FD45F3060000000
  %5161 = fmul fast float %251, 0x3FD45F3060000000
  %5162 = fmul fast float %4793, %4794
  %5163 = fmul fast float %5159, %5162
  %5164 = fmul fast float %5160, %5162
  %5165 = fmul fast float %5161, %5162
  %5166 = fmul fast float %4746, %4746
  %5167 = fmul fast float %5166, %5166
  %5168 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %5168, label %5169, label %5176

; <label>:5169                                    ; preds = %5153
  %5170 = fmul fast float %4842, %4842
  %5171 = fmul fast float %5154, 0x400CCCCCC0000000
  %5172 = fadd fast float %5171, 0x3FD99999A0000000
  %5173 = fdiv fast float %5170, %5172
  %5174 = fadd fast float %5173, %5167
  %5175 = call float @dx.op.unary.f32(i32 7, float %5174)  ; Saturate(value)
  br label %5176

; <label>:5176                                    ; preds = %5169, %5153
  %5177 = phi float [ %5175, %5169 ], [ %5167, %5153 ]
  br i1 %5063, label %5178, label %5191

; <label>:5178                                    ; preds = %5176
  %5179 = fmul fast float %4840, 2.500000e-01
  %5180 = bitcast float %5177 to i32
  %5181 = ashr i32 %5180, 1
  %5182 = add nsw i32 %5181, 532487669
  %5183 = bitcast i32 %5182 to float
  %5184 = fmul fast float %5183, 3.000000e+00
  %5185 = fadd fast float %5184, %4840
  %5186 = fmul fast float %5179, %5185
  %5187 = fadd fast float %5154, 0x3F50624DE0000000
  %5188 = fdiv fast float %5186, %5187
  %5189 = fadd fast float %5188, %5177
  %5190 = fdiv fast float %5177, %5189
  br label %5191

; <label>:5191                                    ; preds = %5178, %5176
  %5192 = phi float [ %5189, %5178 ], [ %5177, %5176 ]
  %5193 = phi float [ %5190, %5178 ], [ 1.000000e+00, %5176 ]
  %5194 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %5194, label %5195, label %5214

; <label>:5195                                    ; preds = %5191
  %5196 = fsub fast float 0x3FF00068E0000000, %4776
  %5197 = fadd fast float %4776, 1.000000e+00
  %5198 = fdiv fast float %5196, %5197
  %5199 = call float @dx.op.unary.f32(i32 24, float %5198)  ; Sqrt(value)
  %5200 = fmul fast float %5199, 2.500000e-01
  %5201 = bitcast float %5192 to i32
  %5202 = ashr i32 %5201, 1
  %5203 = add nsw i32 %5202, 532487669
  %5204 = bitcast i32 %5203 to float
  %5205 = fmul fast float %5204, 3.000000e+00
  %5206 = fadd fast float %5199, %5205
  %5207 = fmul fast float %5200, %5206
  %5208 = fadd fast float %5154, 0x3F50624DE0000000
  %5209 = fdiv fast float %5207, %5208
  %5210 = fadd fast float %5209, %5192
  %5211 = fdiv fast float %5192, %5210
  %5212 = call float @dx.op.unary.f32(i32 24, float %5211)  ; Sqrt(value)
  %5213 = fmul fast float %5212, %5193
  br label %5214

; <label>:5214                                    ; preds = %5195, %5191
  %5215 = phi float [ %5213, %5195 ], [ %5193, %5191 ]
  %5216 = fmul fast float %5177, %5155
  %5217 = fsub fast float %5216, %5155
  %5218 = fmul fast float %5217, %5155
  %5219 = fadd fast float %5218, 1.000000e+00
  %5220 = fmul fast float %5219, %5219
  %5221 = fmul fast float %5220, 0x400921FB60000000
  %5222 = fdiv fast float %5177, %5221
  %5223 = fmul fast float %5222, %5215
  %5224 = call float @dx.op.unary.f32(i32 24, float %5177)  ; Sqrt(value)
  %5225 = fsub fast float 1.000000e+00, %5224
  %5226 = fmul fast float %5225, %5158
  %5227 = fadd fast float %5226, %5224
  %5228 = fmul fast float %5227, %4793
  %5229 = fmul fast float %5225, %4793
  %5230 = fadd fast float %5229, %5224
  %5231 = fmul fast float %5230, %5158
  %5232 = fadd fast float %5228, %5231
  %5233 = fdiv fast float 5.000000e-01, %5232
  %5234 = fsub fast float 1.000000e+00, %5154
  %5235 = fmul fast float %5234, %5234
  %5236 = fmul fast float %5235, %5235
  %5237 = fmul fast float %5236, %5234
  %5238 = fmul fast float %261, 5.000000e+01
  %5239 = call float @dx.op.unary.f32(i32 7, float %5238)  ; Saturate(value)
  %5240 = fmul fast float %5239, %5237
  %5241 = fsub fast float 1.000000e+00, %5237
  %5242 = fmul fast float %5241, %260
  %5243 = fmul fast float %5241, %261
  %5244 = fmul fast float %5241, %262
  %5245 = fadd fast float %5240, %5242
  %5246 = fadd fast float %5240, %5243
  %5247 = fadd fast float %5240, %5244
  %5248 = fmul fast float %5223, %5233
  %5249 = fmul fast float %5248, %5162
  %5250 = fmul fast float %5249, %5245
  %5251 = fmul fast float %5249, %5246
  %5252 = fmul fast float %5249, %5247
  br label %5253

; <label>:5253                                    ; preds = %5214, %5048
  %5254 = phi float [ %5250, %5214 ], [ 0.000000e+00, %5048 ]
  %5255 = phi float [ %5251, %5214 ], [ 0.000000e+00, %5048 ]
  %5256 = phi float [ %5252, %5214 ], [ 0.000000e+00, %5048 ]
  %5257 = phi float [ %5163, %5214 ], [ 0.000000e+00, %5048 ]
  %5258 = phi float [ %5164, %5214 ], [ 0.000000e+00, %5048 ]
  %5259 = phi float [ %5165, %5214 ], [ 0.000000e+00, %5048 ]
  %5260 = fmul fast float %214, %214
  %5261 = fmul fast float %215, %215
  %5262 = fmul fast float %216, %216
  %5263 = call float @dx.op.dot3.f32(i32 55, float %4832, float %4833, float %4834, float %4687, float %4688, float %4689)  ; Dot3(ax,ay,az,bx,by,bz)
  %5264 = call float @dx.op.unary.f32(i32 7, float %5263)  ; Saturate(value)
  %5265 = call float @dx.op.unary.f32(i32 23, float %5264)  ; Log(value)
  %5266 = fmul fast float %5265, 1.200000e+01
  %5267 = call float @dx.op.unary.f32(i32 21, float %5266)  ; Exp(value)
  %5268 = fmul fast float %217, 0x4007333340000000
  %5269 = fsub fast float 3.000000e+00, %5268
  %5270 = fmul fast float %5267, %5269
  %5271 = fmul fast float %5050, 0x3FE5555560000000
  %5272 = fadd fast float %5271, 0x3FD5555560000000
  %5273 = call float @dx.op.unary.f32(i32 7, float %5272)  ; Saturate(value)
  %5274 = call float @dx.op.unary.f32(i32 23, float %5273)  ; Log(value)
  %5275 = fmul fast float %5274, 1.500000e+00
  %5276 = call float @dx.op.unary.f32(i32 21, float %5275)  ; Exp(value)
  %5277 = fmul fast float %5276, 0x3FFAAAAAA0000000
  %5278 = fadd fast float %5277, -1.000000e+00
  %5279 = fmul fast float %5278, %217
  %5280 = fadd fast float %5279, 1.000000e+00
  %5281 = fmul fast float %190, 0x3FC45F3060000000
  %5282 = fmul fast float %5281, %5280
  %5283 = fsub fast float 1.000000e+00, %5282
  %5284 = fmul fast float %5270, %5283
  %5285 = fadd fast float %5284, %5282
  %5286 = fmul fast float %5285, %4794
  %5287 = fmul fast float %5260, %5286
  %5288 = fmul fast float %5261, %5286
  %5289 = fmul fast float %5262, %5286
  br label %7087

; <label>:5290                                    ; preds = %4826
  %5291 = fcmp fast ogt float %4793, 0.000000e+00
  %5292 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %5291, label %5293, label %5495, !dx.controlflow.hints !119

; <label>:5293                                    ; preds = %5290
  %5294 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %5295 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5296 = fmul fast float %5295, 2.000000e+00
  %5297 = fadd fast float %5296, 2.000000e+00
  %5298 = call float @dx.op.unary.f32(i32 25, float %5297)  ; Rsqrt(value)
  %5299 = fadd fast float %5294, %5292
  %5300 = fmul fast float %5298, %5299
  %5301 = call float @dx.op.unary.f32(i32 7, float %5300)  ; Saturate(value)
  %5302 = fmul fast float %5298, %5295
  %5303 = fadd fast float %5302, %5298
  %5304 = call float @dx.op.unary.f32(i32 7, float %5303)  ; Saturate(value)
  %5305 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %5305, label %5306, label %5395

; <label>:5306                                    ; preds = %5293
  %5307 = fmul fast float %4840, %4840
  %5308 = fsub fast float 1.000000e+00, %5307
  %5309 = call float @dx.op.unary.f32(i32 24, float %5308)  ; Sqrt(value)
  %5310 = fmul fast float %5292, 2.000000e+00
  %5311 = fmul fast float %5310, %5294
  %5312 = fsub fast float %5311, %5295
  %5313 = fcmp fast ult float %5312, %5309
  br i1 %5313, label %5316, label %5314

; <label>:5314                                    ; preds = %5306
  %5315 = call float @dx.op.unary.f32(i32 6, float %5294)  ; FAbs(value)
  br label %5395

; <label>:5316                                    ; preds = %5306
  %5317 = fmul fast float %5312, %5312
  %5318 = fsub fast float 1.000000e+00, %5317
  %5319 = call float @dx.op.unary.f32(i32 25, float %5318)  ; Rsqrt(value)
  %5320 = fmul fast float %5319, %4840
  %5321 = fmul fast float %5312, %5292
  %5322 = fsub fast float %5294, %5321
  %5323 = fmul fast float %5320, %5322
  %5324 = fmul fast float %5294, %5294
  %5325 = fmul fast float %5324, 2.000000e+00
  %5326 = fadd fast float %5325, -1.000000e+00
  %5327 = fmul fast float %5312, %5295
  %5328 = fsub fast float %5326, %5327
  %5329 = fmul fast float %5320, %5328
  %5330 = fmul fast float %5292, %5292
  %5331 = fsub fast float 1.000000e+00, %5330
  %5332 = fsub fast float %5331, %5324
  %5333 = fmul fast float %5295, %5295
  %5334 = fsub fast float %5332, %5333
  %5335 = fmul fast float %5311, %5295
  %5336 = fadd fast float %5334, %5335
  %5337 = call float @dx.op.unary.f32(i32 7, float %5336)  ; Saturate(value)
  %5338 = call float @dx.op.unary.f32(i32 24, float %5337)  ; Sqrt(value)
  %5339 = fmul fast float %5338, %5320
  %5340 = fmul fast float %5294, 2.000000e+00
  %5341 = fmul fast float %5340, %5320
  %5342 = fmul fast float %5341, %5338
  %5343 = fmul fast float %5309, %5292
  %5344 = fadd fast float %5343, %5294
  %5345 = fadd fast float %5344, %5323
  %5346 = fmul fast float %5309, %5295
  %5347 = fadd fast float %5346, 1.000000e+00
  %5348 = fadd fast float %5347, %5329
  %5349 = fmul fast float %5339, %5348
  %5350 = fmul fast float %5345, %5348
  %5351 = fmul fast float %5342, %5345
  %5352 = fmul fast float %5349, 5.000000e-01
  %5353 = fmul fast float %5345, 2.500000e-01
  %5354 = fmul fast float %5353, %5342
  %5355 = fsub fast float %5354, %5352
  %5356 = fmul fast float %5355, %5350
  %5357 = fmul fast float %5349, %5349
  %5358 = fmul fast float %5349, 2.000000e+00
  %5359 = fsub fast float %5351, %5358
  %5360 = fmul fast float %5359, %5351
  %5361 = fadd fast float %5360, %5357
  %5362 = fmul fast float %5348, %5348
  %5363 = fmul fast float %5362, %5344
  %5364 = fadd fast float %5348, %5346
  %5365 = fmul fast float %5364, 5.000000e-01
  %5366 = fsub fast float -5.000000e-01, %5365
  %5367 = fmul fast float %5366, %5350
  %5368 = fadd fast float %5367, %5363
  %5369 = fmul fast float %5368, %5345
  %5370 = fadd fast float %5361, %5369
  %5371 = fmul fast float %5356, 2.000000e+00
  %5372 = fmul fast float %5370, %5370
  %5373 = fmul fast float %5356, %5356
  %5374 = fadd fast float %5372, %5373
  %5375 = fdiv fast float %5371, %5374
  %5376 = fmul fast float %5370, %5375
  %5377 = fmul fast float %5356, %5375
  %5378 = fsub fast float 1.000000e+00, %5377
  %5379 = fmul fast float %5378, %5323
  %5380 = fmul fast float %5376, %5339
  %5381 = fmul fast float %5378, %5329
  %5382 = fmul fast float %5376, %5342
  %5383 = fadd fast float %5382, %5346
  %5384 = fadd fast float %5383, %5381
  %5385 = fmul fast float %5384, 2.000000e+00
  %5386 = fadd fast float %5385, 2.000000e+00
  %5387 = call float @dx.op.unary.f32(i32 25, float %5386)  ; Rsqrt(value)
  %5388 = fadd fast float %5344, %5380
  %5389 = fadd fast float %5388, %5379
  %5390 = fmul fast float %5389, %5387
  %5391 = call float @dx.op.unary.f32(i32 7, float %5390)  ; Saturate(value)
  %5392 = fmul fast float %5384, %5387
  %5393 = fadd fast float %5392, %5387
  %5394 = call float @dx.op.unary.f32(i32 7, float %5393)  ; Saturate(value)
  br label %5395

; <label>:5395                                    ; preds = %5316, %5314, %5293
  %5396 = phi float [ %5315, %5314 ], [ %5394, %5316 ], [ %5304, %5293 ]
  %5397 = phi float [ 1.000000e+00, %5314 ], [ %5391, %5316 ], [ %5301, %5293 ]
  %5398 = call float @dx.op.unary.f32(i32 6, float %5294)  ; FAbs(value)
  %5399 = fadd fast float %5398, 0x3EE4F8B580000000
  %5400 = call float @dx.op.unary.f32(i32 7, float %5399)  ; Saturate(value)
  %5401 = fmul fast float %249, 0x3FD45F3060000000
  %5402 = fmul fast float %250, 0x3FD45F3060000000
  %5403 = fmul fast float %251, 0x3FD45F3060000000
  %5404 = fmul fast float %4793, %4794
  %5405 = fmul fast float %5401, %5404
  %5406 = fmul fast float %5402, %5404
  %5407 = fmul fast float %5403, %5404
  %5408 = fmul fast float %4746, %4746
  %5409 = fmul fast float %5408, %5408
  %5410 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %5410, label %5411, label %5418

; <label>:5411                                    ; preds = %5395
  %5412 = fmul fast float %4842, %4842
  %5413 = fmul fast float %5396, 0x400CCCCCC0000000
  %5414 = fadd fast float %5413, 0x3FD99999A0000000
  %5415 = fdiv fast float %5412, %5414
  %5416 = fadd fast float %5415, %5409
  %5417 = call float @dx.op.unary.f32(i32 7, float %5416)  ; Saturate(value)
  br label %5418

; <label>:5418                                    ; preds = %5411, %5395
  %5419 = phi float [ %5417, %5411 ], [ %5409, %5395 ]
  br i1 %5305, label %5420, label %5433

; <label>:5420                                    ; preds = %5418
  %5421 = fmul fast float %4840, 2.500000e-01
  %5422 = bitcast float %5419 to i32
  %5423 = ashr i32 %5422, 1
  %5424 = add nsw i32 %5423, 532487669
  %5425 = bitcast i32 %5424 to float
  %5426 = fmul fast float %5425, 3.000000e+00
  %5427 = fadd fast float %5426, %4840
  %5428 = fmul fast float %5421, %5427
  %5429 = fadd fast float %5396, 0x3F50624DE0000000
  %5430 = fdiv fast float %5428, %5429
  %5431 = fadd fast float %5430, %5419
  %5432 = fdiv fast float %5419, %5431
  br label %5433

; <label>:5433                                    ; preds = %5420, %5418
  %5434 = phi float [ %5431, %5420 ], [ %5419, %5418 ]
  %5435 = phi float [ %5432, %5420 ], [ 1.000000e+00, %5418 ]
  %5436 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %5436, label %5437, label %5456

; <label>:5437                                    ; preds = %5433
  %5438 = fsub fast float 0x3FF00068E0000000, %4776
  %5439 = fadd fast float %4776, 1.000000e+00
  %5440 = fdiv fast float %5438, %5439
  %5441 = call float @dx.op.unary.f32(i32 24, float %5440)  ; Sqrt(value)
  %5442 = fmul fast float %5441, 2.500000e-01
  %5443 = bitcast float %5434 to i32
  %5444 = ashr i32 %5443, 1
  %5445 = add nsw i32 %5444, 532487669
  %5446 = bitcast i32 %5445 to float
  %5447 = fmul fast float %5446, 3.000000e+00
  %5448 = fadd fast float %5441, %5447
  %5449 = fmul fast float %5442, %5448
  %5450 = fadd fast float %5396, 0x3F50624DE0000000
  %5451 = fdiv fast float %5449, %5450
  %5452 = fadd fast float %5451, %5434
  %5453 = fdiv fast float %5434, %5452
  %5454 = call float @dx.op.unary.f32(i32 24, float %5453)  ; Sqrt(value)
  %5455 = fmul fast float %5454, %5435
  br label %5456

; <label>:5456                                    ; preds = %5437, %5433
  %5457 = phi float [ %5455, %5437 ], [ %5435, %5433 ]
  %5458 = fmul fast float %5419, %5397
  %5459 = fsub fast float %5458, %5397
  %5460 = fmul fast float %5459, %5397
  %5461 = fadd fast float %5460, 1.000000e+00
  %5462 = fmul fast float %5461, %5461
  %5463 = fmul fast float %5462, 0x400921FB60000000
  %5464 = fdiv fast float %5419, %5463
  %5465 = fmul fast float %5464, %5457
  %5466 = call float @dx.op.unary.f32(i32 24, float %5419)  ; Sqrt(value)
  %5467 = fsub fast float 1.000000e+00, %5466
  %5468 = fmul fast float %5467, %5400
  %5469 = fadd fast float %5468, %5466
  %5470 = fmul fast float %5469, %4793
  %5471 = fmul fast float %5467, %4793
  %5472 = fadd fast float %5471, %5466
  %5473 = fmul fast float %5472, %5400
  %5474 = fadd fast float %5470, %5473
  %5475 = fdiv fast float 5.000000e-01, %5474
  %5476 = fsub fast float 1.000000e+00, %5396
  %5477 = fmul fast float %5476, %5476
  %5478 = fmul fast float %5477, %5477
  %5479 = fmul fast float %5478, %5476
  %5480 = fmul fast float %261, 5.000000e+01
  %5481 = call float @dx.op.unary.f32(i32 7, float %5480)  ; Saturate(value)
  %5482 = fmul fast float %5481, %5479
  %5483 = fsub fast float 1.000000e+00, %5479
  %5484 = fmul fast float %5483, %260
  %5485 = fmul fast float %5483, %261
  %5486 = fmul fast float %5483, %262
  %5487 = fadd fast float %5482, %5484
  %5488 = fadd fast float %5482, %5485
  %5489 = fadd fast float %5482, %5486
  %5490 = fmul fast float %5465, %5475
  %5491 = fmul fast float %5490, %5404
  %5492 = fmul fast float %5491, %5487
  %5493 = fmul fast float %5491, %5488
  %5494 = fmul fast float %5491, %5489
  br label %5495

; <label>:5495                                    ; preds = %5456, %5290
  %5496 = phi float [ %5492, %5456 ], [ 0.000000e+00, %5290 ]
  %5497 = phi float [ %5493, %5456 ], [ 0.000000e+00, %5290 ]
  %5498 = phi float [ %5494, %5456 ], [ 0.000000e+00, %5290 ]
  %5499 = phi float [ %5405, %5456 ], [ 0.000000e+00, %5290 ]
  %5500 = phi float [ %5406, %5456 ], [ 0.000000e+00, %5290 ]
  %5501 = phi float [ %5407, %5456 ], [ 0.000000e+00, %5290 ]
  %5502 = fmul fast float %5292, 5.000000e-01
  %5503 = fadd fast float %5502, 5.000000e-01
  %5504 = call float @dx.op.unary.f32(i32 7, float %5503)  ; Saturate(value)
  %5505 = fsub fast float 1.000000e+00, %217
  %5506 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %5507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %5508 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5506, %dx.types.Handle %5507, float %5504, float %5505, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %5509 = extractvalue %dx.types.ResRet.f32 %5508, 0
  %5510 = extractvalue %dx.types.ResRet.f32 %5508, 1
  %5511 = extractvalue %dx.types.ResRet.f32 %5508, 2
  %5512 = fmul fast float %214, %214
  %5513 = fmul fast float %5512, %4794
  %5514 = fmul fast float %5513, %5509
  %5515 = fmul fast float %215, %215
  %5516 = fmul fast float %5515, %4794
  %5517 = fmul fast float %5516, %5510
  %5518 = fmul fast float %216, %216
  %5519 = fmul fast float %5518, %4794
  %5520 = fmul fast float %5519, %5511
  br label %7087

; <label>:5521                                    ; preds = %4826
  %5522 = call float @dx.op.binary.f32(i32 35, float %215, float 0x3F947AE140000000)  ; FMax(a,b)
  %5523 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5524 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %5525 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5526 = fmul fast float %5525, 2.000000e+00
  %5527 = fadd fast float %5526, 2.000000e+00
  %5528 = call float @dx.op.unary.f32(i32 25, float %5527)  ; Rsqrt(value)
  %5529 = fadd fast float %5524, %5523
  %5530 = fmul fast float %5528, %5529
  %5531 = call float @dx.op.unary.f32(i32 7, float %5530)  ; Saturate(value)
  %5532 = fmul fast float %5528, %5525
  %5533 = fadd fast float %5532, %5528
  %5534 = call float @dx.op.unary.f32(i32 7, float %5533)  ; Saturate(value)
  %5535 = fmul fast float %4746, %4746
  %5536 = fsub fast float 1.000000e+00, %5535
  %5537 = fmul fast float %5522, %5522
  %5538 = fcmp fast ogt float %5536, 0.000000e+00
  %5539 = fsub fast float 1.000000e+00, %5537
  %5540 = fdiv fast float %5539, %5536
  %5541 = select i1 %5538, float %5540, float 0.000000e+00
  %5542 = fmul fast float %5541, %4840
  %5543 = call float @dx.op.unary.f32(i32 7, float %5542)  ; Saturate(value)
  %5544 = fcmp fast ogt float %5543, 0.000000e+00
  br i1 %5544, label %5545, label %5635

; <label>:5545                                    ; preds = %5521
  %5546 = fmul fast float %5543, %5543
  %5547 = fsub fast float 1.000000e+00, %5546
  %5548 = call float @dx.op.unary.f32(i32 24, float %5547)  ; Sqrt(value)
  %5549 = fmul fast float %5523, 2.000000e+00
  %5550 = fmul fast float %5549, %5524
  %5551 = fsub fast float %5550, %5525
  %5552 = fcmp fast ult float %5551, %5548
  br i1 %5552, label %5555, label %5553

; <label>:5553                                    ; preds = %5545
  %5554 = call float @dx.op.unary.f32(i32 6, float %5524)  ; FAbs(value)
  br label %5635

; <label>:5555                                    ; preds = %5545
  %5556 = fmul fast float %5551, %5551
  %5557 = fsub fast float 1.000000e+00, %5556
  %5558 = call float @dx.op.unary.f32(i32 25, float %5557)  ; Rsqrt(value)
  %5559 = fmul fast float %5558, %5543
  %5560 = fmul fast float %5551, %5523
  %5561 = fsub fast float %5524, %5560
  %5562 = fmul fast float %5559, %5561
  %5563 = fmul fast float %5524, %5524
  %5564 = fmul fast float %5563, 2.000000e+00
  %5565 = fadd fast float %5564, -1.000000e+00
  %5566 = fmul fast float %5551, %5525
  %5567 = fsub fast float %5565, %5566
  %5568 = fmul fast float %5559, %5567
  %5569 = fmul fast float %5523, %5523
  %5570 = fsub fast float 1.000000e+00, %5569
  %5571 = fsub fast float %5570, %5563
  %5572 = fmul fast float %5525, %5525
  %5573 = fsub fast float %5571, %5572
  %5574 = fmul fast float %5550, %5525
  %5575 = fadd fast float %5573, %5574
  %5576 = call float @dx.op.unary.f32(i32 7, float %5575)  ; Saturate(value)
  %5577 = call float @dx.op.unary.f32(i32 24, float %5576)  ; Sqrt(value)
  %5578 = fmul fast float %5577, %5559
  %5579 = fmul fast float %5524, 2.000000e+00
  %5580 = fmul fast float %5579, %5559
  %5581 = fmul fast float %5580, %5577
  %5582 = fmul fast float %5548, %5523
  %5583 = fadd fast float %5582, %5524
  %5584 = fadd fast float %5583, %5562
  %5585 = fmul fast float %5548, %5525
  %5586 = fadd fast float %5585, 1.000000e+00
  %5587 = fadd fast float %5586, %5568
  %5588 = fmul fast float %5578, %5587
  %5589 = fmul fast float %5584, %5587
  %5590 = fmul fast float %5581, %5584
  %5591 = fmul fast float %5588, 5.000000e-01
  %5592 = fmul fast float %5584, 2.500000e-01
  %5593 = fmul fast float %5592, %5581
  %5594 = fsub fast float %5593, %5591
  %5595 = fmul fast float %5594, %5589
  %5596 = fmul fast float %5588, %5588
  %5597 = fmul fast float %5588, 2.000000e+00
  %5598 = fsub fast float %5590, %5597
  %5599 = fmul fast float %5598, %5590
  %5600 = fadd fast float %5599, %5596
  %5601 = fmul fast float %5587, %5587
  %5602 = fmul fast float %5601, %5583
  %5603 = fadd fast float %5587, %5585
  %5604 = fmul fast float %5603, 5.000000e-01
  %5605 = fsub fast float -5.000000e-01, %5604
  %5606 = fmul fast float %5605, %5589
  %5607 = fadd fast float %5606, %5602
  %5608 = fmul fast float %5607, %5584
  %5609 = fadd fast float %5600, %5608
  %5610 = fmul fast float %5595, 2.000000e+00
  %5611 = fmul fast float %5609, %5609
  %5612 = fmul fast float %5595, %5595
  %5613 = fadd fast float %5611, %5612
  %5614 = fdiv fast float %5610, %5613
  %5615 = fmul fast float %5609, %5614
  %5616 = fmul fast float %5595, %5614
  %5617 = fsub fast float 1.000000e+00, %5616
  %5618 = fmul fast float %5617, %5562
  %5619 = fmul fast float %5615, %5578
  %5620 = fmul fast float %5617, %5568
  %5621 = fmul fast float %5615, %5581
  %5622 = fadd fast float %5619, %5582
  %5623 = fadd fast float %5622, %5618
  %5624 = fadd fast float %5621, %5585
  %5625 = fadd fast float %5624, %5620
  %5626 = fmul fast float %5625, 2.000000e+00
  %5627 = fadd fast float %5626, 2.000000e+00
  %5628 = call float @dx.op.unary.f32(i32 25, float %5627)  ; Rsqrt(value)
  %5629 = fadd fast float %5623, %5524
  %5630 = fmul fast float %5629, %5628
  %5631 = call float @dx.op.unary.f32(i32 7, float %5630)  ; Saturate(value)
  %5632 = fmul fast float %5625, %5628
  %5633 = fadd fast float %5632, %5628
  %5634 = call float @dx.op.unary.f32(i32 7, float %5633)  ; Saturate(value)
  br label %5635

; <label>:5635                                    ; preds = %5555, %5553, %5521
  %5636 = phi float [ %5554, %5553 ], [ %5634, %5555 ], [ %5534, %5521 ]
  %5637 = phi float [ 1.000000e+00, %5553 ], [ %5631, %5555 ], [ %5531, %5521 ]
  %5638 = phi float [ %5523, %5553 ], [ %5623, %5555 ], [ %5523, %5521 ]
  %5639 = call float @dx.op.unary.f32(i32 6, float %5524)  ; FAbs(value)
  %5640 = fadd fast float %5639, 0x3EE4F8B580000000
  %5641 = call float @dx.op.unary.f32(i32 7, float %5640)  ; Saturate(value)
  %5642 = fsub fast float 1.000000e+00, %5636
  %5643 = fmul fast float %5642, %5642
  %5644 = fmul fast float %5643, %5643
  %5645 = fmul fast float %5644, %5642
  %5646 = fsub fast float 1.000000e+00, %5645
  %5647 = fmul fast float %5646, 0x3FA47AE140000000
  %5648 = fadd fast float %5647, %5645
  %5649 = fmul fast float %5537, %5537
  %5650 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %5650, label %5651, label %5658

; <label>:5651                                    ; preds = %5635
  %5652 = fmul fast float %4842, %4842
  %5653 = fmul fast float %5636, 0x400CCCCCC0000000
  %5654 = fadd fast float %5653, 0x3FD99999A0000000
  %5655 = fdiv fast float %5652, %5654
  %5656 = fadd fast float %5655, %5649
  %5657 = call float @dx.op.unary.f32(i32 7, float %5656)  ; Saturate(value)
  br label %5658

; <label>:5658                                    ; preds = %5651, %5635
  %5659 = phi float [ %5657, %5651 ], [ %5649, %5635 ]
  br i1 %5544, label %5660, label %5673

; <label>:5660                                    ; preds = %5658
  %5661 = fmul fast float %5543, 2.500000e-01
  %5662 = bitcast float %5659 to i32
  %5663 = ashr i32 %5662, 1
  %5664 = add nsw i32 %5663, 532487669
  %5665 = bitcast i32 %5664 to float
  %5666 = fmul fast float %5665, 3.000000e+00
  %5667 = fadd fast float %5666, %5543
  %5668 = fmul fast float %5661, %5667
  %5669 = fadd fast float %5636, 0x3F50624DE0000000
  %5670 = fdiv fast float %5668, %5669
  %5671 = fadd fast float %5670, %5659
  %5672 = fdiv fast float %5659, %5671
  br label %5673

; <label>:5673                                    ; preds = %5660, %5658
  %5674 = phi float [ %5671, %5660 ], [ %5659, %5658 ]
  %5675 = phi float [ %5672, %5660 ], [ 1.000000e+00, %5658 ]
  %5676 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %5676, label %5677, label %5696

; <label>:5677                                    ; preds = %5673
  %5678 = fsub fast float 0x3FF00068E0000000, %4776
  %5679 = fadd fast float %4776, 1.000000e+00
  %5680 = fdiv fast float %5678, %5679
  %5681 = call float @dx.op.unary.f32(i32 24, float %5680)  ; Sqrt(value)
  %5682 = fmul fast float %5681, 2.500000e-01
  %5683 = bitcast float %5674 to i32
  %5684 = ashr i32 %5683, 1
  %5685 = add nsw i32 %5684, 532487669
  %5686 = bitcast i32 %5685 to float
  %5687 = fmul fast float %5686, 3.000000e+00
  %5688 = fadd fast float %5681, %5687
  %5689 = fmul fast float %5682, %5688
  %5690 = fadd fast float %5636, 0x3F50624DE0000000
  %5691 = fdiv fast float %5689, %5690
  %5692 = fadd fast float %5691, %5674
  %5693 = fdiv fast float %5674, %5692
  %5694 = call float @dx.op.unary.f32(i32 24, float %5693)  ; Sqrt(value)
  %5695 = fmul fast float %5694, %5675
  br label %5696

; <label>:5696                                    ; preds = %5677, %5673
  %5697 = phi float [ %5695, %5677 ], [ %5675, %5673 ]
  %5698 = call float @dx.op.unary.f32(i32 24, float %5659)  ; Sqrt(value)
  %5699 = fsub fast float 1.000000e+00, %5698
  %5700 = fmul fast float %5699, %5641
  %5701 = fadd fast float %5700, %5698
  %5702 = fmul fast float %5701, %4793
  %5703 = fmul fast float %5699, %4793
  %5704 = fadd fast float %5703, %5698
  %5705 = fmul fast float %5704, %5641
  %5706 = fadd fast float %5702, %5705
  %5707 = fdiv fast float 5.000000e-01, %5706
  %5708 = fmul fast float %5659, %5637
  %5709 = fsub fast float %5708, %5637
  %5710 = fmul fast float %5709, %5637
  %5711 = fadd fast float %5710, 1.000000e+00
  %5712 = fmul fast float %5711, %5711
  %5713 = fmul fast float %5712, 0x400921FB60000000
  %5714 = fdiv fast float %5659, %5713
  %5715 = fmul fast float %4793, %4794
  %5716 = fmul fast float %5715, %5648
  %5717 = fmul fast float %5716, %5697
  %5718 = fmul fast float %5717, %5707
  %5719 = fmul fast float %5718, %5714
  %5720 = fmul fast float %5719, %214
  %5721 = fsub fast float 1.000000e+00, %5648
  %5722 = fmul fast float %5721, %5721
  %5723 = fmul fast float %5636, 0x3FCC28F5C0000000
  %5724 = fsub fast float 0x3FE428F5C0000000, %5723
  %5725 = fmul fast float %5724, %5636
  %5726 = fadd fast float %5725, 0xBFE7D70A40000000
  %5727 = fmul fast float %5726, %5637
  %5728 = fmul fast float %5641, 0x3FE5555560000000
  %5729 = fsub fast float %5728, %5727
  %5730 = call float @dx.op.binary.f32(i32 35, float %5729, float 0x3F50624DE0000000)  ; FMax(a,b)
  %5731 = call float @dx.op.binary.f32(i32 36, float %5730, float 1.000000e+00)  ; FMin(a,b)
  %5732 = fmul fast float %5636, 0x3FE5555560000000
  %5733 = fsub fast float %5732, %5726
  %5734 = call float @dx.op.unary.f32(i32 7, float %5733)  ; Saturate(value)
  %5735 = fcmp fast ogt float %224, 0.000000e+00
  br i1 %5735, label %5736, label %5773

; <label>:5736                                    ; preds = %5696
  %5737 = fmul fast float %5638, 0x3FE5555560000000
  %5738 = fsub fast float %5737, %5727
  %5739 = call float @dx.op.binary.f32(i32 35, float %5738, float 0x3F50624DE0000000)  ; FMax(a,b)
  %5740 = call float @dx.op.binary.f32(i32 36, float %5739, float 1.000000e+00)  ; FMin(a,b)
  %5741 = fdiv fast float 1.000000e+00, %5731
  %5742 = fdiv fast float 1.000000e+00, %5740
  %5743 = fmul fast float %187, 0x3FD45F3060000000
  %5744 = fmul fast float %188, 0x3FD45F3060000000
  %5745 = fmul fast float %189, 0x3FD45F3060000000
  %5746 = call float @dx.op.binary.f32(i32 35, float %5743, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %5747 = call float @dx.op.binary.f32(i32 35, float %5744, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %5748 = call float @dx.op.binary.f32(i32 35, float %5745, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %5749 = call float @dx.op.unary.f32(i32 23, float %5746)  ; Log(value)
  %5750 = call float @dx.op.unary.f32(i32 23, float %5747)  ; Log(value)
  %5751 = call float @dx.op.unary.f32(i32 23, float %5748)  ; Log(value)
  %5752 = fadd fast float %5741, -2.000000e+00
  %5753 = fadd fast float %5752, %5742
  %5754 = call float @dx.op.binary.f32(i32 35, float %5753, float 0.000000e+00)  ; FMax(a,b)
  %5755 = fmul fast float %5749, 5.000000e-01
  %5756 = fmul fast float %5755, %5754
  %5757 = fmul fast float %5750, 5.000000e-01
  %5758 = fmul fast float %5757, %5754
  %5759 = fmul fast float %5751, 5.000000e-01
  %5760 = fmul fast float %5759, %5754
  %5761 = call float @dx.op.unary.f32(i32 21, float %5756)  ; Exp(value)
  %5762 = call float @dx.op.unary.f32(i32 21, float %5758)  ; Exp(value)
  %5763 = call float @dx.op.unary.f32(i32 21, float %5760)  ; Exp(value)
  %5764 = fadd fast float %5761, -1.000000e+00
  %5765 = fadd fast float %5762, -1.000000e+00
  %5766 = fadd fast float %5763, -1.000000e+00
  %5767 = fmul fast float %5764, %224
  %5768 = fmul fast float %5765, %224
  %5769 = fmul fast float %5766, %224
  %5770 = fadd fast float %5767, 1.000000e+00
  %5771 = fadd fast float %5768, 1.000000e+00
  %5772 = fadd fast float %5769, 1.000000e+00
  br label %5773

; <label>:5773                                    ; preds = %5736, %5696
  %5774 = phi float [ %5770, %5736 ], [ 1.000000e+00, %5696 ]
  %5775 = phi float [ %5771, %5736 ], [ 1.000000e+00, %5696 ]
  %5776 = phi float [ %5772, %5736 ], [ 1.000000e+00, %5696 ]
  %5777 = fmul fast float %249, 0x3FD45F3060000000
  %5778 = fmul fast float %250, 0x3FD45F3060000000
  %5779 = fmul fast float %251, 0x3FD45F3060000000
  %5780 = fmul fast float %5777, %5715
  %5781 = fmul fast float %5778, %5715
  %5782 = fmul fast float %5779, %5715
  %5783 = fmul fast float %5722, %5780
  %5784 = fmul fast float %5783, %5774
  %5785 = fmul fast float %5722, %5781
  %5786 = fmul fast float %5785, %5775
  %5787 = fmul fast float %5722, %5782
  %5788 = fmul fast float %5787, %5776
  %5789 = fsub fast float %5784, %5780
  %5790 = fsub fast float %5786, %5781
  %5791 = fsub fast float %5788, %5782
  %5792 = fmul fast float %5789, %214
  %5793 = fmul fast float %5790, %214
  %5794 = fmul fast float %5791, %214
  %5795 = fadd fast float %5792, %5780
  %5796 = fadd fast float %5793, %5781
  %5797 = fadd fast float %5794, %5782
  %5798 = fmul fast float %5535, %5535
  %5799 = call float @dx.op.unary.f32(i32 24, float %5798)  ; Sqrt(value)
  %5800 = fsub fast float 1.000000e+00, %5799
  %5801 = fmul fast float %5800, %5731
  %5802 = fadd fast float %5801, %5799
  %5803 = fmul fast float %5802, %4793
  %5804 = fmul fast float %5800, %4793
  %5805 = fadd fast float %5804, %5799
  %5806 = fmul fast float %5805, %5731
  %5807 = fadd fast float %5803, %5806
  %5808 = fdiv fast float 5.000000e-01, %5807
  %5809 = fmul fast float %5637, %5798
  %5810 = fsub fast float %5809, %5637
  %5811 = fmul fast float %5810, %5637
  %5812 = fadd fast float %5811, 1.000000e+00
  %5813 = fmul fast float %5812, %5812
  %5814 = fmul fast float %5813, 0x400921FB60000000
  %5815 = fdiv fast float %5798, %5814
  %5816 = fsub fast float 1.000000e+00, %5734
  %5817 = fmul fast float %5816, %5816
  %5818 = fmul fast float %5817, %5817
  %5819 = fmul fast float %5818, %5816
  %5820 = fmul fast float %261, 5.000000e+01
  %5821 = call float @dx.op.unary.f32(i32 7, float %5820)  ; Saturate(value)
  %5822 = fmul fast float %5821, %5819
  %5823 = fsub fast float 1.000000e+00, %5819
  %5824 = fmul fast float %5823, %260
  %5825 = fmul fast float %5823, %261
  %5826 = fmul fast float %5823, %262
  %5827 = fadd fast float %5822, %5824
  %5828 = fadd fast float %5822, %5825
  %5829 = fadd fast float %5822, %5826
  %5830 = fmul fast float %5821, %5645
  %5831 = fmul fast float %5646, %260
  %5832 = fmul fast float %5646, %261
  %5833 = fmul fast float %5646, %262
  %5834 = fadd fast float %5830, %5831
  %5835 = fadd fast float %5830, %5832
  %5836 = fadd fast float %5830, %5833
  br i1 %5650, label %5837, label %5844

; <label>:5837                                    ; preds = %5773
  %5838 = fmul fast float %4842, %4842
  %5839 = fmul fast float %5636, 0x400CCCCCC0000000
  %5840 = fadd fast float %5839, 0x3FD99999A0000000
  %5841 = fdiv fast float %5838, %5840
  %5842 = fadd fast float %5841, %5798
  %5843 = call float @dx.op.unary.f32(i32 7, float %5842)  ; Saturate(value)
  br label %5844

; <label>:5844                                    ; preds = %5837, %5773
  %5845 = phi float [ %5843, %5837 ], [ %5798, %5773 ]
  %5846 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %5846, label %5847, label %5860

; <label>:5847                                    ; preds = %5844
  %5848 = fmul fast float %4840, 2.500000e-01
  %5849 = bitcast float %5845 to i32
  %5850 = ashr i32 %5849, 1
  %5851 = add nsw i32 %5850, 532487669
  %5852 = bitcast i32 %5851 to float
  %5853 = fmul fast float %5852, 3.000000e+00
  %5854 = fadd fast float %5853, %4840
  %5855 = fmul fast float %5848, %5854
  %5856 = fadd fast float %5636, 0x3F50624DE0000000
  %5857 = fdiv fast float %5855, %5856
  %5858 = fadd fast float %5857, %5845
  %5859 = fdiv fast float %5845, %5858
  br label %5860

; <label>:5860                                    ; preds = %5847, %5844
  %5861 = phi float [ %5858, %5847 ], [ %5845, %5844 ]
  %5862 = phi float [ %5859, %5847 ], [ 1.000000e+00, %5844 ]
  br i1 %5676, label %5863, label %5882

; <label>:5863                                    ; preds = %5860
  %5864 = fsub fast float 0x3FF00068E0000000, %4776
  %5865 = fadd fast float %4776, 1.000000e+00
  %5866 = fdiv fast float %5864, %5865
  %5867 = call float @dx.op.unary.f32(i32 24, float %5866)  ; Sqrt(value)
  %5868 = fmul fast float %5867, 2.500000e-01
  %5869 = bitcast float %5861 to i32
  %5870 = ashr i32 %5869, 1
  %5871 = add nsw i32 %5870, 532487669
  %5872 = bitcast i32 %5871 to float
  %5873 = fmul fast float %5872, 3.000000e+00
  %5874 = fadd fast float %5867, %5873
  %5875 = fmul fast float %5868, %5874
  %5876 = fadd fast float %5636, 0x3F50624DE0000000
  %5877 = fdiv fast float %5875, %5876
  %5878 = fadd fast float %5877, %5861
  %5879 = fdiv fast float %5861, %5878
  %5880 = call float @dx.op.unary.f32(i32 24, float %5879)  ; Sqrt(value)
  %5881 = fmul fast float %5880, %5862
  br label %5882

; <label>:5882                                    ; preds = %5863, %5860
  %5883 = phi float [ %5881, %5863 ], [ %5862, %5860 ]
  %5884 = fmul fast float %5715, %5808
  %5885 = fmul fast float %5884, %5815
  %5886 = fmul fast float %5885, %5883
  %5887 = fmul fast float %5774, %5722
  %5888 = fmul fast float %5775, %5722
  %5889 = fmul fast float %5776, %5722
  %5890 = fmul fast float %5887, %5827
  %5891 = fmul fast float %5888, %5828
  %5892 = fmul fast float %5889, %5829
  %5893 = fsub fast float %5890, %5834
  %5894 = fsub fast float %5891, %5835
  %5895 = fsub fast float %5892, %5836
  %5896 = fmul fast float %5893, %214
  %5897 = fmul fast float %5894, %214
  %5898 = fmul fast float %5895, %214
  %5899 = fadd fast float %5896, %5834
  %5900 = fadd fast float %5897, %5835
  %5901 = fadd fast float %5898, %5836
  %5902 = fmul fast float %5886, %5899
  %5903 = fmul fast float %5886, %5900
  %5904 = fmul fast float %5886, %5901
  %5905 = fadd fast float %5902, %5720
  %5906 = fadd fast float %5903, %5720
  %5907 = fadd fast float %5904, %5720
  br label %7087

; <label>:5908                                    ; preds = %4826
  %5909 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5910 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %5911 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %5912 = fmul fast float %5911, 2.000000e+00
  %5913 = fadd fast float %5912, 2.000000e+00
  %5914 = call float @dx.op.unary.f32(i32 25, float %5913)  ; Rsqrt(value)
  %5915 = fadd fast float %5910, %5909
  %5916 = fmul fast float %5914, %5915
  %5917 = call float @dx.op.unary.f32(i32 7, float %5916)  ; Saturate(value)
  %5918 = fmul fast float %5914, %5911
  %5919 = fadd fast float %5918, %5914
  %5920 = call float @dx.op.unary.f32(i32 7, float %5919)  ; Saturate(value)
  %5921 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %5921, label %5922, label %6011

; <label>:5922                                    ; preds = %5908
  %5923 = fmul fast float %4840, %4840
  %5924 = fsub fast float 1.000000e+00, %5923
  %5925 = call float @dx.op.unary.f32(i32 24, float %5924)  ; Sqrt(value)
  %5926 = fmul fast float %5909, 2.000000e+00
  %5927 = fmul fast float %5926, %5910
  %5928 = fsub fast float %5927, %5911
  %5929 = fcmp fast ult float %5928, %5925
  br i1 %5929, label %5932, label %5930

; <label>:5930                                    ; preds = %5922
  %5931 = call float @dx.op.unary.f32(i32 6, float %5910)  ; FAbs(value)
  br label %6011

; <label>:5932                                    ; preds = %5922
  %5933 = fmul fast float %5928, %5928
  %5934 = fsub fast float 1.000000e+00, %5933
  %5935 = call float @dx.op.unary.f32(i32 25, float %5934)  ; Rsqrt(value)
  %5936 = fmul fast float %5935, %4840
  %5937 = fmul fast float %5928, %5909
  %5938 = fsub fast float %5910, %5937
  %5939 = fmul fast float %5936, %5938
  %5940 = fmul fast float %5910, %5910
  %5941 = fmul fast float %5940, 2.000000e+00
  %5942 = fadd fast float %5941, -1.000000e+00
  %5943 = fmul fast float %5928, %5911
  %5944 = fsub fast float %5942, %5943
  %5945 = fmul fast float %5936, %5944
  %5946 = fmul fast float %5909, %5909
  %5947 = fsub fast float 1.000000e+00, %5946
  %5948 = fsub fast float %5947, %5940
  %5949 = fmul fast float %5911, %5911
  %5950 = fsub fast float %5948, %5949
  %5951 = fmul fast float %5927, %5911
  %5952 = fadd fast float %5950, %5951
  %5953 = call float @dx.op.unary.f32(i32 7, float %5952)  ; Saturate(value)
  %5954 = call float @dx.op.unary.f32(i32 24, float %5953)  ; Sqrt(value)
  %5955 = fmul fast float %5954, %5936
  %5956 = fmul fast float %5910, 2.000000e+00
  %5957 = fmul fast float %5956, %5936
  %5958 = fmul fast float %5957, %5954
  %5959 = fmul fast float %5925, %5909
  %5960 = fadd fast float %5959, %5910
  %5961 = fadd fast float %5960, %5939
  %5962 = fmul fast float %5925, %5911
  %5963 = fadd fast float %5962, 1.000000e+00
  %5964 = fadd fast float %5963, %5945
  %5965 = fmul fast float %5955, %5964
  %5966 = fmul fast float %5961, %5964
  %5967 = fmul fast float %5958, %5961
  %5968 = fmul fast float %5965, 5.000000e-01
  %5969 = fmul fast float %5961, 2.500000e-01
  %5970 = fmul fast float %5969, %5958
  %5971 = fsub fast float %5970, %5968
  %5972 = fmul fast float %5971, %5966
  %5973 = fmul fast float %5965, %5965
  %5974 = fmul fast float %5965, 2.000000e+00
  %5975 = fsub fast float %5967, %5974
  %5976 = fmul fast float %5975, %5967
  %5977 = fadd fast float %5976, %5973
  %5978 = fmul fast float %5964, %5964
  %5979 = fmul fast float %5978, %5960
  %5980 = fadd fast float %5964, %5962
  %5981 = fmul fast float %5980, 5.000000e-01
  %5982 = fsub fast float -5.000000e-01, %5981
  %5983 = fmul fast float %5982, %5966
  %5984 = fadd fast float %5983, %5979
  %5985 = fmul fast float %5984, %5961
  %5986 = fadd fast float %5977, %5985
  %5987 = fmul fast float %5972, 2.000000e+00
  %5988 = fmul fast float %5986, %5986
  %5989 = fmul fast float %5972, %5972
  %5990 = fadd fast float %5988, %5989
  %5991 = fdiv fast float %5987, %5990
  %5992 = fmul fast float %5986, %5991
  %5993 = fmul fast float %5972, %5991
  %5994 = fsub fast float 1.000000e+00, %5993
  %5995 = fmul fast float %5994, %5939
  %5996 = fmul fast float %5992, %5955
  %5997 = fmul fast float %5994, %5945
  %5998 = fmul fast float %5992, %5958
  %5999 = fadd fast float %5998, %5962
  %6000 = fadd fast float %5999, %5997
  %6001 = fmul fast float %6000, 2.000000e+00
  %6002 = fadd fast float %6001, 2.000000e+00
  %6003 = call float @dx.op.unary.f32(i32 25, float %6002)  ; Rsqrt(value)
  %6004 = fadd fast float %5960, %5996
  %6005 = fadd fast float %6004, %5995
  %6006 = fmul fast float %6005, %6003
  %6007 = call float @dx.op.unary.f32(i32 7, float %6006)  ; Saturate(value)
  %6008 = fmul fast float %6000, %6003
  %6009 = fadd fast float %6008, %6003
  %6010 = call float @dx.op.unary.f32(i32 7, float %6009)  ; Saturate(value)
  br label %6011

; <label>:6011                                    ; preds = %5932, %5930, %5908
  %6012 = phi float [ %5931, %5930 ], [ %6010, %5932 ], [ %5920, %5908 ]
  %6013 = phi float [ 1.000000e+00, %5930 ], [ %6007, %5932 ], [ %5917, %5908 ]
  %6014 = call float @dx.op.unary.f32(i32 6, float %5910)  ; FAbs(value)
  %6015 = fadd fast float %6014, 0x3EE4F8B580000000
  %6016 = call float @dx.op.unary.f32(i32 7, float %6015)  ; Saturate(value)
  %6017 = fmul fast float %214, 2.550000e+02
  %6018 = fadd fast float %6017, 5.000000e-01
  %6019 = fptoui float %6018 to i32
  %6020 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %6021 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %6020, i32 0, i32 5, i32 %6019, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %6022 = extractvalue %dx.types.ResRet.f32 %6021, 0
  %6023 = extractvalue %dx.types.ResRet.f32 %6021, 1
  %6024 = extractvalue %dx.types.ResRet.f32 %6021, 2
  %6025 = fadd fast float %217, 0xBFB99999A0000000
  %6026 = fmul fast float %6025, 1.000000e+01
  %6027 = call float @dx.op.unary.f32(i32 7, float %6026)  ; Saturate(value)
  %6028 = fmul fast float %6022, 2.000000e+00
  %6029 = fadd fast float %6028, -1.000000e+00
  %6030 = fmul fast float %6029, %6027
  %6031 = fadd fast float %6030, 1.000000e+00
  %6032 = fmul fast float %6023, 2.000000e+00
  %6033 = fadd fast float %6032, -1.000000e+00
  %6034 = fmul fast float %6033, %6027
  %6035 = fadd fast float %6034, 1.000000e+00
  %6036 = fmul fast float %6031, %4746
  %6037 = call float @dx.op.unary.f32(i32 7, float %6036)  ; Saturate(value)
  %6038 = call float @dx.op.binary.f32(i32 35, float %6037, float 0x3F947AE140000000)  ; FMax(a,b)
  %6039 = fmul fast float %6035, %4746
  %6040 = call float @dx.op.unary.f32(i32 7, float %6039)  ; Saturate(value)
  %6041 = fsub fast float %6040, %6038
  %6042 = fmul fast float %6041, %6024
  %6043 = fadd fast float %6042, %6038
  %6044 = fmul fast float %4746, 2.000000e+00
  %6045 = fmul fast float %6012, %6012
  %6046 = fmul fast float %6045, %6044
  %6047 = fadd fast float %6046, -5.000000e-01
  %6048 = fsub fast float 1.000000e+00, %6016
  %6049 = fmul fast float %6048, %6048
  %6050 = fmul fast float %6047, %6048
  %6051 = fmul fast float %6049, %6049
  %6052 = fmul fast float %6051, %6050
  %6053 = fadd fast float %6052, 1.000000e+00
  %6054 = fsub fast float 1.000000e+00, %4793
  %6055 = fmul fast float %6054, %6054
  %6056 = fmul fast float %6055, %6055
  %6057 = fmul fast float %6056, %6054
  %6058 = fmul fast float %6057, %6047
  %6059 = fadd fast float %6058, 1.000000e+00
  %6060 = fmul fast float %6059, 0x3FD45F3060000000
  %6061 = fmul fast float %6060, %6053
  %6062 = fmul fast float %4793, %4794
  %6063 = fmul fast float %6062, %249
  %6064 = fmul fast float %6063, %6061
  %6065 = fmul fast float %6062, %250
  %6066 = fmul fast float %6065, %6061
  %6067 = fmul fast float %6062, %251
  %6068 = fmul fast float %6067, %6061
  %6069 = fmul fast float %6043, %6043
  %6070 = fmul fast float %6069, %6069
  %6071 = fmul fast float %6038, %6038
  %6072 = fmul fast float %6071, %6071
  %6073 = fmul fast float %6040, %6040
  %6074 = fmul fast float %6073, %6073
  %6075 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %6075, label %6076, label %6083

; <label>:6076                                    ; preds = %6011
  %6077 = fmul fast float %4842, %4842
  %6078 = fmul fast float %6012, 0x400CCCCCC0000000
  %6079 = fadd fast float %6078, 0x3FD99999A0000000
  %6080 = fdiv fast float %6077, %6079
  %6081 = fadd fast float %6080, %6072
  %6082 = call float @dx.op.unary.f32(i32 7, float %6081)  ; Saturate(value)
  br label %6083

; <label>:6083                                    ; preds = %6076, %6011
  %6084 = phi float [ %6082, %6076 ], [ %6072, %6011 ]
  br i1 %5921, label %6085, label %6098

; <label>:6085                                    ; preds = %6083
  %6086 = fmul fast float %4840, 2.500000e-01
  %6087 = bitcast float %6084 to i32
  %6088 = ashr i32 %6087, 1
  %6089 = add nsw i32 %6088, 532487669
  %6090 = bitcast i32 %6089 to float
  %6091 = fmul fast float %6090, 3.000000e+00
  %6092 = fadd fast float %6091, %4840
  %6093 = fmul fast float %6086, %6092
  %6094 = fadd fast float %6012, 0x3F50624DE0000000
  %6095 = fdiv fast float %6093, %6094
  %6096 = fadd fast float %6095, %6084
  %6097 = fdiv fast float %6084, %6096
  br label %6098

; <label>:6098                                    ; preds = %6085, %6083
  %6099 = phi float [ %6096, %6085 ], [ %6084, %6083 ]
  %6100 = phi float [ %6097, %6085 ], [ 1.000000e+00, %6083 ]
  %6101 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %6101, label %6102, label %6121

; <label>:6102                                    ; preds = %6098
  %6103 = fsub fast float 0x3FF00068E0000000, %4776
  %6104 = fadd fast float %4776, 1.000000e+00
  %6105 = fdiv fast float %6103, %6104
  %6106 = call float @dx.op.unary.f32(i32 24, float %6105)  ; Sqrt(value)
  %6107 = fmul fast float %6106, 2.500000e-01
  %6108 = bitcast float %6099 to i32
  %6109 = ashr i32 %6108, 1
  %6110 = add nsw i32 %6109, 532487669
  %6111 = bitcast i32 %6110 to float
  %6112 = fmul fast float %6111, 3.000000e+00
  %6113 = fadd fast float %6106, %6112
  %6114 = fmul fast float %6107, %6113
  %6115 = fadd fast float %6012, 0x3F50624DE0000000
  %6116 = fdiv fast float %6114, %6115
  %6117 = fadd fast float %6116, %6099
  %6118 = fdiv fast float %6099, %6117
  %6119 = call float @dx.op.unary.f32(i32 24, float %6118)  ; Sqrt(value)
  %6120 = fmul fast float %6119, %6100
  br label %6121

; <label>:6121                                    ; preds = %6102, %6098
  %6122 = phi float [ %6120, %6102 ], [ %6100, %6098 ]
  br i1 %6075, label %6123, label %6130

; <label>:6123                                    ; preds = %6121
  %6124 = fmul fast float %4842, %4842
  %6125 = fmul fast float %6012, 0x400CCCCCC0000000
  %6126 = fadd fast float %6125, 0x3FD99999A0000000
  %6127 = fdiv fast float %6124, %6126
  %6128 = fadd fast float %6127, %6074
  %6129 = call float @dx.op.unary.f32(i32 7, float %6128)  ; Saturate(value)
  br label %6130

; <label>:6130                                    ; preds = %6123, %6121
  %6131 = phi float [ %6129, %6123 ], [ %6074, %6121 ]
  br i1 %5921, label %6132, label %6145

; <label>:6132                                    ; preds = %6130
  %6133 = fmul fast float %4840, 2.500000e-01
  %6134 = bitcast float %6131 to i32
  %6135 = ashr i32 %6134, 1
  %6136 = add nsw i32 %6135, 532487669
  %6137 = bitcast i32 %6136 to float
  %6138 = fmul fast float %6137, 3.000000e+00
  %6139 = fadd fast float %6138, %4840
  %6140 = fmul fast float %6133, %6139
  %6141 = fadd fast float %6012, 0x3F50624DE0000000
  %6142 = fdiv fast float %6140, %6141
  %6143 = fadd fast float %6142, %6131
  %6144 = fdiv fast float %6131, %6143
  br label %6145

; <label>:6145                                    ; preds = %6132, %6130
  %6146 = phi float [ %6143, %6132 ], [ %6131, %6130 ]
  %6147 = phi float [ %6144, %6132 ], [ 1.000000e+00, %6130 ]
  br i1 %6101, label %6148, label %6167

; <label>:6148                                    ; preds = %6145
  %6149 = fsub fast float 0x3FF00068E0000000, %4776
  %6150 = fadd fast float %4776, 1.000000e+00
  %6151 = fdiv fast float %6149, %6150
  %6152 = call float @dx.op.unary.f32(i32 24, float %6151)  ; Sqrt(value)
  %6153 = fmul fast float %6152, 2.500000e-01
  %6154 = bitcast float %6146 to i32
  %6155 = ashr i32 %6154, 1
  %6156 = add nsw i32 %6155, 532487669
  %6157 = bitcast i32 %6156 to float
  %6158 = fmul fast float %6157, 3.000000e+00
  %6159 = fadd fast float %6152, %6158
  %6160 = fmul fast float %6153, %6159
  %6161 = fadd fast float %6012, 0x3F50624DE0000000
  %6162 = fdiv fast float %6160, %6161
  %6163 = fadd fast float %6162, %6146
  %6164 = fdiv fast float %6146, %6163
  %6165 = call float @dx.op.unary.f32(i32 24, float %6164)  ; Sqrt(value)
  %6166 = fmul fast float %6165, %6147
  br label %6167

; <label>:6167                                    ; preds = %6148, %6145
  %6168 = phi float [ %6166, %6148 ], [ %6147, %6145 ]
  %6169 = fmul fast float %6131, %6013
  %6170 = fsub fast float %6169, %6013
  %6171 = fmul fast float %6170, %6013
  %6172 = fadd fast float %6171, 1.000000e+00
  %6173 = fmul fast float %6172, %6172
  %6174 = fmul fast float %6173, 0x400921FB60000000
  %6175 = fdiv fast float %6131, %6174
  %6176 = fmul fast float %6175, %6168
  %6177 = fmul fast float %6084, %6013
  %6178 = fsub fast float %6177, %6013
  %6179 = fmul fast float %6178, %6013
  %6180 = fadd fast float %6179, 1.000000e+00
  %6181 = fmul fast float %6180, %6180
  %6182 = fmul fast float %6181, 0x400921FB60000000
  %6183 = fdiv fast float %6084, %6182
  %6184 = fmul fast float %6183, %6122
  %6185 = fsub fast float %6176, %6184
  %6186 = fmul fast float %6185, %6024
  %6187 = fadd fast float %6186, %6184
  %6188 = call float @dx.op.unary.f32(i32 24, float %6070)  ; Sqrt(value)
  %6189 = fsub fast float 1.000000e+00, %6188
  %6190 = fmul fast float %6189, %6016
  %6191 = fadd fast float %6190, %6188
  %6192 = fmul fast float %6191, %4793
  %6193 = fmul fast float %6189, %4793
  %6194 = fadd fast float %6193, %6188
  %6195 = fmul fast float %6194, %6016
  %6196 = fadd fast float %6192, %6195
  %6197 = fdiv fast float 5.000000e-01, %6196
  %6198 = fsub fast float 1.000000e+00, %6012
  %6199 = fmul fast float %6198, %6198
  %6200 = fmul fast float %6199, %6199
  %6201 = fmul fast float %6200, %6198
  %6202 = fmul fast float %261, 5.000000e+01
  %6203 = call float @dx.op.unary.f32(i32 7, float %6202)  ; Saturate(value)
  %6204 = fmul fast float %6203, %6201
  %6205 = fsub fast float 1.000000e+00, %6201
  %6206 = fmul fast float %6205, %260
  %6207 = fmul fast float %6205, %261
  %6208 = fmul fast float %6205, %262
  %6209 = fadd fast float %6204, %6206
  %6210 = fadd fast float %6204, %6207
  %6211 = fadd fast float %6204, %6208
  %6212 = fmul fast float %6187, %6197
  %6213 = fmul fast float %6209, %6062
  %6214 = fmul fast float %6213, %6212
  %6215 = fmul fast float %6210, %6062
  %6216 = fmul fast float %6215, %6212
  %6217 = fmul fast float %6211, %6062
  %6218 = fmul fast float %6217, %6212
  br label %7087

; <label>:6219                                    ; preds = %4826
  %6220 = fcmp fast ogt float %4793, 0.000000e+00
  %6221 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6222 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %6220, label %6223, label %6424, !dx.controlflow.hints !119

; <label>:6223                                    ; preds = %6219
  %6224 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %6225 = fmul fast float %6222, 2.000000e+00
  %6226 = fadd fast float %6225, 2.000000e+00
  %6227 = call float @dx.op.unary.f32(i32 25, float %6226)  ; Rsqrt(value)
  %6228 = fadd fast float %6224, %6221
  %6229 = fmul fast float %6227, %6228
  %6230 = call float @dx.op.unary.f32(i32 7, float %6229)  ; Saturate(value)
  %6231 = fmul fast float %6227, %6222
  %6232 = fadd fast float %6231, %6227
  %6233 = call float @dx.op.unary.f32(i32 7, float %6232)  ; Saturate(value)
  %6234 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %6234, label %6235, label %6324

; <label>:6235                                    ; preds = %6223
  %6236 = fmul fast float %4840, %4840
  %6237 = fsub fast float 1.000000e+00, %6236
  %6238 = call float @dx.op.unary.f32(i32 24, float %6237)  ; Sqrt(value)
  %6239 = fmul fast float %6221, 2.000000e+00
  %6240 = fmul fast float %6239, %6224
  %6241 = fsub fast float %6240, %6222
  %6242 = fcmp fast ult float %6241, %6238
  br i1 %6242, label %6245, label %6243

; <label>:6243                                    ; preds = %6235
  %6244 = call float @dx.op.unary.f32(i32 6, float %6224)  ; FAbs(value)
  br label %6324

; <label>:6245                                    ; preds = %6235
  %6246 = fmul fast float %6241, %6241
  %6247 = fsub fast float 1.000000e+00, %6246
  %6248 = call float @dx.op.unary.f32(i32 25, float %6247)  ; Rsqrt(value)
  %6249 = fmul fast float %6248, %4840
  %6250 = fmul fast float %6241, %6221
  %6251 = fsub fast float %6224, %6250
  %6252 = fmul fast float %6249, %6251
  %6253 = fmul fast float %6224, %6224
  %6254 = fmul fast float %6253, 2.000000e+00
  %6255 = fadd fast float %6254, -1.000000e+00
  %6256 = fmul fast float %6241, %6222
  %6257 = fsub fast float %6255, %6256
  %6258 = fmul fast float %6249, %6257
  %6259 = fmul fast float %6221, %6221
  %6260 = fsub fast float 1.000000e+00, %6259
  %6261 = fsub fast float %6260, %6253
  %6262 = fmul fast float %6222, %6222
  %6263 = fsub fast float %6261, %6262
  %6264 = fmul fast float %6240, %6222
  %6265 = fadd fast float %6263, %6264
  %6266 = call float @dx.op.unary.f32(i32 7, float %6265)  ; Saturate(value)
  %6267 = call float @dx.op.unary.f32(i32 24, float %6266)  ; Sqrt(value)
  %6268 = fmul fast float %6267, %6249
  %6269 = fmul fast float %6224, 2.000000e+00
  %6270 = fmul fast float %6269, %6249
  %6271 = fmul fast float %6270, %6267
  %6272 = fmul fast float %6238, %6221
  %6273 = fadd fast float %6272, %6224
  %6274 = fadd fast float %6273, %6252
  %6275 = fmul fast float %6238, %6222
  %6276 = fadd fast float %6275, 1.000000e+00
  %6277 = fadd fast float %6276, %6258
  %6278 = fmul fast float %6268, %6277
  %6279 = fmul fast float %6274, %6277
  %6280 = fmul fast float %6271, %6274
  %6281 = fmul fast float %6278, 5.000000e-01
  %6282 = fmul fast float %6274, 2.500000e-01
  %6283 = fmul fast float %6282, %6271
  %6284 = fsub fast float %6283, %6281
  %6285 = fmul fast float %6284, %6279
  %6286 = fmul fast float %6278, %6278
  %6287 = fmul fast float %6278, 2.000000e+00
  %6288 = fsub fast float %6280, %6287
  %6289 = fmul fast float %6288, %6280
  %6290 = fadd fast float %6289, %6286
  %6291 = fmul fast float %6277, %6277
  %6292 = fmul fast float %6291, %6273
  %6293 = fadd fast float %6277, %6275
  %6294 = fmul fast float %6293, 5.000000e-01
  %6295 = fsub fast float -5.000000e-01, %6294
  %6296 = fmul fast float %6295, %6279
  %6297 = fadd fast float %6296, %6292
  %6298 = fmul fast float %6297, %6274
  %6299 = fadd fast float %6290, %6298
  %6300 = fmul fast float %6285, 2.000000e+00
  %6301 = fmul fast float %6299, %6299
  %6302 = fmul fast float %6285, %6285
  %6303 = fadd fast float %6301, %6302
  %6304 = fdiv fast float %6300, %6303
  %6305 = fmul fast float %6299, %6304
  %6306 = fmul fast float %6285, %6304
  %6307 = fsub fast float 1.000000e+00, %6306
  %6308 = fmul fast float %6307, %6252
  %6309 = fmul fast float %6305, %6268
  %6310 = fmul fast float %6307, %6258
  %6311 = fmul fast float %6305, %6271
  %6312 = fadd fast float %6311, %6275
  %6313 = fadd fast float %6312, %6310
  %6314 = fmul fast float %6313, 2.000000e+00
  %6315 = fadd fast float %6314, 2.000000e+00
  %6316 = call float @dx.op.unary.f32(i32 25, float %6315)  ; Rsqrt(value)
  %6317 = fadd fast float %6273, %6309
  %6318 = fadd fast float %6317, %6308
  %6319 = fmul fast float %6318, %6316
  %6320 = call float @dx.op.unary.f32(i32 7, float %6319)  ; Saturate(value)
  %6321 = fmul fast float %6313, %6316
  %6322 = fadd fast float %6321, %6316
  %6323 = call float @dx.op.unary.f32(i32 7, float %6322)  ; Saturate(value)
  br label %6324

; <label>:6324                                    ; preds = %6245, %6243, %6223
  %6325 = phi float [ %6244, %6243 ], [ %6323, %6245 ], [ %6233, %6223 ]
  %6326 = phi float [ 1.000000e+00, %6243 ], [ %6320, %6245 ], [ %6230, %6223 ]
  %6327 = call float @dx.op.unary.f32(i32 6, float %6224)  ; FAbs(value)
  %6328 = fadd fast float %6327, 0x3EE4F8B580000000
  %6329 = call float @dx.op.unary.f32(i32 7, float %6328)  ; Saturate(value)
  %6330 = fmul fast float %249, 0x3FD45F3060000000
  %6331 = fmul fast float %250, 0x3FD45F3060000000
  %6332 = fmul fast float %251, 0x3FD45F3060000000
  %6333 = fmul fast float %4793, %4794
  %6334 = fmul fast float %6330, %6333
  %6335 = fmul fast float %6331, %6333
  %6336 = fmul fast float %6332, %6333
  %6337 = fmul fast float %4746, %4746
  %6338 = fmul fast float %6337, %6337
  %6339 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %6339, label %6340, label %6347

; <label>:6340                                    ; preds = %6324
  %6341 = fmul fast float %4842, %4842
  %6342 = fmul fast float %6325, 0x400CCCCCC0000000
  %6343 = fadd fast float %6342, 0x3FD99999A0000000
  %6344 = fdiv fast float %6341, %6343
  %6345 = fadd fast float %6344, %6338
  %6346 = call float @dx.op.unary.f32(i32 7, float %6345)  ; Saturate(value)
  br label %6347

; <label>:6347                                    ; preds = %6340, %6324
  %6348 = phi float [ %6346, %6340 ], [ %6338, %6324 ]
  br i1 %6234, label %6349, label %6362

; <label>:6349                                    ; preds = %6347
  %6350 = fmul fast float %4840, 2.500000e-01
  %6351 = bitcast float %6348 to i32
  %6352 = ashr i32 %6351, 1
  %6353 = add nsw i32 %6352, 532487669
  %6354 = bitcast i32 %6353 to float
  %6355 = fmul fast float %6354, 3.000000e+00
  %6356 = fadd fast float %6355, %4840
  %6357 = fmul fast float %6350, %6356
  %6358 = fadd fast float %6325, 0x3F50624DE0000000
  %6359 = fdiv fast float %6357, %6358
  %6360 = fadd fast float %6359, %6348
  %6361 = fdiv fast float %6348, %6360
  br label %6362

; <label>:6362                                    ; preds = %6349, %6347
  %6363 = phi float [ %6360, %6349 ], [ %6348, %6347 ]
  %6364 = phi float [ %6361, %6349 ], [ 1.000000e+00, %6347 ]
  %6365 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %6365, label %6366, label %6385

; <label>:6366                                    ; preds = %6362
  %6367 = fsub fast float 0x3FF00068E0000000, %4776
  %6368 = fadd fast float %4776, 1.000000e+00
  %6369 = fdiv fast float %6367, %6368
  %6370 = call float @dx.op.unary.f32(i32 24, float %6369)  ; Sqrt(value)
  %6371 = fmul fast float %6370, 2.500000e-01
  %6372 = bitcast float %6363 to i32
  %6373 = ashr i32 %6372, 1
  %6374 = add nsw i32 %6373, 532487669
  %6375 = bitcast i32 %6374 to float
  %6376 = fmul fast float %6375, 3.000000e+00
  %6377 = fadd fast float %6370, %6376
  %6378 = fmul fast float %6371, %6377
  %6379 = fadd fast float %6325, 0x3F50624DE0000000
  %6380 = fdiv fast float %6378, %6379
  %6381 = fadd fast float %6380, %6363
  %6382 = fdiv fast float %6363, %6381
  %6383 = call float @dx.op.unary.f32(i32 24, float %6382)  ; Sqrt(value)
  %6384 = fmul fast float %6383, %6364
  br label %6385

; <label>:6385                                    ; preds = %6366, %6362
  %6386 = phi float [ %6384, %6366 ], [ %6364, %6362 ]
  %6387 = fmul fast float %6348, %6326
  %6388 = fsub fast float %6387, %6326
  %6389 = fmul fast float %6388, %6326
  %6390 = fadd fast float %6389, 1.000000e+00
  %6391 = fmul fast float %6390, %6390
  %6392 = fmul fast float %6391, 0x400921FB60000000
  %6393 = fdiv fast float %6348, %6392
  %6394 = fmul fast float %6393, %6386
  %6395 = call float @dx.op.unary.f32(i32 24, float %6348)  ; Sqrt(value)
  %6396 = fsub fast float 1.000000e+00, %6395
  %6397 = fmul fast float %6396, %6329
  %6398 = fadd fast float %6397, %6395
  %6399 = fmul fast float %6398, %4793
  %6400 = fmul fast float %6396, %4793
  %6401 = fadd fast float %6400, %6395
  %6402 = fmul fast float %6401, %6329
  %6403 = fadd fast float %6399, %6402
  %6404 = fdiv fast float 5.000000e-01, %6403
  %6405 = fsub fast float 1.000000e+00, %6325
  %6406 = fmul fast float %6405, %6405
  %6407 = fmul fast float %6406, %6406
  %6408 = fmul fast float %6407, %6405
  %6409 = fmul fast float %261, 5.000000e+01
  %6410 = call float @dx.op.unary.f32(i32 7, float %6409)  ; Saturate(value)
  %6411 = fmul fast float %6410, %6408
  %6412 = fsub fast float 1.000000e+00, %6408
  %6413 = fmul fast float %6412, %260
  %6414 = fmul fast float %6412, %261
  %6415 = fmul fast float %6412, %262
  %6416 = fadd fast float %6411, %6413
  %6417 = fadd fast float %6411, %6414
  %6418 = fadd fast float %6411, %6415
  %6419 = fmul fast float %6394, %6404
  %6420 = fmul fast float %6419, %6333
  %6421 = fmul fast float %6420, %6416
  %6422 = fmul fast float %6420, %6417
  %6423 = fmul fast float %6420, %6418
  br label %6424

; <label>:6424                                    ; preds = %6385, %6219
  %6425 = phi float [ %6421, %6385 ], [ 0.000000e+00, %6219 ]
  %6426 = phi float [ %6422, %6385 ], [ 0.000000e+00, %6219 ]
  %6427 = phi float [ %6423, %6385 ], [ 0.000000e+00, %6219 ]
  %6428 = phi float [ %6334, %6385 ], [ 0.000000e+00, %6219 ]
  %6429 = phi float [ %6335, %6385 ], [ 0.000000e+00, %6219 ]
  %6430 = phi float [ %6336, %6385 ], [ 0.000000e+00, %6219 ]
  %6431 = fmul fast float %214, %214
  %6432 = fmul fast float %215, %215
  %6433 = fmul fast float %216, %216
  %6434 = fsub fast float 5.000000e-01, %6221
  %6435 = fmul fast float %6434, 0x3FDC71C720000000
  %6436 = call float @dx.op.unary.f32(i32 7, float %6435)  ; Saturate(value)
  %6437 = fsub fast float -0.000000e+00, %6222
  %6438 = call float @dx.op.unary.f32(i32 7, float %6437)  ; Saturate(value)
  %6439 = fmul fast float %6438, %6438
  %6440 = fmul fast float %6439, 0x3FE47AE140000000
  %6441 = fsub fast float 1.000000e+00, %6440
  %6442 = fmul fast float %6439, 0x400015BFA0000000
  %6443 = fsub fast float 0x400921FB60000000, %6442
  %6444 = fmul fast float %6443, %6441
  %6445 = fdiv fast float 0x3FD70A3D80000000, %6444
  %6446 = fmul fast float %6436, %4794
  %6447 = fmul fast float %6446, %6445
  %6448 = fmul fast float %6431, %6447
  %6449 = fmul fast float %6432, %6447
  %6450 = fmul fast float %6433, %6447
  br label %7087

; <label>:6451                                    ; preds = %4826
  %6452 = call float @dx.op.binary.f32(i32 35, float %4746, float 0x3F70101020000000)  ; FMax(a,b)
  %6453 = call float @dx.op.binary.f32(i32 36, float %6452, float 1.000000e+00)  ; FMin(a,b)
  %6454 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6455 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6456 = call float @dx.op.binary.f32(i32 35, float %6455, float -1.000000e+00)  ; FMax(a,b)
  %6457 = call float @dx.op.binary.f32(i32 36, float %6456, float 1.000000e+00)  ; FMin(a,b)
  %6458 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %6459 = call float @dx.op.binary.f32(i32 35, float %6458, float -1.000000e+00)  ; FMax(a,b)
  %6460 = call float @dx.op.binary.f32(i32 36, float %6459, float 1.000000e+00)  ; FMin(a,b)
  %6461 = call float @dx.op.unary.f32(i32 6, float %6460)  ; FAbs(value)
  %6462 = fmul fast float %6461, 0x3FC40AE960000000
  %6463 = fsub fast float 0x3FF921FB60000000, %6462
  %6464 = fsub fast float 1.000000e+00, %6461
  %6465 = call float @dx.op.unary.f32(i32 24, float %6464)  ; Sqrt(value)
  %6466 = fmul fast float %6463, %6465
  %6467 = fcmp fast oge float %6460, 0.000000e+00
  %6468 = fsub fast float 0x400921FB60000000, %6466
  %6469 = select i1 %6467, float %6466, float %6468
  %6470 = call float @dx.op.unary.f32(i32 6, float %6457)  ; FAbs(value)
  %6471 = fmul fast float %6470, 0x3FC40AE960000000
  %6472 = fsub fast float 0x3FF921FB60000000, %6471
  %6473 = fsub fast float 1.000000e+00, %6470
  %6474 = call float @dx.op.unary.f32(i32 24, float %6473)  ; Sqrt(value)
  %6475 = fmul fast float %6472, %6474
  %6476 = fcmp fast oge float %6457, 0.000000e+00
  %6477 = fsub fast float 0x400921FB60000000, %6475
  %6478 = select i1 %6476, float %6475, float %6477
  %6479 = fsub fast float %6478, %6469
  %6480 = call float @dx.op.unary.f32(i32 6, float %6479)  ; FAbs(value)
  %6481 = fmul fast float %6480, 5.000000e-01
  %6482 = call float @dx.op.unary.f32(i32 12, float %6481)  ; Cos(value)
  %6483 = fmul fast float %6457, %220
  %6484 = fmul fast float %6457, %221
  %6485 = fmul fast float %6457, %222
  %6486 = fsub fast float %4832, %6483
  %6487 = fsub fast float %4833, %6484
  %6488 = fsub fast float %4834, %6485
  %6489 = fmul fast float %6460, %220
  %6490 = fmul fast float %6460, %221
  %6491 = fmul fast float %6460, %222
  %6492 = fsub fast float %4690, %6489
  %6493 = fsub fast float %4691, %6490
  %6494 = fsub fast float %4692, %6491
  %6495 = call float @dx.op.dot3.f32(i32 55, float %6486, float %6487, float %6488, float %6492, float %6493, float %6494)  ; Dot3(ax,ay,az,bx,by,bz)
  %6496 = call float @dx.op.dot3.f32(i32 55, float %6486, float %6487, float %6488, float %6486, float %6487, float %6488)  ; Dot3(ax,ay,az,bx,by,bz)
  %6497 = call float @dx.op.dot3.f32(i32 55, float %6492, float %6493, float %6494, float %6492, float %6493, float %6494)  ; Dot3(ax,ay,az,bx,by,bz)
  %6498 = fmul fast float %6497, %6496
  %6499 = fadd fast float %6498, 0x3F1A36E2E0000000
  %6500 = call float @dx.op.unary.f32(i32 25, float %6499)  ; Rsqrt(value)
  %6501 = fmul fast float %6500, %6495
  %6502 = fmul fast float %6501, 5.000000e-01
  %6503 = fadd fast float %6502, 5.000000e-01
  %6504 = call float @dx.op.unary.f32(i32 7, float %6503)  ; Saturate(value)
  %6505 = call float @dx.op.unary.f32(i32 24, float %6504)  ; Sqrt(value)
  %6506 = fmul fast float %6453, %6453
  %6507 = fmul fast float %6506, 2.000000e+00
  %6508 = fmul fast float %6505, 0x3FEFEBF020000000
  %6509 = fmul fast float %6460, %6460
  %6510 = fsub fast float 1.000000e+00, %6509
  %6511 = call float @dx.op.unary.f32(i32 24, float %6510)  ; Sqrt(value)
  %6512 = fmul fast float %6508, %6511
  %6513 = fmul fast float %6460, 0x3FB1E7C640000000
  %6514 = fsub fast float %6512, %6513
  %6515 = fmul fast float %6514, 0x3FC1E7C640000000
  %6516 = fadd fast float %6460, %6457
  %6517 = fadd fast float %6516, %6515
  %6518 = fmul fast float %6506, 0x3FF6A09E60000000
  %6519 = fmul fast float %6518, %6505
  %6520 = call float @dx.op.binary.f32(i32 35, float %6519, float 0x3F847AE140000000)  ; FMax(a,b)
  %6521 = fmul fast float %6517, %6517
  %6522 = fmul fast float %6521, -5.000000e-01
  %6523 = fmul fast float %6519, %6519
  %6524 = fdiv fast float %6522, %6523
  %6525 = fmul fast float %6524, 0x3FF7154760000000
  %6526 = call float @dx.op.unary.f32(i32 21, float %6525)  ; Exp(value)
  %6527 = fmul fast float %6520, 0x40040D9320000000
  %6528 = fdiv fast float %6526, %6527
  %6529 = fmul fast float %6454, 5.000000e-01
  %6530 = fadd fast float %6529, 5.000000e-01
  %6531 = call float @dx.op.unary.f32(i32 7, float %6530)  ; Saturate(value)
  %6532 = call float @dx.op.unary.f32(i32 24, float %6531)  ; Sqrt(value)
  %6533 = fsub fast float 1.000000e+00, %6532
  %6534 = fmul fast float %6533, %6533
  %6535 = fmul fast float %6533, 0x3FEE82E740000000
  %6536 = fmul fast float %6534, %6534
  %6537 = fmul fast float %6536, %6535
  %6538 = fadd fast float %6537, 0x3FA7D18B20000000
  %6539 = fsub fast float -0.000000e+00, %6454
  %6540 = call float @dx.op.unary.f32(i32 7, float %6539)  ; Saturate(value)
  %6541 = fsub fast float 1.000000e+00, %6540
  %6542 = fmul fast float %182, 5.000000e-01
  %6543 = fmul fast float %6542, %6505
  %6544 = fmul fast float %6543, %6528
  %6545 = fmul fast float %6544, %6541
  %6546 = fmul fast float %6545, %6538
  %6547 = fadd fast float %6457, 0xBFC1EB8520000000
  %6548 = fadd fast float %6547, %6460
  %6549 = call float @dx.op.binary.f32(i32 35, float %6507, float 0x3F847AE140000000)  ; FMax(a,b)
  %6550 = fmul fast float %6548, %6548
  %6551 = fmul fast float %6550, -5.000000e-01
  %6552 = fmul fast float %6507, %6507
  %6553 = fdiv fast float %6551, %6552
  %6554 = fmul fast float %6553, 0x3FF7154760000000
  %6555 = call float @dx.op.unary.f32(i32 21, float %6554)  ; Exp(value)
  %6556 = fmul fast float %6549, 0x40040D9320000000
  %6557 = fdiv fast float %6555, %6556
  %6558 = fmul fast float %6482, 5.000000e-01
  %6559 = fsub fast float 1.000000e+00, %6558
  %6560 = fmul fast float %6559, %6559
  %6561 = fmul fast float %6482, 0x3FDE82E740000000
  %6562 = fsub fast float 0x3FEE82E740000000, %6561
  %6563 = fmul fast float %6560, %6560
  %6564 = fmul fast float %6563, %6562
  %6565 = fadd fast float %6564, 0x3FA7D18B20000000
  %6566 = fsub fast float 0x3FEE82E740000000, %6564
  %6567 = fdiv fast float 0x3FE99999A0000000, %6482
  %6568 = call float @dx.op.unary.f32(i32 6, float %187)  ; FAbs(value)
  %6569 = call float @dx.op.unary.f32(i32 6, float %188)  ; FAbs(value)
  %6570 = call float @dx.op.unary.f32(i32 6, float %189)  ; FAbs(value)
  %6571 = call float @dx.op.unary.f32(i32 23, float %6568)  ; Log(value)
  %6572 = call float @dx.op.unary.f32(i32 23, float %6569)  ; Log(value)
  %6573 = call float @dx.op.unary.f32(i32 23, float %6570)  ; Log(value)
  %6574 = fmul fast float %6571, %6567
  %6575 = fmul fast float %6572, %6567
  %6576 = fmul fast float %6573, %6567
  %6577 = call float @dx.op.unary.f32(i32 21, float %6574)  ; Exp(value)
  %6578 = call float @dx.op.unary.f32(i32 21, float %6575)  ; Exp(value)
  %6579 = call float @dx.op.unary.f32(i32 21, float %6576)  ; Exp(value)
  %6580 = fmul fast float %6501, 0x4038869BE0000000
  %6581 = fadd fast float %6580, 0xC038355B40000000
  %6582 = call float @dx.op.unary.f32(i32 21, float %6581)  ; Exp(value)
  %6583 = fmul fast float %6566, %6566
  %6584 = fmul fast float %6583, %6565
  %6585 = fmul fast float %6584, %6557
  %6586 = fmul fast float %6585, %6582
  %6587 = fmul fast float %6586, %6577
  %6588 = fmul fast float %6586, %6578
  %6589 = fmul fast float %6586, %6579
  %6590 = fadd fast float %6546, %6587
  %6591 = fadd fast float %6546, %6588
  %6592 = fadd fast float %6546, %6589
  %6593 = call float @dx.op.unary.f32(i32 6, float %6455)  ; FAbs(value)
  %6594 = fsub fast float 1.000000e+00, %6593
  %6595 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %220, float %221, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %6596 = fmul fast float %6595, %220
  %6597 = fmul fast float %6595, %221
  %6598 = fmul fast float %6595, %222
  %6599 = fsub fast float %4690, %6596
  %6600 = fsub fast float %4691, %6597
  %6601 = fsub fast float %4692, %6598
  %6602 = call float @dx.op.dot3.f32(i32 55, float %6599, float %6600, float %6601, float %6599, float %6600, float %6601)  ; Dot3(ax,ay,az,bx,by,bz)
  %6603 = call float @dx.op.unary.f32(i32 25, float %6602)  ; Rsqrt(value)
  %6604 = fmul fast float %6599, %6603
  %6605 = fmul fast float %6600, %6603
  %6606 = fmul fast float %6601, %6603
  %6607 = call float @dx.op.dot3.f32(i32 55, float %6604, float %6605, float %6606, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6608 = fadd fast float %6607, 1.000000e+00
  %6609 = fmul fast float %6608, 2.500000e-01
  %6610 = call float @dx.op.unary.f32(i32 7, float %6609)  ; Saturate(value)
  %6611 = fsub fast float %6594, %6610
  %6612 = fmul fast float %6611, 0x3FD51EB860000000
  %6613 = fadd fast float %6612, %6610
  %6614 = fmul fast float %224, 0x3FD45F3060000000
  %6615 = fmul fast float %6614, %6613
  %6616 = call float @dx.op.unary.f32(i32 24, float %6568)  ; Sqrt(value)
  %6617 = call float @dx.op.unary.f32(i32 24, float %6569)  ; Sqrt(value)
  %6618 = call float @dx.op.unary.f32(i32 24, float %6570)  ; Sqrt(value)
  %6619 = fmul fast float %6615, %6616
  %6620 = fmul fast float %6617, %6615
  %6621 = fmul fast float %6618, %6615
  %6622 = fadd fast float %6590, %6619
  %6623 = fadd fast float %6591, %6620
  %6624 = fadd fast float %6592, %6621
  %6625 = fsub fast float -0.000000e+00, %6622
  %6626 = fsub fast float -0.000000e+00, %6623
  %6627 = fsub fast float -0.000000e+00, %6624
  %6628 = call float @dx.op.binary.f32(i32 36, float %6625, float 0.000000e+00)  ; FMin(a,b)
  %6629 = call float @dx.op.binary.f32(i32 36, float %6626, float 0.000000e+00)  ; FMin(a,b)
  %6630 = call float @dx.op.binary.f32(i32 36, float %6627, float 0.000000e+00)  ; FMin(a,b)
  %6631 = fmul fast float %4794, %6628
  %6632 = fsub fast float -0.000000e+00, %6631
  %6633 = fmul fast float %4794, %6629
  %6634 = fsub fast float -0.000000e+00, %6633
  %6635 = fmul fast float %4794, %6630
  %6636 = fsub fast float -0.000000e+00, %6635
  br label %7087

; <label>:6637                                    ; preds = %4826
  %6638 = fmul fast float %214, %214
  %6639 = fmul fast float %215, %215
  %6640 = fmul fast float %216, %216
  %6641 = call float @dx.op.unary.f32(i32 7, float %217)  ; Saturate(value)
  %6642 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6643 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %6644 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6645 = fmul fast float %6644, 2.000000e+00
  %6646 = fadd fast float %6645, 2.000000e+00
  %6647 = call float @dx.op.unary.f32(i32 25, float %6646)  ; Rsqrt(value)
  %6648 = fadd fast float %6643, %6642
  %6649 = fmul fast float %6647, %6648
  %6650 = call float @dx.op.unary.f32(i32 7, float %6649)  ; Saturate(value)
  %6651 = fmul fast float %6647, %6644
  %6652 = fadd fast float %6651, %6647
  %6653 = call float @dx.op.unary.f32(i32 7, float %6652)  ; Saturate(value)
  %6654 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %6654, label %6655, label %6744

; <label>:6655                                    ; preds = %6637
  %6656 = fmul fast float %4840, %4840
  %6657 = fsub fast float 1.000000e+00, %6656
  %6658 = call float @dx.op.unary.f32(i32 24, float %6657)  ; Sqrt(value)
  %6659 = fmul fast float %6642, 2.000000e+00
  %6660 = fmul fast float %6659, %6643
  %6661 = fsub fast float %6660, %6644
  %6662 = fcmp fast ult float %6661, %6658
  br i1 %6662, label %6665, label %6663

; <label>:6663                                    ; preds = %6655
  %6664 = call float @dx.op.unary.f32(i32 6, float %6643)  ; FAbs(value)
  br label %6744

; <label>:6665                                    ; preds = %6655
  %6666 = fmul fast float %6661, %6661
  %6667 = fsub fast float 1.000000e+00, %6666
  %6668 = call float @dx.op.unary.f32(i32 25, float %6667)  ; Rsqrt(value)
  %6669 = fmul fast float %6668, %4840
  %6670 = fmul fast float %6661, %6642
  %6671 = fsub fast float %6643, %6670
  %6672 = fmul fast float %6669, %6671
  %6673 = fmul fast float %6643, %6643
  %6674 = fmul fast float %6673, 2.000000e+00
  %6675 = fadd fast float %6674, -1.000000e+00
  %6676 = fmul fast float %6661, %6644
  %6677 = fsub fast float %6675, %6676
  %6678 = fmul fast float %6669, %6677
  %6679 = fmul fast float %6642, %6642
  %6680 = fsub fast float 1.000000e+00, %6679
  %6681 = fsub fast float %6680, %6673
  %6682 = fmul fast float %6644, %6644
  %6683 = fsub fast float %6681, %6682
  %6684 = fmul fast float %6660, %6644
  %6685 = fadd fast float %6683, %6684
  %6686 = call float @dx.op.unary.f32(i32 7, float %6685)  ; Saturate(value)
  %6687 = call float @dx.op.unary.f32(i32 24, float %6686)  ; Sqrt(value)
  %6688 = fmul fast float %6687, %6669
  %6689 = fmul fast float %6643, 2.000000e+00
  %6690 = fmul fast float %6689, %6669
  %6691 = fmul fast float %6690, %6687
  %6692 = fmul fast float %6658, %6642
  %6693 = fadd fast float %6692, %6643
  %6694 = fadd fast float %6693, %6672
  %6695 = fmul fast float %6658, %6644
  %6696 = fadd fast float %6695, 1.000000e+00
  %6697 = fadd fast float %6696, %6678
  %6698 = fmul fast float %6688, %6697
  %6699 = fmul fast float %6694, %6697
  %6700 = fmul fast float %6691, %6694
  %6701 = fmul fast float %6698, 5.000000e-01
  %6702 = fmul fast float %6694, 2.500000e-01
  %6703 = fmul fast float %6702, %6691
  %6704 = fsub fast float %6703, %6701
  %6705 = fmul fast float %6704, %6699
  %6706 = fmul fast float %6698, %6698
  %6707 = fmul fast float %6698, 2.000000e+00
  %6708 = fsub fast float %6700, %6707
  %6709 = fmul fast float %6708, %6700
  %6710 = fadd fast float %6709, %6706
  %6711 = fmul fast float %6697, %6697
  %6712 = fmul fast float %6711, %6693
  %6713 = fadd fast float %6697, %6695
  %6714 = fmul fast float %6713, 5.000000e-01
  %6715 = fsub fast float -5.000000e-01, %6714
  %6716 = fmul fast float %6715, %6699
  %6717 = fadd fast float %6716, %6712
  %6718 = fmul fast float %6717, %6694
  %6719 = fadd fast float %6710, %6718
  %6720 = fmul fast float %6705, 2.000000e+00
  %6721 = fmul fast float %6719, %6719
  %6722 = fmul fast float %6705, %6705
  %6723 = fadd fast float %6721, %6722
  %6724 = fdiv fast float %6720, %6723
  %6725 = fmul fast float %6719, %6724
  %6726 = fmul fast float %6705, %6724
  %6727 = fsub fast float 1.000000e+00, %6726
  %6728 = fmul fast float %6727, %6672
  %6729 = fmul fast float %6725, %6688
  %6730 = fmul fast float %6727, %6678
  %6731 = fmul fast float %6725, %6691
  %6732 = fadd fast float %6731, %6695
  %6733 = fadd fast float %6732, %6730
  %6734 = fmul fast float %6733, 2.000000e+00
  %6735 = fadd fast float %6734, 2.000000e+00
  %6736 = call float @dx.op.unary.f32(i32 25, float %6735)  ; Rsqrt(value)
  %6737 = fadd fast float %6693, %6729
  %6738 = fadd fast float %6737, %6728
  %6739 = fmul fast float %6738, %6736
  %6740 = call float @dx.op.unary.f32(i32 7, float %6739)  ; Saturate(value)
  %6741 = fmul fast float %6733, %6736
  %6742 = fadd fast float %6741, %6736
  %6743 = call float @dx.op.unary.f32(i32 7, float %6742)  ; Saturate(value)
  br label %6744

; <label>:6744                                    ; preds = %6665, %6663, %6637
  %6745 = phi float [ %6664, %6663 ], [ %6743, %6665 ], [ %6653, %6637 ]
  %6746 = phi float [ 1.000000e+00, %6663 ], [ %6740, %6665 ], [ %6650, %6637 ]
  %6747 = call float @dx.op.unary.f32(i32 6, float %6643)  ; FAbs(value)
  %6748 = fadd fast float %6747, 0x3EE4F8B580000000
  %6749 = call float @dx.op.unary.f32(i32 7, float %6748)  ; Saturate(value)
  %6750 = fmul fast float %4793, %4794
  %6751 = fmul fast float %4746, %4746
  %6752 = fmul fast float %6751, %6751
  %6753 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %6753, label %6754, label %6761

; <label>:6754                                    ; preds = %6744
  %6755 = fmul fast float %4842, %4842
  %6756 = fmul fast float %6745, 0x400CCCCCC0000000
  %6757 = fadd fast float %6756, 0x3FD99999A0000000
  %6758 = fdiv fast float %6755, %6757
  %6759 = fadd fast float %6758, %6752
  %6760 = call float @dx.op.unary.f32(i32 7, float %6759)  ; Saturate(value)
  br label %6761

; <label>:6761                                    ; preds = %6754, %6744
  %6762 = phi float [ %6760, %6754 ], [ %6752, %6744 ]
  br i1 %6654, label %6763, label %6776

; <label>:6763                                    ; preds = %6761
  %6764 = fmul fast float %4840, 2.500000e-01
  %6765 = bitcast float %6762 to i32
  %6766 = ashr i32 %6765, 1
  %6767 = add nsw i32 %6766, 532487669
  %6768 = bitcast i32 %6767 to float
  %6769 = fmul fast float %6768, 3.000000e+00
  %6770 = fadd fast float %6769, %4840
  %6771 = fmul fast float %6764, %6770
  %6772 = fadd fast float %6745, 0x3F50624DE0000000
  %6773 = fdiv fast float %6771, %6772
  %6774 = fadd fast float %6773, %6762
  %6775 = fdiv fast float %6762, %6774
  br label %6776

; <label>:6776                                    ; preds = %6763, %6761
  %6777 = phi float [ %6774, %6763 ], [ %6762, %6761 ]
  %6778 = phi float [ %6775, %6763 ], [ 1.000000e+00, %6761 ]
  %6779 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %6779, label %6780, label %6799

; <label>:6780                                    ; preds = %6776
  %6781 = fsub fast float 0x3FF00068E0000000, %4776
  %6782 = fadd fast float %4776, 1.000000e+00
  %6783 = fdiv fast float %6781, %6782
  %6784 = call float @dx.op.unary.f32(i32 24, float %6783)  ; Sqrt(value)
  %6785 = fmul fast float %6784, 2.500000e-01
  %6786 = bitcast float %6777 to i32
  %6787 = ashr i32 %6786, 1
  %6788 = add nsw i32 %6787, 532487669
  %6789 = bitcast i32 %6788 to float
  %6790 = fmul fast float %6789, 3.000000e+00
  %6791 = fadd fast float %6784, %6790
  %6792 = fmul fast float %6785, %6791
  %6793 = fadd fast float %6745, 0x3F50624DE0000000
  %6794 = fdiv fast float %6792, %6793
  %6795 = fadd fast float %6794, %6777
  %6796 = fdiv fast float %6777, %6795
  %6797 = call float @dx.op.unary.f32(i32 24, float %6796)  ; Sqrt(value)
  %6798 = fmul fast float %6797, %6778
  br label %6799

; <label>:6799                                    ; preds = %6780, %6776
  %6800 = phi float [ %6798, %6780 ], [ %6778, %6776 ]
  %6801 = fmul fast float %6762, %6746
  %6802 = fsub fast float %6801, %6746
  %6803 = fmul fast float %6802, %6746
  %6804 = fadd fast float %6803, 1.000000e+00
  %6805 = fmul fast float %6804, %6804
  %6806 = fmul fast float %6805, 0x400921FB60000000
  %6807 = fdiv fast float %6762, %6806
  %6808 = fmul fast float %6807, %6800
  %6809 = call float @dx.op.unary.f32(i32 24, float %6762)  ; Sqrt(value)
  %6810 = fsub fast float 1.000000e+00, %6809
  %6811 = fmul fast float %6810, %6749
  %6812 = fadd fast float %6811, %6809
  %6813 = fmul fast float %6812, %4793
  %6814 = fmul fast float %6810, %4793
  %6815 = fadd fast float %6814, %6809
  %6816 = fmul fast float %6815, %6749
  %6817 = fadd fast float %6813, %6816
  %6818 = fdiv fast float 5.000000e-01, %6817
  %6819 = fsub fast float 1.000000e+00, %6745
  %6820 = fmul fast float %6819, %6819
  %6821 = fmul fast float %6820, %6820
  %6822 = fmul fast float %6821, %6819
  %6823 = fmul fast float %261, 5.000000e+01
  %6824 = call float @dx.op.unary.f32(i32 7, float %6823)  ; Saturate(value)
  %6825 = fmul fast float %6824, %6822
  %6826 = fsub fast float 1.000000e+00, %6822
  %6827 = fmul fast float %6826, %260
  %6828 = fmul fast float %6826, %261
  %6829 = fmul fast float %6826, %262
  %6830 = fadd fast float %6825, %6827
  %6831 = fadd fast float %6825, %6828
  %6832 = fadd fast float %6825, %6829
  %6833 = fmul fast float %6808, %6818
  %6834 = fmul fast float %6833, %6750
  %6835 = fmul fast float %6834, %6830
  %6836 = fmul fast float %6834, %6831
  %6837 = fmul fast float %6834, %6832
  %6838 = fmul fast float %6746, %6752
  %6839 = fsub fast float %6746, %6838
  %6840 = fmul fast float %6839, %6746
  %6841 = fadd fast float %6840, %6752
  %6842 = fmul fast float %6752, 0x402921FB60000000
  %6843 = fadd fast float %6842, 0x400921FB60000000
  %6844 = fdiv fast float 1.000000e+00, %6843
  %6845 = fmul fast float %6752, %6752
  %6846 = fmul fast float %6845, 4.000000e+00
  %6847 = fmul fast float %6841, %6841
  %6848 = fdiv fast float %6846, %6847
  %6849 = fadd fast float %6848, 1.000000e+00
  %6850 = fmul fast float %6849, %6844
  %6851 = fadd fast float %6749, %4793
  %6852 = fmul fast float %6749, %4793
  %6853 = fsub fast float %6851, %6852
  %6854 = fdiv fast float 2.500000e-01, %6853
  %6855 = fmul fast float %6639, 5.000000e+01
  %6856 = call float @dx.op.unary.f32(i32 7, float %6855)  ; Saturate(value)
  %6857 = fmul fast float %6856, %6822
  %6858 = fmul fast float %6638, %6826
  %6859 = fmul fast float %6826, %6639
  %6860 = fmul fast float %6640, %6826
  %6861 = fadd fast float %6857, %6858
  %6862 = fadd fast float %6857, %6859
  %6863 = fadd fast float %6857, %6860
  %6864 = fmul fast float %6850, %6854
  %6865 = fmul fast float %6864, %6750
  %6866 = fmul fast float %6865, %6861
  %6867 = fmul fast float %6865, %6862
  %6868 = fmul fast float %6865, %6863
  %6869 = fmul fast float %249, 0x3FD45F3060000000
  %6870 = fmul fast float %250, 0x3FD45F3060000000
  %6871 = fmul fast float %251, 0x3FD45F3060000000
  %6872 = fmul fast float %6869, %6750
  %6873 = fmul fast float %6870, %6750
  %6874 = fmul fast float %6871, %6750
  %6875 = fsub fast float %6866, %6835
  %6876 = fsub fast float %6867, %6836
  %6877 = fsub fast float %6868, %6837
  %6878 = fmul fast float %6875, %6641
  %6879 = fmul fast float %6876, %6641
  %6880 = fmul fast float %6877, %6641
  %6881 = fadd fast float %6878, %6835
  %6882 = fadd fast float %6879, %6836
  %6883 = fadd fast float %6880, %6837
  br label %7087

; <label>:6884                                    ; preds = %4826
  %6885 = fmul fast float %215, 2.000000e+00
  %6886 = fmul fast float %216, 2.000000e+00
  %6887 = fadd fast float %6885, -1.000000e+00
  %6888 = fadd fast float %6886, -1.000000e+00
  %6889 = call float @dx.op.unary.f32(i32 6, float %6887)  ; FAbs(value)
  %6890 = call float @dx.op.unary.f32(i32 6, float %6888)  ; FAbs(value)
  %6891 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %6889, float %6890)  ; Dot2(ax,ay,bx,by)
  %6892 = fsub fast float 1.000000e+00, %6891
  %6893 = fsub fast float -0.000000e+00, %6892
  %6894 = call float @dx.op.binary.f32(i32 35, float %6893, float 0.000000e+00)  ; FMax(a,b)
  %6895 = fsub fast float -0.000000e+00, %6894
  %6896 = fcmp fast oge float %6887, 0.000000e+00
  %6897 = fcmp fast oge float %6888, 0.000000e+00
  %6898 = select i1 %6896, float %6895, float %6894
  %6899 = select i1 %6897, float %6895, float %6894
  %6900 = fadd fast float %6898, %6887
  %6901 = fadd fast float %6899, %6888
  %6902 = call float @dx.op.dot3.f32(i32 55, float %6900, float %6901, float %6892, float %6900, float %6901, float %6892)  ; Dot3(ax,ay,az,bx,by,bz)
  %6903 = call float @dx.op.unary.f32(i32 25, float %6902)  ; Rsqrt(value)
  %6904 = fmul fast float %6900, %6903
  %6905 = fmul fast float %6901, %6903
  %6906 = fmul fast float %6903, %6892
  %6907 = fsub fast float 1.000000e+00, %217
  %6908 = fmul fast float %6907, %181
  %6909 = fsub fast float -0.000000e+00, %220
  %6910 = fsub fast float -0.000000e+00, %221
  %6911 = fsub fast float -0.000000e+00, %222
  %6912 = fsub fast float %6909, %6904
  %6913 = fsub fast float %6910, %6905
  %6914 = fsub fast float %6911, %6906
  %6915 = fmul fast float %6912, %6908
  %6916 = fmul fast float %6913, %6908
  %6917 = fmul fast float %6914, %6908
  %6918 = fadd fast float %6915, %6904
  %6919 = fadd fast float %6916, %6905
  %6920 = fadd fast float %6917, %6906
  %6921 = call float @dx.op.dot3.f32(i32 55, float %6918, float %6919, float %6920, float %6918, float %6919, float %6920)  ; Dot3(ax,ay,az,bx,by,bz)
  %6922 = call float @dx.op.unary.f32(i32 25, float %6921)  ; Rsqrt(value)
  %6923 = fmul fast float %6918, %6922
  %6924 = fmul fast float %6919, %6922
  %6925 = fmul fast float %6920, %6922
  %6926 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6927 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %4690, float %4691, float %4692)  ; Dot3(ax,ay,az,bx,by,bz)
  %6928 = call float @dx.op.dot3.f32(i32 55, float %4690, float %4691, float %4692, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %6929 = fmul fast float %6928, 2.000000e+00
  %6930 = fadd fast float %6929, 2.000000e+00
  %6931 = call float @dx.op.unary.f32(i32 25, float %6930)  ; Rsqrt(value)
  %6932 = fadd fast float %6927, %6926
  %6933 = fmul fast float %6931, %6932
  %6934 = call float @dx.op.unary.f32(i32 7, float %6933)  ; Saturate(value)
  %6935 = fmul fast float %6931, %6928
  %6936 = fadd fast float %6935, %6931
  %6937 = call float @dx.op.unary.f32(i32 7, float %6936)  ; Saturate(value)
  %6938 = fcmp fast ogt float %4840, 0.000000e+00
  br i1 %6938, label %6939, label %6976

; <label>:6939                                    ; preds = %6884
  %6940 = fmul fast float %4840, %4840
  %6941 = fsub fast float 1.000000e+00, %6940
  %6942 = call float @dx.op.unary.f32(i32 24, float %6941)  ; Sqrt(value)
  %6943 = fmul fast float %6926, 2.000000e+00
  %6944 = fmul fast float %6943, %6927
  %6945 = fsub fast float %6944, %6928
  %6946 = fcmp fast ult float %6945, %6942
  br i1 %6946, label %6949, label %6947

; <label>:6947                                    ; preds = %6939
  %6948 = call float @dx.op.unary.f32(i32 6, float %6927)  ; FAbs(value)
  br label %6976

; <label>:6949                                    ; preds = %6939
  %6950 = fmul fast float %6945, %6945
  %6951 = fsub fast float 1.000000e+00, %6950
  %6952 = call float @dx.op.unary.f32(i32 25, float %6951)  ; Rsqrt(value)
  %6953 = fmul fast float %6952, %4840
  %6954 = fmul fast float %6945, %6926
  %6955 = fsub fast float %6927, %6954
  %6956 = fmul fast float %6953, %6955
  %6957 = fmul fast float %6927, %6927
  %6958 = fmul fast float %6957, 2.000000e+00
  %6959 = fadd fast float %6958, -1.000000e+00
  %6960 = fmul fast float %6945, %6928
  %6961 = fsub fast float %6959, %6960
  %6962 = fmul fast float %6953, %6961
  %6963 = fmul fast float %6942, %6926
  %6964 = fmul fast float %6942, %6928
  %6965 = fadd fast float %6962, %6964
  %6966 = fmul fast float %6965, 2.000000e+00
  %6967 = fadd fast float %6966, 2.000000e+00
  %6968 = call float @dx.op.unary.f32(i32 25, float %6967)  ; Rsqrt(value)
  %6969 = fadd fast float %6963, %6927
  %6970 = fadd fast float %6969, %6956
  %6971 = fmul fast float %6970, %6968
  %6972 = call float @dx.op.unary.f32(i32 7, float %6971)  ; Saturate(value)
  %6973 = fmul fast float %6965, %6968
  %6974 = fadd fast float %6973, %6968
  %6975 = call float @dx.op.unary.f32(i32 7, float %6974)  ; Saturate(value)
  br label %6976

; <label>:6976                                    ; preds = %6949, %6947, %6884
  %6977 = phi float [ %6948, %6947 ], [ %6975, %6949 ], [ %6937, %6884 ]
  %6978 = phi float [ 1.000000e+00, %6947 ], [ %6972, %6949 ], [ %6934, %6884 ]
  %6979 = call float @dx.op.unary.f32(i32 6, float %6927)  ; FAbs(value)
  %6980 = fadd fast float %6979, 0x3EE4F8B580000000
  %6981 = call float @dx.op.unary.f32(i32 7, float %6980)  ; Saturate(value)
  %6982 = fsub fast float 1.000000e+00, %6977
  %6983 = fmul fast float %6982, %6982
  %6984 = fmul fast float %6983, %6983
  %6985 = fmul fast float %6984, %6982
  %6986 = fsub fast float 1.000000e+00, %6985
  %6987 = fmul fast float %225, %6986
  %6988 = fadd fast float %6987, %6985
  %6989 = fmul fast float %4746, %4746
  %6990 = fmul fast float %6989, %6989
  %6991 = fcmp fast ogt float %4842, 0.000000e+00
  br i1 %6991, label %6992, label %6999

; <label>:6992                                    ; preds = %6976
  %6993 = fmul fast float %4842, %4842
  %6994 = fmul fast float %6977, 0x400CCCCCC0000000
  %6995 = fadd fast float %6994, 0x3FD99999A0000000
  %6996 = fdiv fast float %6993, %6995
  %6997 = fadd fast float %6996, %6990
  %6998 = call float @dx.op.unary.f32(i32 7, float %6997)  ; Saturate(value)
  br label %6999

; <label>:6999                                    ; preds = %6992, %6976
  %7000 = phi float [ %6998, %6992 ], [ %6990, %6976 ]
  br i1 %6938, label %7001, label %7014

; <label>:7001                                    ; preds = %6999
  %7002 = fmul fast float %4840, 2.500000e-01
  %7003 = bitcast float %7000 to i32
  %7004 = ashr i32 %7003, 1
  %7005 = add nsw i32 %7004, 532487669
  %7006 = bitcast i32 %7005 to float
  %7007 = fmul fast float %7006, 3.000000e+00
  %7008 = fadd fast float %7007, %4840
  %7009 = fmul fast float %7002, %7008
  %7010 = fadd fast float %6977, 0x3F50624DE0000000
  %7011 = fdiv fast float %7009, %7010
  %7012 = fadd fast float %7011, %7000
  %7013 = fdiv fast float %7000, %7012
  br label %7014

; <label>:7014                                    ; preds = %7001, %6999
  %7015 = phi float [ %7012, %7001 ], [ %7000, %6999 ]
  %7016 = phi float [ %7013, %7001 ], [ 1.000000e+00, %6999 ]
  %7017 = fcmp fast olt float %4776, 1.000000e+00
  br i1 %7017, label %7018, label %7037

; <label>:7018                                    ; preds = %7014
  %7019 = fsub fast float 0x3FF00068E0000000, %4776
  %7020 = fadd fast float %4776, 1.000000e+00
  %7021 = fdiv fast float %7019, %7020
  %7022 = call float @dx.op.unary.f32(i32 24, float %7021)  ; Sqrt(value)
  %7023 = fmul fast float %7022, 2.500000e-01
  %7024 = bitcast float %7015 to i32
  %7025 = ashr i32 %7024, 1
  %7026 = add nsw i32 %7025, 532487669
  %7027 = bitcast i32 %7026 to float
  %7028 = fmul fast float %7027, 3.000000e+00
  %7029 = fadd fast float %7022, %7028
  %7030 = fmul fast float %7023, %7029
  %7031 = fadd fast float %6977, 0x3F50624DE0000000
  %7032 = fdiv fast float %7030, %7031
  %7033 = fadd fast float %7032, %7015
  %7034 = fdiv fast float %7015, %7033
  %7035 = call float @dx.op.unary.f32(i32 24, float %7034)  ; Sqrt(value)
  %7036 = fmul fast float %7035, %7016
  br label %7037

; <label>:7037                                    ; preds = %7018, %7014
  %7038 = phi float [ %7036, %7018 ], [ %7016, %7014 ]
  %7039 = call float @dx.op.unary.f32(i32 24, float %7000)  ; Sqrt(value)
  %7040 = fsub fast float 1.000000e+00, %7039
  %7041 = fmul fast float %7040, %6981
  %7042 = fadd fast float %7041, %7039
  %7043 = fmul fast float %7042, %4793
  %7044 = fmul fast float %7040, %4793
  %7045 = fadd fast float %7044, %7039
  %7046 = fmul fast float %7045, %6981
  %7047 = fadd fast float %7043, %7046
  %7048 = fdiv fast float 5.000000e-01, %7047
  %7049 = fmul fast float %7000, %6978
  %7050 = fsub fast float %7049, %6978
  %7051 = fmul fast float %7050, %6978
  %7052 = fadd fast float %7051, 1.000000e+00
  %7053 = fmul fast float %7052, %7052
  %7054 = fmul fast float %7053, 0x400921FB60000000
  %7055 = fdiv fast float %7000, %7054
  %7056 = fmul fast float %7055, %7038
  %7057 = fmul fast float %4793, %4794
  %7058 = fmul fast float %6988, %7057
  %7059 = fmul fast float %7058, %7048
  %7060 = fmul fast float %7059, %7056
  %7061 = call float @dx.op.dot3.f32(i32 55, float %6904, float %6905, float %6906, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %7062 = call float @dx.op.unary.f32(i32 7, float %7061)  ; Saturate(value)
  %7063 = fmul fast float %7062, 1.100000e+01
  %7064 = fsub fast float 1.200000e+01, %7063
  %7065 = fmul fast float %7062, 0x40019999A0000000
  %7066 = fsub fast float 0x4004CCCCE0000000, %7065
  %7067 = call float @dx.op.dot3.f32(i32 55, float %6923, float %6924, float %6925, float %4832, float %4833, float %4834)  ; Dot3(ax,ay,az,bx,by,bz)
  %7068 = call float @dx.op.unary.f32(i32 7, float %7067)  ; Saturate(value)
  %7069 = call float @dx.op.unary.f32(i32 23, float %7068)  ; Log(value)
  %7070 = fmul fast float %7069, %7064
  %7071 = call float @dx.op.unary.f32(i32 21, float %7070)  ; Exp(value)
  %7072 = fmul fast float %7071, %7066
  %7073 = fadd fast float %7072, 0x3FE99999A0000000
  %7074 = fmul fast float %7073, %7062
  %7075 = fsub fast float 1.000000e+00, %6988
  %7076 = fsub fast float %7074, %4793
  %7077 = fmul fast float %7076, %6907
  %7078 = fadd fast float %7077, %4793
  %7079 = fmul fast float %7075, %4794
  %7080 = fmul fast float %7079, %7078
  %7081 = fmul fast float %249, 0x3FD45F3060000000
  %7082 = fmul fast float %250, 0x3FD45F3060000000
  %7083 = fmul fast float %251, 0x3FD45F3060000000
  %7084 = fmul fast float %7081, %7080
  %7085 = fmul fast float %7082, %7080
  %7086 = fmul fast float %7083, %7080
  br label %7087

; <label>:7087                                    ; preds = %7037, %6799, %6451, %6424, %6167, %5882, %5495, %5253, %5009, %4843, %4826
  %7088 = phi float [ %7084, %7037 ], [ 0.000000e+00, %6799 ], [ %6632, %6451 ], [ %6448, %6424 ], [ 0.000000e+00, %6167 ], [ 0.000000e+00, %5882 ], [ %5514, %5495 ], [ %5287, %5253 ], [ 0.000000e+00, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7089 = phi float [ %7085, %7037 ], [ 0.000000e+00, %6799 ], [ %6634, %6451 ], [ %6449, %6424 ], [ 0.000000e+00, %6167 ], [ 0.000000e+00, %5882 ], [ %5517, %5495 ], [ %5288, %5253 ], [ 0.000000e+00, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7090 = phi float [ %7086, %7037 ], [ 0.000000e+00, %6799 ], [ %6636, %6451 ], [ %6450, %6424 ], [ 0.000000e+00, %6167 ], [ 0.000000e+00, %5882 ], [ %5520, %5495 ], [ %5289, %5253 ], [ 0.000000e+00, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7091 = phi float [ %7060, %7037 ], [ %6881, %6799 ], [ 0.000000e+00, %6451 ], [ %6425, %6424 ], [ %6214, %6167 ], [ %5905, %5882 ], [ %5496, %5495 ], [ %5254, %5253 ], [ %5045, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7092 = phi float [ %7060, %7037 ], [ %6882, %6799 ], [ 0.000000e+00, %6451 ], [ %6426, %6424 ], [ %6216, %6167 ], [ %5906, %5882 ], [ %5497, %5495 ], [ %5255, %5253 ], [ %5046, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7093 = phi float [ %7060, %7037 ], [ %6883, %6799 ], [ 0.000000e+00, %6451 ], [ %6427, %6424 ], [ %6218, %6167 ], [ %5907, %5882 ], [ %5498, %5495 ], [ %5256, %5253 ], [ %5047, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7094 = phi float [ 0.000000e+00, %7037 ], [ %6872, %6799 ], [ 0.000000e+00, %6451 ], [ %6428, %6424 ], [ %6064, %6167 ], [ %5795, %5882 ], [ %5499, %5495 ], [ %5257, %5253 ], [ %4958, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7095 = phi float [ 0.000000e+00, %7037 ], [ %6873, %6799 ], [ 0.000000e+00, %6451 ], [ %6429, %6424 ], [ %6066, %6167 ], [ %5796, %5882 ], [ %5500, %5495 ], [ %5258, %5253 ], [ %4959, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7096 = phi float [ 0.000000e+00, %7037 ], [ %6874, %6799 ], [ 0.000000e+00, %6451 ], [ %6430, %6424 ], [ %6068, %6167 ], [ %5797, %5882 ], [ %5501, %5495 ], [ %5259, %5253 ], [ %4960, %5009 ], [ 0.000000e+00, %4843 ], [ 0.000000e+00, %4826 ]
  %7097 = fmul fast float %7091, %4656
  %7098 = fmul fast float %7092, %4656
  %7099 = fmul fast float %7093, %4656
  %7100 = fmul fast float %7094, %4660
  %7101 = fmul fast float %7095, %4660
  %7102 = fmul fast float %7096, %4660
  %7103 = icmp eq i32 %4674, 0
  br i1 %7103, label %7245, label %7104

; <label>:7104                                    ; preds = %7087
  %7105 = mul nuw nsw i32 %4674, 5
  %7106 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %7107 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7106, i32 %7105, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7108 = extractvalue %dx.types.ResRet.f32 %7107, 0
  %7109 = extractvalue %dx.types.ResRet.f32 %7107, 1
  %7110 = extractvalue %dx.types.ResRet.f32 %7107, 2
  %7111 = extractvalue %dx.types.ResRet.f32 %7107, 3
  %7112 = bitcast float %7109 to i32
  %7113 = bitcast float %7110 to i32
  %7114 = and i32 %7112, 255
  %7115 = lshr i32 %7112, 8
  %7116 = and i32 %7115, 65535
  %7117 = call float @dx.op.legacyF16ToF32(i32 131, i32 %7116)  ; LegacyF16ToF32(value)
  %7118 = and i32 %7113, 65535
  %7119 = uitofp i32 %7118 to float
  %7120 = fmul fast float %7119, 0x3EF0000000000000
  %7121 = lshr i32 %7113, 16
  %7122 = uitofp i32 %7121 to float
  %7123 = fmul fast float %7122, 0x3EF0000000000000
  %7124 = add nuw nsw i32 %7105, 1
  %7125 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7106, i32 %7124, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7126 = extractvalue %dx.types.ResRet.f32 %7125, 0
  %7127 = extractvalue %dx.types.ResRet.f32 %7125, 1
  %7128 = extractvalue %dx.types.ResRet.f32 %7125, 2
  %7129 = extractvalue %dx.types.ResRet.f32 %7125, 3
  %7130 = add nuw nsw i32 %7105, 2
  %7131 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7106, i32 %7130, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7132 = extractvalue %dx.types.ResRet.f32 %7131, 0
  %7133 = extractvalue %dx.types.ResRet.f32 %7131, 1
  %7134 = extractvalue %dx.types.ResRet.f32 %7131, 2
  %7135 = extractvalue %dx.types.ResRet.f32 %7131, 3
  %7136 = add nuw nsw i32 %7105, 3
  %7137 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7106, i32 %7136, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7138 = extractvalue %dx.types.ResRet.f32 %7137, 0
  %7139 = extractvalue %dx.types.ResRet.f32 %7137, 1
  %7140 = extractvalue %dx.types.ResRet.f32 %7137, 2
  %7141 = extractvalue %dx.types.ResRet.f32 %7137, 3
  %7142 = add nuw nsw i32 %7105, 4
  %7143 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7106, i32 %7142, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7144 = extractvalue %dx.types.ResRet.f32 %7143, 0
  %7145 = extractvalue %dx.types.ResRet.f32 %7143, 1
  %7146 = extractvalue %dx.types.ResRet.f32 %7143, 2
  %7147 = extractvalue %dx.types.ResRet.f32 %7143, 3
  %7148 = fmul fast float %7126, %387
  %7149 = call float @dx.op.tertiary.f32(i32 46, float %391, float %7132, float %7148)  ; FMad(a,b,c)
  %7150 = call float @dx.op.tertiary.f32(i32 46, float %395, float %7138, float %7149)  ; FMad(a,b,c)
  %7151 = fadd fast float %7150, %7144
  %7152 = fmul fast float %7127, %387
  %7153 = call float @dx.op.tertiary.f32(i32 46, float %391, float %7133, float %7152)  ; FMad(a,b,c)
  %7154 = call float @dx.op.tertiary.f32(i32 46, float %395, float %7139, float %7153)  ; FMad(a,b,c)
  %7155 = fadd fast float %7154, %7145
  %7156 = fmul fast float %7128, %387
  %7157 = call float @dx.op.tertiary.f32(i32 46, float %391, float %7134, float %7156)  ; FMad(a,b,c)
  %7158 = call float @dx.op.tertiary.f32(i32 46, float %395, float %7140, float %7157)  ; FMad(a,b,c)
  %7159 = fadd fast float %7158, %7146
  %7160 = fmul fast float %7129, %387
  %7161 = call float @dx.op.tertiary.f32(i32 46, float %391, float %7135, float %7160)  ; FMad(a,b,c)
  %7162 = call float @dx.op.tertiary.f32(i32 46, float %395, float %7141, float %7161)  ; FMad(a,b,c)
  %7163 = fadd fast float %7162, %7147
  %7164 = fdiv fast float %7159, %7163
  %7165 = fdiv fast float %7155, %7163
  %7166 = fdiv fast float %7151, %7163
  switch i32 %7114, label %7211 [
    i32 2, label %7167
    i32 1, label %7175
    i32 3, label %7201
  ]

; <label>:7167                                    ; preds = %7104
  %7168 = fmul fast float %7166, %7111
  %7169 = fdiv fast float %7164, %7168
  %7170 = fdiv fast float %7165, %7168
  %7171 = fmul fast float %7169, 5.000000e-01
  %7172 = fmul fast float %7170, 5.000000e-01
  %7173 = fadd fast float %7171, 5.000000e-01
  %7174 = fadd fast float %7172, 5.000000e-01
  br label %7211

; <label>:7175                                    ; preds = %7104
  %7176 = call float @dx.op.dot3.f32(i32 55, float %7164, float %7165, float %7166, float %7164, float %7165, float %7166)  ; Dot3(ax,ay,az,bx,by,bz)
  %7177 = call float @dx.op.unary.f32(i32 25, float %7176)  ; Rsqrt(value)
  %7178 = fmul fast float %7177, %7164
  %7179 = fmul fast float %7177, %7165
  %7180 = fmul fast float %7177, %7166
  %7181 = fdiv fast float %7179, %7178
  %7182 = call float @dx.op.unary.f32(i32 17, float %7181)  ; Atan(value)
  %7183 = fadd fast float %7182, 0x400921FB60000000
  %7184 = fadd fast float %7182, 0xC00921FB60000000
  %7185 = fcmp fast olt float %7178, 0.000000e+00
  %7186 = fcmp fast oeq float %7178, 0.000000e+00
  %7187 = fcmp fast oge float %7179, 0.000000e+00
  %7188 = fcmp fast olt float %7179, 0.000000e+00
  %7189 = and i1 %7185, %7187
  %7190 = select i1 %7189, float %7183, float %7182
  %7191 = and i1 %7185, %7188
  %7192 = select i1 %7191, float %7184, float %7190
  %7193 = and i1 %7186, %7188
  %7194 = and i1 %7186, %7187
  %7195 = fadd fast float %7192, 0x400921FB60000000
  %7196 = fmul fast float %7195, 0x3FC45F3060000000
  %7197 = select i1 %7193, float 2.500000e-01, float %7196
  %7198 = select i1 %7194, float 7.500000e-01, float %7197
  %7199 = call float @dx.op.unary.f32(i32 15, float %7180)  ; Acos(value)
  %7200 = fmul fast float %7199, 0x3FD45F3060000000
  br label %7211

; <label>:7201                                    ; preds = %7104
  %7202 = fcmp fast ogt float %7111, 0.000000e+00
  br i1 %7202, label %7203, label %7211

; <label>:7203                                    ; preds = %7201
  %7204 = fmul fast float %7166, %7111
  %7205 = fdiv fast float %7164, %7204
  %7206 = fdiv fast float %7165, %7204
  %7207 = fmul fast float %7205, 5.000000e-01
  %7208 = fmul fast float %7206, 5.000000e-01
  %7209 = fadd fast float %7207, 5.000000e-01
  %7210 = fadd fast float %7208, 5.000000e-01
  br label %7211

; <label>:7211                                    ; preds = %7203, %7201, %7175, %7167, %7104
  %7212 = phi float [ %7164, %7104 ], [ %7209, %7203 ], [ %7164, %7201 ], [ %7198, %7175 ], [ %7173, %7167 ]
  %7213 = phi float [ %7165, %7104 ], [ %7210, %7203 ], [ %7165, %7201 ], [ %7200, %7175 ], [ %7174, %7167 ]
  %7214 = call float @dx.op.unary.f32(i32 22, float %7212)  ; Frc(value)
  %7215 = call float @dx.op.unary.f32(i32 22, float %7213)  ; Frc(value)
  %7216 = call float @dx.op.unary.f32(i32 7, float %7214)  ; Saturate(value)
  %7217 = call float @dx.op.unary.f32(i32 7, float %7215)  ; Saturate(value)
  %7218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %7219 = extractvalue %dx.types.CBufRet.f32 %7218, 2
  %7220 = fmul fast float %7219, %7216
  %7221 = fmul fast float %7219, %7217
  %7222 = fadd fast float %7220, %7120
  %7223 = fadd fast float %7221, %7123
  %7224 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %7225 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %7226 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7224, %dx.types.Handle %7225, float %7222, float %7223, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %7227 = extractvalue %dx.types.ResRet.f32 %7226, 0
  %7228 = fmul fast float %7227, %7227
  %7229 = fsub fast float %4679, %387
  %7230 = fsub fast float %4680, %391
  %7231 = fsub fast float %4681, %395
  %7232 = fmul fast float %7229, %7229
  %7233 = fmul fast float %7230, %7230
  %7234 = fadd fast float %7232, %7233
  %7235 = fmul fast float %7231, %7231
  %7236 = fadd fast float %7234, %7235
  %7237 = call float @dx.op.unary.f32(i32 24, float %7236)  ; Sqrt(value)
  %7238 = fsub fast float %7108, %7237
  %7239 = fmul fast float %7108, 0x3FC99999A0000000
  %7240 = fdiv fast float %7238, %7239
  %7241 = call float @dx.op.unary.f32(i32 7, float %7240)  ; Saturate(value)
  %7242 = fsub fast float %7228, %7117
  %7243 = fmul fast float %7241, %7242
  %7244 = fadd fast float %7243, %7117
  br label %7245

; <label>:7245                                    ; preds = %7211, %7087
  %7246 = phi float [ %7244, %7211 ], [ 1.000000e+00, %7087 ]
  %7247 = fmul fast float %4729, %7246
  %7248 = fmul fast float %4730, %7246
  %7249 = fmul fast float %4731, %7246
  %7250 = fadd fast float %7100, %7097
  %7251 = fadd fast float %7101, %7098
  %7252 = fadd fast float %7102, %7099
  %7253 = fmul fast float %7247, %7250
  %7254 = fmul fast float %7248, %7251
  %7255 = fmul fast float %7249, %7252
  %7256 = call float @dx.op.dot3.f32(i32 55, float %7253, float %7254, float %7255, float 0x3FCB37C140000000, float 0x3FE6E2A960000000, float 0x3FB27B3220000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %7257 = fmul fast float %7247, %7088
  %7258 = fmul fast float %7248, %7089
  %7259 = fmul fast float %7249, %7090
  %7260 = call float @dx.op.dot3.f32(i32 55, float %7257, float %7258, float %7259, float 0x3FCB37C140000000, float 0x3FE6E2A960000000, float 0x3FB27B3220000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %7261 = fadd fast float %7260, %7256
  br label %7262

; <label>:7262                                    ; preds = %7245, %4727
  %7263 = phi float [ 0.000000e+00, %4727 ], [ %7261, %7245 ]
  %7264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 155)  ; CBufferLoadLegacy(handle,regIndex)
  %7265 = extractvalue %dx.types.CBufRet.f32 %7264, 2
  %7266 = fmul fast float %7265, %7263
  %7267 = fcmp fast oge float %4677, 0.000000e+00
  %7268 = fcmp fast ogt float %7266, 0x3F847AE140000000
  %7269 = and i1 %7267, %7268
  br i1 %7269, label %7270, label %7323

; <label>:7270                                    ; preds = %7262
  %7271 = fsub fast float -0.000000e+00, %4615
  %7272 = fsub fast float -0.000000e+00, %4616
  %7273 = fsub fast float -0.000000e+00, %4617
  %7274 = fmul fast float %4604, %7273
  %7275 = fmul fast float %4605, %7272
  %7276 = fsub fast float %7274, %7275
  %7277 = fmul fast float %4605, %7271
  %7278 = fmul fast float %4603, %7273
  %7279 = fsub fast float %7277, %7278
  %7280 = fmul fast float %4603, %7272
  %7281 = fmul fast float %4604, %7271
  %7282 = fsub fast float %7280, %7281
  %7283 = call float @dx.op.dot3.f32(i32 55, float %7276, float %7279, float %7282, float %7276, float %7279, float %7282)  ; Dot3(ax,ay,az,bx,by,bz)
  %7284 = call float @dx.op.unary.f32(i32 25, float %7283)  ; Rsqrt(value)
  %7285 = fmul fast float %7284, %7276
  %7286 = fmul fast float %7284, %7279
  %7287 = fmul fast float %7284, %7282
  %7288 = fmul fast float %7285, %4698
  %7289 = call float @dx.op.tertiary.f32(i32 46, float %4699, float %7286, float %7288)  ; FMad(a,b,c)
  %7290 = call float @dx.op.tertiary.f32(i32 46, float %4700, float %7287, float %7289)  ; FMad(a,b,c)
  %7291 = fmul fast float %4698, %4603
  %7292 = call float @dx.op.tertiary.f32(i32 46, float %4699, float %4604, float %7291)  ; FMad(a,b,c)
  %7293 = call float @dx.op.tertiary.f32(i32 46, float %4700, float %4605, float %7292)  ; FMad(a,b,c)
  %7294 = call float @dx.op.dot3.f32(i32 55, float %4698, float %4699, float %4700, float %7271, float %7272, float %7273)  ; Dot3(ax,ay,az,bx,by,bz)
  %7295 = call float @dx.op.unary.f32(i32 16, float %7294)  ; Asin(value)
  %7296 = fmul fast float %7295, 0x3FD45F3060000000
  %7297 = fadd fast float %7296, 5.000000e-01
  %7298 = fsub fast float -0.000000e+00, %7290
  %7299 = fsub fast float -0.000000e+00, %7293
  %7300 = fdiv fast float %7299, %7298
  %7301 = call float @dx.op.unary.f32(i32 17, float %7300)  ; Atan(value)
  %7302 = fadd fast float %7301, 0x400921FB60000000
  %7303 = fadd fast float %7301, 0xC00921FB60000000
  %7304 = fcmp ogt float %7290, -0.000000e+00
  %7305 = fcmp oeq float %7290, -0.000000e+00
  %7306 = fcmp ole float %7293, -0.000000e+00
  %7307 = fcmp ogt float %7293, -0.000000e+00
  %7308 = and i1 %7304, %7306
  %7309 = select i1 %7308, float %7302, float %7301
  %7310 = and i1 %7304, %7307
  %7311 = select i1 %7310, float %7303, float %7309
  %7312 = and i1 %7305, %7307
  %7313 = and i1 %7305, %7306
  %7314 = fmul fast float %7311, 0x3FC45F3060000000
  %7315 = fadd fast float %7314, 5.000000e-01
  %7316 = select i1 %7312, float 2.500000e-01, float %7315
  %7317 = select i1 %7313, float 7.500000e-01, float %7316
  %7318 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 7, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<F32>
  %7319 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %7320 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %7318, %dx.types.Handle %7319, float %7297, float %7317, float %4677, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %7321 = extractvalue %dx.types.ResRet.f32 %7320, 0
  %7322 = fmul fast float %7321, %7266
  br label %7323

; <label>:7323                                    ; preds = %7270, %7262
  %7324 = phi float [ %7322, %7270 ], [ %7266, %7262 ]
  %7325 = fadd fast float %7324, 1.000000e+00
  %7326 = call float @dx.op.unary.f32(i32 23, float %7325)  ; Log(value)
  br i1 %132, label %7327, label %7691

; <label>:7327                                    ; preds = %7323
  %7328 = fadd fast float %4579, %135
  %7329 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %7330 = extractvalue %dx.types.CBufRet.i32 %7329, 3
  %7331 = icmp eq i32 %4630, %7330
  %7332 = select i1 %7331, float 0.000000e+00, float 1.000000e+00
  %7333 = icmp eq i32 %137, 0
  br i1 %7333, label %7359, label %7334

; <label>:7334                                    ; preds = %7327
  %7335 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7336 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7335, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7337 = icmp ult i32 %7336, %137
  br i1 %7337, label %7338, label %7359

; <label>:7338                                    ; preds = %7334
  %7339 = shl i32 %7336, 2
  %7340 = add i32 %7339, 4
  %7341 = call float @dx.op.unary.f32(i32 7, float %7332)  ; Saturate(value)
  %7342 = fmul fast float %7341, 2.550000e+02
  %7343 = fptoui float %7342 to i32
  %7344 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0x3FA99999A0000000)  ; LegacyF32ToF16(value)
  %7345 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7346 = shl i32 %7345, 16
  %7347 = or i32 %7346, %7344
  %7348 = shl i32 %7343, 24
  %7349 = shl i32 %7343, 16
  %7350 = or i32 %7349, %7348
  %7351 = or i32 %7350, 65282
  %7352 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7352, i32 %7340, i32 undef, i32 %7347, i32 %7347, i32 %7347, i32 %7347, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7353 = add i32 %7339, 5
  %7354 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7354, i32 %7353, i32 undef, i32 %4630, i32 %4630, i32 %4630, i32 %4630, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7355 = add i32 %7339, 6
  %7356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7356, i32 %7355, i32 undef, i32 %7351, i32 %7351, i32 %7351, i32 %7351, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7357 = add i32 %7339, 7
  %7358 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7358, i32 %7357, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7359

; <label>:7359                                    ; preds = %7338, %7334, %7327
  %7360 = fmul fast float %134, 1.200000e+01
  %7361 = fadd fast float %7360, 0x3FA99999A0000000
  %7362 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %7363 = extractvalue %dx.types.CBufRet.i32 %7362, 3
  %7364 = icmp eq i32 %4630, %7363
  %7365 = select i1 %7364, float 0.000000e+00, float 1.000000e+00
  br i1 %7333, label %7391, label %7366

; <label>:7366                                    ; preds = %7359
  %7367 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7368 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7367, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7369 = icmp ult i32 %7368, %137
  br i1 %7369, label %7370, label %7391

; <label>:7370                                    ; preds = %7366
  %7371 = shl i32 %7368, 2
  %7372 = add i32 %7371, 4
  %7373 = call float @dx.op.unary.f32(i32 7, float %7365)  ; Saturate(value)
  %7374 = fmul fast float %7373, 2.550000e+02
  %7375 = fptoui float %7374 to i32
  %7376 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7361)  ; LegacyF32ToF16(value)
  %7377 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7378 = shl i32 %7377, 16
  %7379 = or i32 %7378, %7376
  %7380 = shl i32 %7375, 24
  %7381 = shl i32 %7375, 16
  %7382 = or i32 %7381, %7380
  %7383 = or i32 %7382, 65283
  %7384 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7384, i32 %7372, i32 undef, i32 %7379, i32 %7379, i32 %7379, i32 %7379, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7385 = add i32 %7371, 5
  %7386 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7386, i32 %7385, i32 undef, i32 %4587, i32 %4587, i32 %4587, i32 %4587, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7387 = add i32 %7371, 6
  %7388 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7388, i32 %7387, i32 undef, i32 %7383, i32 %7383, i32 %7383, i32 %7383, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7389 = add i32 %7371, 7
  %7390 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7390, i32 %7389, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7391

; <label>:7391                                    ; preds = %7370, %7366, %7359
  %7392 = fadd fast float %7361, %7360
  %7393 = bitcast float %7326 to i32
  br i1 %7333, label %7412, label %7394

; <label>:7394                                    ; preds = %7391
  %7395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7396 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7395, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7397 = icmp ult i32 %7396, %137
  br i1 %7397, label %7398, label %7412

; <label>:7398                                    ; preds = %7394
  %7399 = shl i32 %7396, 2
  %7400 = add i32 %7399, 4
  %7401 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7392)  ; LegacyF32ToF16(value)
  %7402 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7403 = shl i32 %7402, 16
  %7404 = or i32 %7403, %7401
  %7405 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7405, i32 %7400, i32 undef, i32 %7404, i32 %7404, i32 %7404, i32 %7404, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7406 = add i32 %7399, 5
  %7407 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7407, i32 %7406, i32 undef, i32 %7393, i32 %7393, i32 %7393, i32 %7393, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7408 = add i32 %7399, 6
  %7409 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7409, i32 %7408, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7410 = add i32 %7399, 7
  %7411 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7411, i32 %7410, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7412

; <label>:7412                                    ; preds = %7398, %7394, %7391
  %7413 = fadd fast float %7392, %7360
  %7414 = icmp ne i32 %4674, 0
  %7415 = select i1 %7414, float 1.000000e+00, float 5.000000e-01
  br i1 %7333, label %7443, label %7416

; <label>:7416                                    ; preds = %7412
  %7417 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7418 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7417, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7419 = icmp ult i32 %7418, %137
  br i1 %7419, label %7420, label %7443

; <label>:7420                                    ; preds = %7416
  %7421 = shl i32 %7418, 2
  %7422 = add i32 %7421, 4
  %7423 = call float @dx.op.unary.f32(i32 7, float %7415)  ; Saturate(value)
  %7424 = fmul fast float %7423, 2.550000e+02
  %7425 = fptoui float %7424 to i32
  %7426 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7413)  ; LegacyF32ToF16(value)
  %7427 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7428 = shl i32 %7427, 16
  %7429 = or i32 %7428, %7426
  %7430 = shl i32 %7425, 24
  %7431 = shl i32 %7425, 16
  %7432 = shl i32 %7425, 8
  %7433 = or i32 %7432, %7431
  %7434 = or i32 %7433, %7430
  %7435 = or i32 %7434, 3
  %7436 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7436, i32 %7422, i32 undef, i32 %7429, i32 %7429, i32 %7429, i32 %7429, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7437 = add i32 %7421, 5
  %7438 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7438, i32 %7437, i32 undef, i32 %4674, i32 %4674, i32 %4674, i32 %4674, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7439 = add i32 %7421, 6
  %7440 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7440, i32 %7439, i32 undef, i32 %7435, i32 %7435, i32 %7435, i32 %7435, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7441 = add i32 %7421, 7
  %7442 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7442, i32 %7441, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7443

; <label>:7443                                    ; preds = %7420, %7416, %7412
  %7444 = fadd fast float %7413, %7360
  %7445 = fcmp fast une float %4677, -1.000000e+00
  %7446 = select i1 %7445, float 1.000000e+00, float 5.000000e-01
  %7447 = bitcast float %4677 to i32
  br i1 %7333, label %7475, label %7448

; <label>:7448                                    ; preds = %7443
  %7449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7450 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7449, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7451 = icmp ult i32 %7450, %137
  br i1 %7451, label %7452, label %7475

; <label>:7452                                    ; preds = %7448
  %7453 = shl i32 %7450, 2
  %7454 = add i32 %7453, 4
  %7455 = call float @dx.op.unary.f32(i32 7, float %7446)  ; Saturate(value)
  %7456 = fmul fast float %7455, 2.550000e+02
  %7457 = fptoui float %7456 to i32
  %7458 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7444)  ; LegacyF32ToF16(value)
  %7459 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7460 = shl i32 %7459, 16
  %7461 = or i32 %7460, %7458
  %7462 = shl i32 %7457, 24
  %7463 = shl i32 %7457, 16
  %7464 = shl i32 %7457, 8
  %7465 = or i32 %7464, %7463
  %7466 = or i32 %7465, %7462
  %7467 = or i32 %7466, 1
  %7468 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7468, i32 %7454, i32 undef, i32 %7461, i32 %7461, i32 %7461, i32 %7461, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7469 = add i32 %7453, 5
  %7470 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7470, i32 %7469, i32 undef, i32 %7447, i32 %7447, i32 %7447, i32 %7447, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7471 = add i32 %7453, 6
  %7472 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7472, i32 %7471, i32 undef, i32 %7467, i32 %7467, i32 %7467, i32 %7467, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7473 = add i32 %7453, 7
  %7474 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7474, i32 %7473, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7475

; <label>:7475                                    ; preds = %7452, %7448, %7443
  %7476 = fadd fast float %7444, %7360
  br i1 %7333, label %7495, label %7477

; <label>:7477                                    ; preds = %7475
  %7478 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7479 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7478, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7480 = icmp ult i32 %7479, %137
  br i1 %7480, label %7481, label %7495

; <label>:7481                                    ; preds = %7477
  %7482 = shl i32 %7479, 2
  %7483 = add i32 %7482, 4
  %7484 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7476)  ; LegacyF32ToF16(value)
  %7485 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7328)  ; LegacyF32ToF16(value)
  %7486 = shl i32 %7485, 16
  %7487 = or i32 %7486, %7484
  %7488 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7488, i32 %7483, i32 undef, i32 %7487, i32 %7487, i32 %7487, i32 %7487, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7489 = add i32 %7482, 5
  %7490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7490, i32 %7489, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7491 = add i32 %7482, 6
  %7492 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7492, i32 %7491, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7493 = add i32 %7482, 7
  %7494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7494, i32 %7493, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7495

; <label>:7495                                    ; preds = %7481, %7477, %7475
  %7496 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %7497 = extractvalue %dx.types.CBufRet.i32 %7496, 0
  %7498 = icmp eq i32 %7497, 0
  br i1 %7498, label %7691, label %7499

; <label>:7499                                    ; preds = %7495
  %7500 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %7501 = extractvalue %dx.types.CBufRet.i32 %7500, 3
  %7502 = icmp eq i32 %4630, %7501
  %7503 = icmp eq i32 %7497, 2
  %7504 = or i1 %7502, %7503
  br i1 %7504, label %7505, label %7691

; <label>:7505                                    ; preds = %7499
  %7506 = fadd fast float %4627, 1.000000e+01
  %7507 = icmp eq i32 %138, 0
  br label %7508

; <label>:7508                                    ; preds = %7553, %7505
  %7509 = phi float [ 0.000000e+00, %7505 ], [ %7513, %7553 ]
  %7510 = phi float [ %7506, %7505 ], [ %7517, %7553 ]
  %7511 = phi float [ %4628, %7505 ], [ %7519, %7553 ]
  %7512 = phi i32 [ 0, %7505 ], [ %7554, %7553 ]
  %7513 = fadd fast float %7509, 0x3FDACEEA20000000
  %7514 = call float @dx.op.unary.f32(i32 13, float %7513)  ; Sin(value)
  %7515 = call float @dx.op.unary.f32(i32 12, float %7513)  ; Cos(value)
  %7516 = fmul fast float %7515, 1.000000e+01
  %7517 = fadd fast float %7516, %4627
  %7518 = fmul fast float %7514, 1.000000e+01
  %7519 = fadd fast float %7518, %4628
  br i1 %7507, label %7525, label %7520

; <label>:7520                                    ; preds = %7508
  %7521 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7522 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7521, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7523 = add i32 %7522, 1
  %7524 = icmp ult i32 %7523, %138
  br label %7525

; <label>:7525                                    ; preds = %7520, %7508
  %7526 = phi i32 [ %7522, %7520 ], [ 0, %7508 ]
  %7527 = phi i1 [ %7524, %7520 ], [ false, %7508 ]
  br i1 %7527, label %7528, label %7553

; <label>:7528                                    ; preds = %7525
  %7529 = shl i32 %137, 2
  %7530 = add i32 %7529, 4
  %7531 = shl i32 %7526, 3
  %7532 = add i32 %7530, %7531
  %7533 = bitcast float %4626 to i32
  %7534 = bitcast float %7510 to i32
  %7535 = bitcast float %7511 to i32
  %7536 = bitcast float %7517 to i32
  %7537 = bitcast float %7519 to i32
  %7538 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7538, i32 %7532, i32 undef, i32 %7533, i32 %7533, i32 %7533, i32 %7533, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7539 = or i32 %7532, 1
  %7540 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7540, i32 %7539, i32 undef, i32 %7534, i32 %7534, i32 %7534, i32 %7534, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7541 = or i32 %7532, 2
  %7542 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7542, i32 %7541, i32 undef, i32 %7535, i32 %7535, i32 %7535, i32 %7535, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7543 = or i32 %7532, 3
  %7544 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7544, i32 %7543, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7545 = add i32 %7532, 4
  %7546 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7546, i32 %7545, i32 undef, i32 %7533, i32 %7533, i32 %7533, i32 %7533, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7547 = add i32 %7532, 5
  %7548 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7548, i32 %7547, i32 undef, i32 %7536, i32 %7536, i32 %7536, i32 %7536, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7549 = add i32 %7532, 6
  %7550 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7550, i32 %7549, i32 undef, i32 %7537, i32 %7537, i32 %7537, i32 %7537, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7551 = add i32 %7532, 7
  %7552 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7552, i32 %7551, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7553

; <label>:7553                                    ; preds = %7528, %7525
  %7554 = add nuw nsw i32 %7512, 1
  %7555 = icmp eq i32 %7554, 16
  br i1 %7555, label %7556, label %7508

; <label>:7556                                    ; preds = %7553
  %7557 = fadd fast float %4626, -1.000000e+01
  br label %7558

; <label>:7558                                    ; preds = %7603, %7556
  %7559 = phi float [ 0.000000e+00, %7556 ], [ %7563, %7603 ]
  %7560 = phi float [ %7557, %7556 ], [ %7567, %7603 ]
  %7561 = phi float [ %4628, %7556 ], [ %7569, %7603 ]
  %7562 = phi i32 [ 0, %7556 ], [ %7604, %7603 ]
  %7563 = fadd fast float %7559, 0x3FDACEEA20000000
  %7564 = call float @dx.op.unary.f32(i32 13, float %7563)  ; Sin(value)
  %7565 = call float @dx.op.unary.f32(i32 12, float %7563)  ; Cos(value)
  %7566 = fmul fast float %7565, 1.000000e+01
  %7567 = fsub fast float %4626, %7566
  %7568 = fmul fast float %7564, 1.000000e+01
  %7569 = fadd fast float %7568, %4628
  br i1 %7507, label %7575, label %7570

; <label>:7570                                    ; preds = %7558
  %7571 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7572 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7571, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7573 = add i32 %7572, 1
  %7574 = icmp ult i32 %7573, %138
  br label %7575

; <label>:7575                                    ; preds = %7570, %7558
  %7576 = phi i32 [ %7572, %7570 ], [ 0, %7558 ]
  %7577 = phi i1 [ %7574, %7570 ], [ false, %7558 ]
  br i1 %7577, label %7578, label %7603

; <label>:7578                                    ; preds = %7575
  %7579 = shl i32 %137, 2
  %7580 = add i32 %7579, 4
  %7581 = shl i32 %7576, 3
  %7582 = add i32 %7580, %7581
  %7583 = bitcast float %7560 to i32
  %7584 = bitcast float %4627 to i32
  %7585 = bitcast float %7561 to i32
  %7586 = bitcast float %7567 to i32
  %7587 = bitcast float %7569 to i32
  %7588 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7588, i32 %7582, i32 undef, i32 %7583, i32 %7583, i32 %7583, i32 %7583, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7589 = or i32 %7582, 1
  %7590 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7590, i32 %7589, i32 undef, i32 %7584, i32 %7584, i32 %7584, i32 %7584, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7591 = or i32 %7582, 2
  %7592 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7592, i32 %7591, i32 undef, i32 %7585, i32 %7585, i32 %7585, i32 %7585, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7593 = or i32 %7582, 3
  %7594 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7594, i32 %7593, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7595 = add i32 %7582, 4
  %7596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7596, i32 %7595, i32 undef, i32 %7586, i32 %7586, i32 %7586, i32 %7586, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7597 = add i32 %7582, 5
  %7598 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7598, i32 %7597, i32 undef, i32 %7584, i32 %7584, i32 %7584, i32 %7584, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7599 = add i32 %7582, 6
  %7600 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7600, i32 %7599, i32 undef, i32 %7587, i32 %7587, i32 %7587, i32 %7587, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7601 = add i32 %7582, 7
  %7602 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7602, i32 %7601, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7603

; <label>:7603                                    ; preds = %7578, %7575
  %7604 = add nuw nsw i32 %7562, 1
  %7605 = icmp eq i32 %7604, 16
  br i1 %7605, label %7606, label %7558

; <label>:7606                                    ; preds = %7603
  %7607 = fadd fast float %4627, -1.000000e+01
  br label %7608

; <label>:7608                                    ; preds = %7653, %7606
  %7609 = phi float [ 0.000000e+00, %7606 ], [ %7613, %7653 ]
  %7610 = phi float [ %4626, %7606 ], [ %7619, %7653 ]
  %7611 = phi float [ %7607, %7606 ], [ %7617, %7653 ]
  %7612 = phi i32 [ 0, %7606 ], [ %7654, %7653 ]
  %7613 = fadd fast float %7609, 0x3FDACEEA20000000
  %7614 = call float @dx.op.unary.f32(i32 13, float %7613)  ; Sin(value)
  %7615 = call float @dx.op.unary.f32(i32 12, float %7613)  ; Cos(value)
  %7616 = fmul fast float %7615, 1.000000e+01
  %7617 = fsub fast float %4627, %7616
  %7618 = fmul fast float %7614, 1.000000e+01
  %7619 = fadd fast float %7618, %4626
  br i1 %7507, label %7625, label %7620

; <label>:7620                                    ; preds = %7608
  %7621 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7622 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7621, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7623 = add i32 %7622, 1
  %7624 = icmp ult i32 %7623, %138
  br label %7625

; <label>:7625                                    ; preds = %7620, %7608
  %7626 = phi i32 [ %7622, %7620 ], [ 0, %7608 ]
  %7627 = phi i1 [ %7624, %7620 ], [ false, %7608 ]
  br i1 %7627, label %7628, label %7653

; <label>:7628                                    ; preds = %7625
  %7629 = shl i32 %137, 2
  %7630 = add i32 %7629, 4
  %7631 = shl i32 %7626, 3
  %7632 = add i32 %7630, %7631
  %7633 = bitcast float %7610 to i32
  %7634 = bitcast float %7611 to i32
  %7635 = bitcast float %4628 to i32
  %7636 = bitcast float %7619 to i32
  %7637 = bitcast float %7617 to i32
  %7638 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7638, i32 %7632, i32 undef, i32 %7633, i32 %7633, i32 %7633, i32 %7633, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7639 = or i32 %7632, 1
  %7640 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7640, i32 %7639, i32 undef, i32 %7634, i32 %7634, i32 %7634, i32 %7634, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7641 = or i32 %7632, 2
  %7642 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7642, i32 %7641, i32 undef, i32 %7635, i32 %7635, i32 %7635, i32 %7635, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7643 = or i32 %7632, 3
  %7644 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7644, i32 %7643, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7645 = add i32 %7632, 4
  %7646 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7646, i32 %7645, i32 undef, i32 %7636, i32 %7636, i32 %7636, i32 %7636, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7647 = add i32 %7632, 5
  %7648 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7648, i32 %7647, i32 undef, i32 %7637, i32 %7637, i32 %7637, i32 %7637, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7649 = add i32 %7632, 6
  %7650 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7650, i32 %7649, i32 undef, i32 %7635, i32 %7635, i32 %7635, i32 %7635, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7651 = add i32 %7632, 7
  %7652 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7652, i32 %7651, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7653

; <label>:7653                                    ; preds = %7628, %7625
  %7654 = add nuw nsw i32 %7612, 1
  %7655 = icmp eq i32 %7654, 16
  br i1 %7655, label %7656, label %7608

; <label>:7656                                    ; preds = %7653
  br i1 %7507, label %7662, label %7657

; <label>:7657                                    ; preds = %7656
  %7658 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7659 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7658, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7660 = add i32 %7659, 1
  %7661 = icmp ult i32 %7660, %138
  br label %7662

; <label>:7662                                    ; preds = %7657, %7656
  %7663 = phi i32 [ %7659, %7657 ], [ 0, %7656 ]
  %7664 = phi i1 [ %7661, %7657 ], [ false, %7656 ]
  br i1 %7664, label %7665, label %7691

; <label>:7665                                    ; preds = %7662
  %7666 = shl i32 %137, 2
  %7667 = add i32 %7666, 4
  %7668 = shl i32 %7663, 3
  %7669 = add i32 %7667, %7668
  %7670 = bitcast float %387 to i32
  %7671 = bitcast float %391 to i32
  %7672 = bitcast float %395 to i32
  %7673 = bitcast float %4626 to i32
  %7674 = bitcast float %4627 to i32
  %7675 = bitcast float %4628 to i32
  %7676 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7676, i32 %7669, i32 undef, i32 %7670, i32 %7670, i32 %7670, i32 %7670, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7677 = or i32 %7669, 1
  %7678 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7678, i32 %7677, i32 undef, i32 %7671, i32 %7671, i32 %7671, i32 %7671, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7679 = or i32 %7669, 2
  %7680 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7680, i32 %7679, i32 undef, i32 %7672, i32 %7672, i32 %7672, i32 %7672, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7681 = or i32 %7669, 3
  %7682 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7682, i32 %7681, i32 undef, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7683 = add i32 %7669, 4
  %7684 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7684, i32 %7683, i32 undef, i32 %7673, i32 %7673, i32 %7673, i32 %7673, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7685 = add i32 %7669, 5
  %7686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7686, i32 %7685, i32 undef, i32 %7674, i32 %7674, i32 %7674, i32 %7674, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7687 = add i32 %7669, 6
  %7688 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7688, i32 %7687, i32 undef, i32 %7675, i32 %7675, i32 %7675, i32 %7675, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7689 = add i32 %7669, 7
  %7690 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7690, i32 %7689, i32 undef, i32 16646398, i32 16646398, i32 16646398, i32 16646398, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7691

; <label>:7691                                    ; preds = %7665, %7662, %7499, %7495, %7323
  %7692 = phi float [ %4579, %7323 ], [ %7328, %7665 ], [ %7328, %7662 ], [ %7328, %7499 ], [ %7328, %7495 ]
  %7693 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %7694 = extractvalue %dx.types.CBufRet.f32 %7693, 0
  %7695 = fcmp fast ogt float %7326, %7694
  br i1 %7695, label %7696, label %4589

; <label>:7696                                    ; preds = %7691
  %7697 = fadd fast float %7326, %4580
  %7698 = fdiv fast float %4580, %7697
  br label %7699

; <label>:7699                                    ; preds = %7696
  %7700 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 0
  %7701 = load float, float* %7700, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %7702 = fcmp fast olt float %7701, %7698
  br i1 %7702, label %7703, label %7705

; <label>:7703                                    ; preds = %7699
  %7704 = fdiv fast float %7701, %7698
  store float %7704, float* %7700, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  br label %7715

; <label>:7705                                    ; preds = %7699
  %7706 = fsub fast float %7701, %7698
  %7707 = fsub fast float 1.000000e+00, %7698
  %7708 = fdiv fast float %7706, %7707
  store float %7708, float* %7700, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %7709 = and i32 %4587, 4095
  %7710 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7326)  ; LegacyF32ToF16(value)
  %7711 = shl i32 %7710, 16
  %7712 = or i32 %7709, %7711
  %7713 = or i32 %7712, 32768
  %7714 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 0
  store i32 %7713, i32* %7714, align 4, !tbaa !50, !alias.scope !125, !noalias !128
  br label %7715

; <label>:7715                                    ; preds = %7705, %7703
  %7716 = phi float [ %7708, %7705 ], [ %7704, %7703 ]
  %7717 = call float @dx.op.binary.f32(i32 35, float %7716, float 0.000000e+00)  ; FMax(a,b)
  %7718 = call float @dx.op.binary.f32(i32 36, float %7717, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %7718, float* %7700, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %7719 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 1
  %7720 = load float, float* %7719, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %7721 = fcmp fast olt float %7720, %7698
  br i1 %7721, label %9318, label %9308

; <label>:7722                                    ; preds = %4571, %1435
  %7723 = phi float [ %4572, %4571 ], [ %1436, %1435 ]
  %7724 = phi float [ %4573, %4571 ], [ %1437, %1435 ]
  br label %7728

; <label>:7725                                    ; preds = %4589, %4578
  %7726 = phi float [ %4590, %4589 ], [ %4579, %4578 ]
  %7727 = phi float [ %4591, %4589 ], [ %4580, %4578 ]
  br label %7728

; <label>:7728                                    ; preds = %7725, %7722, %4575, %1415
  %7729 = phi float [ %1411, %1415 ], [ %1411, %4575 ], [ %7723, %7722 ], [ %7726, %7725 ]
  %7730 = phi float [ 0.000000e+00, %1415 ], [ 0.000000e+00, %4575 ], [ %7724, %7722 ], [ %7727, %7725 ]
  br i1 %132, label %7731, label %7849

; <label>:7731                                    ; preds = %7728
  %7732 = fadd fast float %7729, %135
  %7733 = icmp eq i32 %137, 0
  br i1 %7733, label %7764, label %7734

; <label>:7734                                    ; preds = %7731
  %7735 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7736 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7735, i32 0, i32 2, i32 undef, i32 undef, i32 21)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7737 = add i32 %7736, 21
  %7738 = icmp ult i32 %7737, %137
  br i1 %7738, label %7739, label %7764

; <label>:7739                                    ; preds = %7734
  br label %7740

; <label>:7740                                    ; preds = %7740, %7739
  %7741 = phi i32 [ %7759, %7740 ], [ %7736, %7739 ]
  %7742 = phi float [ %7760, %7740 ], [ 0x3FA99999A0000000, %7739 ]
  %7743 = phi i32 [ %7761, %7740 ], [ 419, %7739 ]
  %7744 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %7743
  %7745 = load i32, i32* %7744, align 4, !tbaa !50, !noalias !130
  %7746 = shl i32 %7741, 2
  %7747 = add i32 %7746, 4
  %7748 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7742)  ; LegacyF32ToF16(value)
  %7749 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7732)  ; LegacyF32ToF16(value)
  %7750 = shl i32 %7749, 16
  %7751 = or i32 %7750, %7748
  %7752 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7752, i32 %7747, i32 undef, i32 %7751, i32 %7751, i32 %7751, i32 %7751, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7753 = add i32 %7746, 5
  %7754 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7754, i32 %7753, i32 undef, i32 %7745, i32 %7745, i32 %7745, i32 %7745, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7755 = add i32 %7746, 6
  %7756 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7756, i32 %7755, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7757 = add i32 %7746, 7
  %7758 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7758, i32 %7757, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7759 = add nsw i32 %7741, 1
  %7760 = fadd fast float %7742, %134
  %7761 = add nuw nsw i32 %7743, 1
  %7762 = icmp eq i32 %7761, 440
  br i1 %7762, label %7763, label %7740

; <label>:7763                                    ; preds = %7740
  br label %7764

; <label>:7764                                    ; preds = %7763, %7734, %7731
  %7765 = phi float [ 0x3FA99999A0000000, %7734 ], [ 0x3FA99999A0000000, %7731 ], [ %7760, %7763 ]
  %7766 = bitcast float %7730 to i32
  br i1 %7733, label %7785, label %7767

; <label>:7767                                    ; preds = %7764
  %7768 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7769 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7768, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7770 = icmp ult i32 %7769, %137
  br i1 %7770, label %7771, label %7785

; <label>:7771                                    ; preds = %7767
  %7772 = shl i32 %7769, 2
  %7773 = add i32 %7772, 4
  %7774 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7765)  ; LegacyF32ToF16(value)
  %7775 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7732)  ; LegacyF32ToF16(value)
  %7776 = shl i32 %7775, 16
  %7777 = or i32 %7776, %7774
  %7778 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7778, i32 %7773, i32 undef, i32 %7777, i32 %7777, i32 %7777, i32 %7777, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7779 = add i32 %7772, 5
  %7780 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7780, i32 %7779, i32 undef, i32 %7766, i32 %7766, i32 %7766, i32 %7766, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7781 = add i32 %7772, 6
  %7782 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7782, i32 %7781, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7783 = add i32 %7772, 7
  %7784 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7784, i32 %7783, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7785

; <label>:7785                                    ; preds = %7771, %7767, %7764
  %7786 = fadd fast float %7732, %135
  br i1 %7733, label %7817, label %7787

; <label>:7787                                    ; preds = %7785
  %7788 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7789 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7788, i32 0, i32 2, i32 undef, i32 undef, i32 20)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7790 = add i32 %7789, 20
  %7791 = icmp ult i32 %7790, %137
  br i1 %7791, label %7792, label %7817

; <label>:7792                                    ; preds = %7787
  br label %7793

; <label>:7793                                    ; preds = %7793, %7792
  %7794 = phi i32 [ %7812, %7793 ], [ %7789, %7792 ]
  %7795 = phi float [ %7813, %7793 ], [ 0x3FA99999A0000000, %7792 ]
  %7796 = phi i32 [ %7814, %7793 ], [ 440, %7792 ]
  %7797 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %7796
  %7798 = load i32, i32* %7797, align 4, !tbaa !50, !noalias !133
  %7799 = shl i32 %7794, 2
  %7800 = add i32 %7799, 4
  %7801 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7795)  ; LegacyF32ToF16(value)
  %7802 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7786)  ; LegacyF32ToF16(value)
  %7803 = shl i32 %7802, 16
  %7804 = or i32 %7803, %7801
  %7805 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7805, i32 %7800, i32 undef, i32 %7804, i32 %7804, i32 %7804, i32 %7804, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7806 = add i32 %7799, 5
  %7807 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7807, i32 %7806, i32 undef, i32 %7798, i32 %7798, i32 %7798, i32 %7798, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7808 = add i32 %7799, 6
  %7809 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7809, i32 %7808, i32 undef, i32 -256, i32 -256, i32 -256, i32 -256, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7810 = add i32 %7799, 7
  %7811 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7811, i32 %7810, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7812 = add nsw i32 %7794, 1
  %7813 = fadd fast float %7795, %134
  %7814 = add nuw nsw i32 %7796, 1
  %7815 = icmp eq i32 %7814, 460
  br i1 %7815, label %7816, label %7793

; <label>:7816                                    ; preds = %7793
  br label %7817

; <label>:7817                                    ; preds = %7816, %7787, %7785
  %7818 = fadd fast float %7786, %135
  br i1 %7733, label %7849, label %7819

; <label>:7819                                    ; preds = %7817
  %7820 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7821 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7820, i32 0, i32 2, i32 undef, i32 undef, i32 59)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7822 = add i32 %7821, 59
  %7823 = icmp ult i32 %7822, %137
  br i1 %7823, label %7824, label %7849

; <label>:7824                                    ; preds = %7819
  br label %7825

; <label>:7825                                    ; preds = %7825, %7824
  %7826 = phi i32 [ %7844, %7825 ], [ %7821, %7824 ]
  %7827 = phi float [ %7845, %7825 ], [ 0x3FA99999A0000000, %7824 ]
  %7828 = phi i32 [ %7846, %7825 ], [ 460, %7824 ]
  %7829 = getelementptr inbounds [519 x i32], [519 x i32]* @TEXT_CHARS, i32 0, i32 %7828
  %7830 = load i32, i32* %7829, align 4, !tbaa !50, !noalias !136
  %7831 = shl i32 %7826, 2
  %7832 = add i32 %7831, 4
  %7833 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7827)  ; LegacyF32ToF16(value)
  %7834 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7818)  ; LegacyF32ToF16(value)
  %7835 = shl i32 %7834, 16
  %7836 = or i32 %7835, %7833
  %7837 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7837, i32 %7832, i32 undef, i32 %7836, i32 %7836, i32 %7836, i32 %7836, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7838 = add i32 %7831, 5
  %7839 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7839, i32 %7838, i32 undef, i32 %7830, i32 %7830, i32 %7830, i32 %7830, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7840 = add i32 %7831, 6
  %7841 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7841, i32 %7840, i32 undef, i32 -943473408, i32 -943473408, i32 -943473408, i32 -943473408, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7842 = add i32 %7831, 7
  %7843 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7843, i32 %7842, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7844 = add nsw i32 %7826, 1
  %7845 = fadd fast float %7827, %134
  %7846 = add nuw nsw i32 %7828, 1
  %7847 = icmp eq i32 %7846, 519
  br i1 %7847, label %7848, label %7825

; <label>:7848                                    ; preds = %7825
  br label %7849

; <label>:7849                                    ; preds = %7848, %7819, %7817, %7728
  %7850 = phi float [ %7729, %7728 ], [ %7818, %7817 ], [ %7818, %7819 ], [ %7818, %7848 ]
  br label %7851

; <label>:7851                                    ; preds = %9189, %7849
  %7852 = phi float [ %9180, %9189 ], [ %7850, %7849 ]
  %7853 = phi i32 [ %9211, %9189 ], [ 0, %7849 ]
  %7854 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 %7853
  %7855 = load i32, i32* %7854, align 4, !tbaa !50
  %7856 = and i32 %7855, 4095
  %7857 = lshr i32 %7855, 16
  %7858 = call float @dx.op.legacyF16ToF32(i32 131, i32 %7857)  ; LegacyF16ToF32(value)
  %7859 = mul nuw nsw i32 %7856, 6
  %7860 = add nuw nsw i32 %7859, 5
  %7861 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %7862 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7861, i32 %7860, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7863 = extractvalue %dx.types.ResRet.f32 %7862, 3
  %7864 = add nuw nsw i32 %7859, 2
  %7865 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7861, i32 %7864, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7866 = extractvalue %dx.types.ResRet.f32 %7865, 3
  %7867 = or i32 %7859, 1
  %7868 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %7861, i32 %7867, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %7869 = extractvalue %dx.types.ResRet.f32 %7868, 0
  %7870 = extractvalue %dx.types.ResRet.f32 %7868, 1
  %7871 = extractvalue %dx.types.ResRet.f32 %7868, 2
  %7872 = bitcast float %7863 to i32
  %7873 = and i32 %7872, 65535
  %7874 = fptosi float %7871 to i32
  %7875 = bitcast float %7870 to i32
  %7876 = and i32 %7875, 1023
  %7877 = uitofp i32 %7876 to float
  %7878 = lshr i32 %7875, 10
  %7879 = and i32 %7878, 1023
  %7880 = uitofp i32 %7879 to float
  %7881 = lshr i32 %7875, 20
  %7882 = and i32 %7881, 1023
  %7883 = uitofp i32 %7882 to float
  %7884 = fmul fast float %7877, %7869
  %7885 = fmul fast float %7880, %7869
  %7886 = fmul fast float %7883, %7869
  %7887 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %7888 = extractvalue %dx.types.CBufRet.i32 %7887, 0
  %7889 = extractvalue %dx.types.CBufRet.i32 %7887, 1
  %7890 = mul i32 %7888, %60
  %7891 = mul i32 %7889, %61
  %7892 = and i32 %7853, 1
  %7893 = lshr i32 %7853, 1
  %7894 = add i32 %7890, %7892
  %7895 = add i32 %7891, %7893
  %7896 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %7897 = extractvalue %dx.types.CBufRet.i32 %7896, 3
  %7898 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %7899 = extractvalue %dx.types.CBufRet.i32 %7898, 0
  %7900 = extractvalue %dx.types.CBufRet.i32 %7898, 1
  %7901 = extractvalue %dx.types.CBufRet.i32 %7898, 2
  %7902 = and i32 %7894, %7899
  %7903 = and i32 %7895, %7900
  %7904 = and i32 %7901, %7897
  %7905 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %7906 = extractvalue %dx.types.CBufRet.i32 %7905, 1
  %7907 = mul i32 %7904, %7906
  %7908 = add i32 %7907, %7903
  %7909 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %7910 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %7909, i32 0, i32 %7902, i32 %7908, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %7911 = extractvalue %dx.types.ResRet.f32 %7910, 0
  %7912 = extractvalue %dx.types.ResRet.f32 %7910, 1
  %7913 = icmp ne i32 %200, 7
  %7914 = fmul fast float %7911, 2.550000e+02
  %7915 = fadd fast float %7914, 5.000000e-01
  %7916 = fptoui float %7915 to i32
  %7917 = fmul fast float %7912, 2.550000e+02
  %7918 = fadd fast float %7917, 5.000000e-01
  %7919 = fptoui float %7918 to i32
  %7920 = shl i32 %7919, 8
  %7921 = or i32 %7920, %7916
  %7922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %7922, i32 %7894, i32 %7895, i32 undef, i32 %7921, i32 %7921, i32 %7921, i32 %7921, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br i1 %132, label %7923, label %9179

; <label>:7923                                    ; preds = %7851
  %7924 = fadd fast float %7852, %135
  %7925 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %7926 = extractvalue %dx.types.CBufRet.i32 %7925, 3
  %7927 = icmp eq i32 %7874, %7926
  %7928 = select i1 %7927, float 0.000000e+00, float 1.000000e+00
  %7929 = icmp eq i32 %137, 0
  br i1 %7929, label %7955, label %7930

; <label>:7930                                    ; preds = %7923
  %7931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7932 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7931, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7933 = icmp ult i32 %7932, %137
  br i1 %7933, label %7934, label %7955

; <label>:7934                                    ; preds = %7930
  %7935 = shl i32 %7932, 2
  %7936 = add i32 %7935, 4
  %7937 = call float @dx.op.unary.f32(i32 7, float %7928)  ; Saturate(value)
  %7938 = fmul fast float %7937, 2.550000e+02
  %7939 = fptoui float %7938 to i32
  %7940 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0x3FA99999A0000000)  ; LegacyF32ToF16(value)
  %7941 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %7942 = shl i32 %7941, 16
  %7943 = or i32 %7942, %7940
  %7944 = shl i32 %7939, 24
  %7945 = shl i32 %7939, 16
  %7946 = or i32 %7945, %7944
  %7947 = or i32 %7946, 65282
  %7948 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7948, i32 %7936, i32 undef, i32 %7943, i32 %7943, i32 %7943, i32 %7943, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7949 = add i32 %7935, 5
  %7950 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7950, i32 %7949, i32 undef, i32 %7874, i32 %7874, i32 %7874, i32 %7874, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7951 = add i32 %7935, 6
  %7952 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7952, i32 %7951, i32 undef, i32 %7947, i32 %7947, i32 %7947, i32 %7947, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7953 = add i32 %7935, 7
  %7954 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7954, i32 %7953, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7955

; <label>:7955                                    ; preds = %7934, %7930, %7923
  %7956 = fmul fast float %134, 1.200000e+01
  %7957 = fadd fast float %7956, 0x3FA99999A0000000
  %7958 = bitcast float %7858 to i32
  br i1 %7929, label %7977, label %7959

; <label>:7959                                    ; preds = %7955
  %7960 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %7961 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %7960, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %7962 = icmp ult i32 %7961, %137
  br i1 %7962, label %7963, label %7977

; <label>:7963                                    ; preds = %7959
  %7964 = shl i32 %7961, 2
  %7965 = add i32 %7964, 4
  %7966 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7957)  ; LegacyF32ToF16(value)
  %7967 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %7968 = shl i32 %7967, 16
  %7969 = or i32 %7968, %7966
  %7970 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7970, i32 %7965, i32 undef, i32 %7969, i32 %7969, i32 %7969, i32 %7969, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7971 = add i32 %7964, 5
  %7972 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7972, i32 %7971, i32 undef, i32 %7958, i32 %7958, i32 %7958, i32 %7958, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7973 = add i32 %7964, 6
  %7974 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7974, i32 %7973, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %7975 = add i32 %7964, 7
  %7976 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %7976, i32 %7975, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %7977

; <label>:7977                                    ; preds = %7963, %7959, %7955
  %7978 = fadd fast float %7957, %7956
  %7979 = mul i32 %7873, 747796405
  %7980 = add i32 %7979, 2143540048
  %7981 = lshr i32 %7980, 28
  %7982 = add nuw nsw i32 %7981, 4
  %7983 = lshr i32 %7980, %7982
  %7984 = xor i32 %7983, %7980
  %7985 = mul i32 %7984, 277803737
  %7986 = lshr i32 %7985, 19
  %7987 = and i32 %7986, 3
  %7988 = getelementptr inbounds [4 x i32], [4 x i32]* @VisibleLightMaskHash.hca, i32 0, i32 %7987
  %7989 = load i32, i32* %7988, align 4, !tbaa !50
  %7990 = lshr i32 %7985, 14
  %7991 = and i32 %7990, 28
  %7992 = lshr i32 %7989, %7991
  %7993 = and i32 %7992, 1
  %7994 = and i32 %7992, 2
  %7995 = icmp ne i32 %7994, 0
  %7996 = select i1 %7995, i32 10, i32 0
  %7997 = or i32 %7996, %7993
  %7998 = and i32 %7992, 4
  %7999 = icmp ne i32 %7998, 0
  %8000 = select i1 %7999, i32 100, i32 0
  %8001 = or i32 %7997, %8000
  %8002 = and i32 %7992, 8
  %8003 = icmp ne i32 %8002, 0
  %8004 = select i1 %8003, i32 1000, i32 0
  %8005 = add nuw nsw i32 %8001, %8004
  br i1 %7929, label %8024, label %8006

; <label>:8006                                    ; preds = %7977
  %8007 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %8008 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %8007, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %8009 = icmp ult i32 %8008, %137
  br i1 %8009, label %8010, label %8024

; <label>:8010                                    ; preds = %8006
  %8011 = shl i32 %8008, 2
  %8012 = add i32 %8011, 4
  %8013 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7978)  ; LegacyF32ToF16(value)
  %8014 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %8015 = shl i32 %8014, 16
  %8016 = or i32 %8015, %8013
  %8017 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8017, i32 %8012, i32 undef, i32 %8016, i32 %8016, i32 %8016, i32 %8016, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8018 = add i32 %8011, 5
  %8019 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8019, i32 %8018, i32 undef, i32 %8005, i32 %8005, i32 %8005, i32 %8005, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8020 = add i32 %8011, 6
  %8021 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8021, i32 %8020, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8022 = add i32 %8011, 7
  %8023 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8023, i32 %8022, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %8024

; <label>:8024                                    ; preds = %8010, %8006, %7977
  %8025 = fadd fast float %7978, %7956
  br i1 %7929, label %8044, label %8026

; <label>:8026                                    ; preds = %8024
  %8027 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %8028 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %8027, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %8029 = icmp ult i32 %8028, %137
  br i1 %8029, label %8030, label %8044

; <label>:8030                                    ; preds = %8026
  %8031 = shl i32 %8028, 2
  %8032 = add i32 %8031, 4
  %8033 = call i32 @dx.op.legacyF32ToF16(i32 130, float %8025)  ; LegacyF32ToF16(value)
  %8034 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %8035 = shl i32 %8034, 16
  %8036 = or i32 %8035, %8033
  %8037 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8037, i32 %8032, i32 undef, i32 %8036, i32 %8036, i32 %8036, i32 %8036, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8038 = add i32 %8031, 5
  %8039 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8039, i32 %8038, i32 undef, i32 1, i32 1, i32 1, i32 1, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8040 = add i32 %8031, 6
  %8041 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8041, i32 %8040, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8042 = add i32 %8031, 7
  %8043 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8043, i32 %8042, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %8044

; <label>:8044                                    ; preds = %8030, %8026, %8024
  %8045 = fadd fast float %8025, %7956
  br i1 %7929, label %8064, label %8046

; <label>:8046                                    ; preds = %8044
  %8047 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %8048 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %8047, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %8049 = icmp ult i32 %8048, %137
  br i1 %8049, label %8050, label %8064

; <label>:8050                                    ; preds = %8046
  %8051 = shl i32 %8048, 2
  %8052 = add i32 %8051, 4
  %8053 = call i32 @dx.op.legacyF32ToF16(i32 130, float %8045)  ; LegacyF32ToF16(value)
  %8054 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %8055 = shl i32 %8054, 16
  %8056 = or i32 %8055, %8053
  %8057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8057, i32 %8052, i32 undef, i32 %8056, i32 %8056, i32 %8056, i32 %8056, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8058 = add i32 %8051, 5
  %8059 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8059, i32 %8058, i32 undef, i32 0, i32 0, i32 0, i32 0, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8060 = add i32 %8051, 6
  %8061 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8061, i32 %8060, i32 undef, i32 -253, i32 -253, i32 -253, i32 -253, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8062 = add i32 %8051, 7
  %8063 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8063, i32 %8062, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %8064

; <label>:8064                                    ; preds = %8050, %8046, %8044
  %8065 = fadd fast float %8045, %7956
  %8066 = bitcast float %7911 to i32
  br i1 %7929, label %8085, label %8067

; <label>:8067                                    ; preds = %8064
  %8068 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %8069 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %8068, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %8070 = icmp ult i32 %8069, %137
  br i1 %8070, label %8071, label %8085

; <label>:8071                                    ; preds = %8067
  %8072 = shl i32 %8069, 2
  %8073 = add i32 %8072, 4
  %8074 = call i32 @dx.op.legacyF32ToF16(i32 130, float %8065)  ; LegacyF32ToF16(value)
  %8075 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %8076 = shl i32 %8075, 16
  %8077 = or i32 %8076, %8074
  %8078 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8078, i32 %8073, i32 undef, i32 %8077, i32 %8077, i32 %8077, i32 %8077, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8079 = add i32 %8072, 5
  %8080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8080, i32 %8079, i32 undef, i32 %8066, i32 %8066, i32 %8066, i32 %8066, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8081 = add i32 %8072, 6
  %8082 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8082, i32 %8081, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8083 = add i32 %8072, 7
  %8084 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8084, i32 %8083, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %8085

; <label>:8085                                    ; preds = %8071, %8067, %8064
  %8086 = fadd fast float %8065, %7956
  %8087 = bitcast float %7912 to i32
  br i1 %7929, label %8106, label %8088

; <label>:8088                                    ; preds = %8085
  %8089 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %8090 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %8089, i32 0, i32 2, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %8091 = icmp ult i32 %8090, %137
  br i1 %8091, label %8092, label %8106

; <label>:8092                                    ; preds = %8088
  %8093 = shl i32 %8090, 2
  %8094 = add i32 %8093, 4
  %8095 = call i32 @dx.op.legacyF32ToF16(i32 130, float %8086)  ; LegacyF32ToF16(value)
  %8096 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7924)  ; LegacyF32ToF16(value)
  %8097 = shl i32 %8096, 16
  %8098 = or i32 %8097, %8095
  %8099 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8099, i32 %8094, i32 undef, i32 %8098, i32 %8098, i32 %8098, i32 %8098, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8100 = add i32 %8093, 5
  %8101 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8101, i32 %8100, i32 undef, i32 %8087, i32 %8087, i32 %8087, i32 %8087, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8102 = add i32 %8093, 6
  %8103 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8103, i32 %8102, i32 undef, i32 -255, i32 -255, i32 -255, i32 -255, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %8104 = add i32 %8093, 7
  %8105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %8105, i32 %8104, i32 undef, i32 5, i32 5, i32 5, i32 5, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %8106

; <label>:8106                                    ; preds = %8092, %8088, %8085
  %8107 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %8108 = extractvalue %dx.types.CBufRet.i32 %8107, 2
  %8109 = icmp eq i32 %8108, 2
  br i1 %8109, label %8110, label %9179

; <label>:8110                                    ; preds = %8106
  %8111 = icmp eq i32 %7856, 4095
  br i1 %8111, label %9108, label %8112

; <label>:8112                                    ; preds = %8110
  %8113 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %8114 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8113, i32 %7860, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8115 = extractvalue %dx.types.ResRet.f32 %8114, 2
  %8116 = add nuw nsw i32 %7859, 4
  %8117 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8113, i32 %8116, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8118 = extractvalue %dx.types.ResRet.f32 %8117, 0
  %8119 = extractvalue %dx.types.ResRet.f32 %8117, 1
  %8120 = extractvalue %dx.types.ResRet.f32 %8117, 2
  %8121 = add nuw nsw i32 %7859, 3
  %8122 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8113, i32 %8121, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8123 = extractvalue %dx.types.ResRet.f32 %8122, 2
  %8124 = extractvalue %dx.types.ResRet.f32 %8122, 3
  %8125 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8113, i32 %7864, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8126 = extractvalue %dx.types.ResRet.f32 %8125, 0
  %8127 = extractvalue %dx.types.ResRet.f32 %8125, 1
  %8128 = extractvalue %dx.types.ResRet.f32 %8125, 2
  %8129 = extractvalue %dx.types.ResRet.f32 %8125, 3
  %8130 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8113, i32 %7859, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8131 = extractvalue %dx.types.ResRet.f32 %8130, 0
  %8132 = extractvalue %dx.types.ResRet.f32 %8130, 1
  %8133 = extractvalue %dx.types.ResRet.f32 %8130, 2
  %8134 = bitcast float %8129 to i32
  %8135 = and i32 %8134, 196608
  %8136 = bitcast float %8123 to i32
  %8137 = and i32 %8136, 65535
  %8138 = call float @dx.op.legacyF16ToF32(i32 131, i32 %8137)  ; LegacyF16ToF32(value)
  %8139 = fsub fast float -0.000000e+00, %8138
  %8140 = bitcast float %8124 to i32
  %8141 = call float @dx.op.legacyF16ToF32(i32 131, i32 %8140)  ; LegacyF16ToF32(value)
  %8142 = fsub fast float -0.000000e+00, %8141
  %8143 = icmp eq i32 %8135, 196608
  %8144 = bitcast float %8115 to i32
  %8145 = and i32 %8144, 65535
  %8146 = call float @dx.op.legacyF16ToF32(i32 131, i32 %8145)  ; LegacyF16ToF32(value)
  %8147 = lshr i32 %8144, 16
  %8148 = and i32 %8147, 1023
  %8149 = uitofp i32 %8148 to float
  %8150 = fmul fast float %8149, 0x3F50040100000000
  %8151 = fsub fast float %8131, %387
  %8152 = fsub fast float %8132, %391
  %8153 = fsub fast float %8133, %395
  br i1 %8143, label %8154, label %8473

; <label>:8154                                    ; preds = %8112
  %8155 = fmul fast float %8128, %8119
  %8156 = fmul fast float %8127, %8120
  %8157 = fsub fast float %8155, %8156
  %8158 = fmul fast float %8126, %8120
  %8159 = fmul fast float %8128, %8118
  %8160 = fsub fast float %8158, %8159
  %8161 = fmul fast float %8127, %8118
  %8162 = fmul fast float %8126, %8119
  %8163 = fsub fast float %8161, %8162
  %8164 = fcmp fast ogt float %8150, 0x3FA1EB8520000000
  br i1 %8164, label %8165, label %8260

; <label>:8165                                    ; preds = %8154
  %8166 = fmul fast float %8151, %8157
  %8167 = call float @dx.op.tertiary.f32(i32 46, float %8160, float %8152, float %8166)  ; FMad(a,b,c)
  %8168 = call float @dx.op.tertiary.f32(i32 46, float %8163, float %8153, float %8167)  ; FMad(a,b,c)
  %8169 = fmul fast float %8151, %8118
  %8170 = call float @dx.op.tertiary.f32(i32 46, float %8119, float %8152, float %8169)  ; FMad(a,b,c)
  %8171 = call float @dx.op.tertiary.f32(i32 46, float %8120, float %8153, float %8170)  ; FMad(a,b,c)
  %8172 = fmul fast float %8151, %8126
  %8173 = call float @dx.op.tertiary.f32(i32 46, float %8127, float %8152, float %8172)  ; FMad(a,b,c)
  %8174 = call float @dx.op.tertiary.f32(i32 46, float %8128, float %8153, float %8173)  ; FMad(a,b,c)
  %8175 = fmul fast float %8150, %8150
  %8176 = fsub fast float 1.000000e+00, %8175
  %8177 = call float @dx.op.unary.f32(i32 24, float %8176)  ; Sqrt(value)
  %8178 = fmul fast float %8146, %8150
  %8179 = call float @dx.op.binary.f32(i32 36, float %8174, float %8178)  ; FMin(a,b)
  %8180 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %8178)  ; FMax(a,b)
  %8181 = fdiv fast float %8179, %8180
  %8182 = fmul fast float %8177, %8146
  %8183 = fmul fast float %8182, %8181
  %8184 = fcmp fast ogt float %8168, 0.000000e+00
  %8185 = fcmp fast ogt float %8171, 0.000000e+00
  %8186 = fcmp fast olt float %8168, 0.000000e+00
  %8187 = fcmp fast olt float %8171, 0.000000e+00
  %8188 = zext i1 %8184 to i32
  %8189 = zext i1 %8185 to i32
  %8190 = zext i1 %8186 to i32
  %8191 = zext i1 %8187 to i32
  %8192 = sub nsw i32 %8188, %8190
  %8193 = sub nsw i32 %8189, %8191
  %8194 = sitofp i32 %8192 to float
  %8195 = sitofp i32 %8193 to float
  %8196 = fadd fast float %8183, %8138
  %8197 = fadd fast float %8183, %8141
  %8198 = call float @dx.op.unary.f32(i32 6, float %8168)  ; FAbs(value)
  %8199 = call float @dx.op.unary.f32(i32 6, float %8171)  ; FAbs(value)
  %8200 = call float @dx.op.binary.f32(i32 35, float %8198, float %8196)  ; FMax(a,b)
  %8201 = call float @dx.op.binary.f32(i32 35, float %8199, float %8197)  ; FMax(a,b)
  %8202 = fsub fast float %8139, %8183
  %8203 = fadd fast float %8202, %8200
  %8204 = fmul fast float %8203, %8194
  %8205 = fsub fast float %8142, %8183
  %8206 = fadd fast float %8205, %8201
  %8207 = fmul fast float %8206, %8195
  %8208 = fsub fast float %8174, %8179
  %8209 = call float @dx.op.binary.f32(i32 35, float %8208, float 0x3F50624DE0000000)  ; FMax(a,b)
  %8210 = call float @dx.op.unary.f32(i32 6, float %8204)  ; FAbs(value)
  %8211 = call float @dx.op.unary.f32(i32 6, float %8207)  ; FAbs(value)
  %8212 = fdiv fast float %8210, %8209
  %8213 = fdiv fast float %8211, %8209
  %8214 = fmul fast float %8212, %8179
  %8215 = fmul fast float %8213, %8179
  %8216 = fsub fast float %8214, %8183
  %8217 = fsub fast float %8215, %8183
  %8218 = fsub fast float -0.000000e+00, %8194
  %8219 = fsub fast float -0.000000e+00, %8195
  %8220 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %8218)  ; FMax(a,b)
  %8221 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %8219)  ; FMax(a,b)
  %8222 = fmul fast float %8216, %8220
  %8223 = fmul fast float %8217, %8221
  %8224 = fsub fast float %8222, %8138
  %8225 = fsub fast float %8223, %8141
  %8226 = call float @dx.op.binary.f32(i32 35, float %8224, float %8139)  ; FMax(a,b)
  %8227 = call float @dx.op.binary.f32(i32 35, float %8225, float %8142)  ; FMax(a,b)
  %8228 = call float @dx.op.binary.f32(i32 36, float %8226, float %8138)  ; FMin(a,b)
  %8229 = call float @dx.op.binary.f32(i32 36, float %8227, float %8141)  ; FMin(a,b)
  %8230 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %8194)  ; FMax(a,b)
  %8231 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %8195)  ; FMax(a,b)
  %8232 = fmul fast float %8230, %8216
  %8233 = fmul fast float %8231, %8217
  %8234 = fsub fast float %8138, %8232
  %8235 = fsub fast float %8141, %8233
  %8236 = call float @dx.op.binary.f32(i32 35, float %8234, float %8139)  ; FMax(a,b)
  %8237 = call float @dx.op.binary.f32(i32 35, float %8235, float %8142)  ; FMax(a,b)
  %8238 = call float @dx.op.binary.f32(i32 36, float %8236, float %8138)  ; FMin(a,b)
  %8239 = call float @dx.op.binary.f32(i32 36, float %8237, float %8141)  ; FMin(a,b)
  %8240 = fadd fast float %8238, %8228
  %8241 = fadd fast float %8239, %8229
  %8242 = fmul fast float %8240, 5.000000e-01
  %8243 = fmul fast float %8241, 5.000000e-01
  %8244 = fsub fast float %8238, %8228
  %8245 = fsub fast float %8239, %8229
  %8246 = fmul fast float %8244, 5.000000e-01
  %8247 = fmul fast float %8245, 5.000000e-01
  %8248 = fmul fast float %8242, %8157
  %8249 = fmul fast float %8242, %8160
  %8250 = fmul fast float %8242, %8163
  %8251 = fsub fast float %8151, %8248
  %8252 = fsub fast float %8152, %8249
  %8253 = fsub fast float %8153, %8250
  %8254 = fmul fast float %8243, %8118
  %8255 = fmul fast float %8243, %8119
  %8256 = fmul fast float %8243, %8120
  %8257 = fsub fast float %8251, %8254
  %8258 = fsub fast float %8252, %8255
  %8259 = fsub fast float %8253, %8256
  br label %8260

; <label>:8260                                    ; preds = %8165, %8154
  %8261 = phi float [ %8257, %8165 ], [ %8151, %8154 ]
  %8262 = phi float [ %8258, %8165 ], [ %8152, %8154 ]
  %8263 = phi float [ %8259, %8165 ], [ %8153, %8154 ]
  %8264 = phi float [ %8246, %8165 ], [ %8138, %8154 ]
  %8265 = phi float [ %8247, %8165 ], [ %8141, %8154 ]
  %8266 = fmul fast float %8261, %8157
  %8267 = call float @dx.op.tertiary.f32(i32 46, float %8160, float %8262, float %8266)  ; FMad(a,b,c)
  %8268 = call float @dx.op.tertiary.f32(i32 46, float %8163, float %8263, float %8267)  ; FMad(a,b,c)
  %8269 = fmul fast float %8261, %8118
  %8270 = call float @dx.op.tertiary.f32(i32 46, float %8119, float %8262, float %8269)  ; FMad(a,b,c)
  %8271 = call float @dx.op.tertiary.f32(i32 46, float %8120, float %8263, float %8270)  ; FMad(a,b,c)
  %8272 = fmul fast float %8261, %8126
  %8273 = call float @dx.op.tertiary.f32(i32 46, float %8127, float %8262, float %8272)  ; FMad(a,b,c)
  %8274 = call float @dx.op.tertiary.f32(i32 46, float %8128, float %8263, float %8273)  ; FMad(a,b,c)
  %8275 = fsub fast float %8268, %8264
  %8276 = fadd fast float %8268, %8264
  %8277 = fsub fast float %8271, %8265
  %8278 = fadd fast float %8271, %8265
  %8279 = call float @dx.op.unary.f32(i32 6, float %8274)  ; FAbs(value)
  %8280 = fsub fast float -0.000000e+00, %8279
  %8281 = fcmp fast ogt float %8274, 0.000000e+00
  %8282 = select i1 %8281, float -1.000000e+00, float 1.000000e+00
  %8283 = fmul fast float %8282, %8126
  %8284 = fmul fast float %8282, %8127
  %8285 = fmul fast float %8282, %8128
  %8286 = fmul fast float %8274, %8274
  %8287 = fmul fast float %8277, %8277
  %8288 = fadd fast float %8286, %8287
  %8289 = call float @dx.op.unary.f32(i32 25, float %8288)  ; Rsqrt(value)
  %8290 = fmul fast float %8289, %8277
  %8291 = fsub fast float -0.000000e+00, %8290
  %8292 = fmul fast float %8276, %8276
  %8293 = fadd fast float %8286, %8292
  %8294 = call float @dx.op.unary.f32(i32 25, float %8293)  ; Rsqrt(value)
  %8295 = fmul fast float %8294, %8276
  %8296 = fmul fast float %8278, %8278
  %8297 = fadd fast float %8286, %8296
  %8298 = call float @dx.op.unary.f32(i32 25, float %8297)  ; Rsqrt(value)
  %8299 = fmul fast float %8298, %8278
  %8300 = fmul fast float %8275, %8275
  %8301 = fadd fast float %8286, %8300
  %8302 = call float @dx.op.unary.f32(i32 25, float %8301)  ; Rsqrt(value)
  %8303 = fmul fast float %8302, %8275
  %8304 = fmul fast float %8295, %8291
  %8305 = call float @dx.op.unary.f32(i32 6, float %8304)  ; FAbs(value)
  %8306 = call float @dx.op.unary.f32(i32 7, float %8305)  ; Saturate(value)
  %8307 = fcmp fast olt float %8306, 5.000000e-01
  %8308 = fmul fast float %8306, %8306
  %8309 = fmul fast float %8306, 5.000000e-01
  %8310 = fsub fast float 5.000000e-01, %8309
  %8311 = select i1 %8307, float %8308, float %8310
  br i1 %8307, label %8314, label %8312

; <label>:8312                                    ; preds = %8260
  %8313 = call float @dx.op.unary.f32(i32 24, float %8311)  ; Sqrt(value)
  br label %8314

; <label>:8314                                    ; preds = %8312, %8260
  %8315 = phi float [ %8313, %8312 ], [ %8306, %8260 ]
  %8316 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8311, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8317 = call float @dx.op.tertiary.f32(i32 46, float %8316, float %8311, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8318 = fmul fast float %8317, %8315
  %8319 = fmul fast float %8318, 2.000000e+00
  %8320 = fsub fast float 0x3FF921FB60000000, %8319
  %8321 = select i1 %8307, float %8318, float %8320
  %8322 = bitcast float %8321 to i32
  %8323 = bitcast float %8304 to i32
  %8324 = and i32 %8323, -2147483648
  %8325 = xor i32 %8322, %8324
  %8326 = bitcast i32 %8325 to float
  %8327 = fmul fast float %8299, %8295
  %8328 = call float @dx.op.unary.f32(i32 6, float %8327)  ; FAbs(value)
  %8329 = call float @dx.op.unary.f32(i32 7, float %8328)  ; Saturate(value)
  %8330 = fcmp fast olt float %8329, 5.000000e-01
  %8331 = fmul fast float %8329, %8329
  %8332 = fmul fast float %8329, 5.000000e-01
  %8333 = fsub fast float 5.000000e-01, %8332
  %8334 = select i1 %8330, float %8331, float %8333
  br i1 %8330, label %8337, label %8335

; <label>:8335                                    ; preds = %8314
  %8336 = call float @dx.op.unary.f32(i32 24, float %8334)  ; Sqrt(value)
  br label %8337

; <label>:8337                                    ; preds = %8335, %8314
  %8338 = phi float [ %8336, %8335 ], [ %8329, %8314 ]
  %8339 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8334, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8340 = call float @dx.op.tertiary.f32(i32 46, float %8339, float %8334, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8341 = fmul fast float %8340, %8338
  %8342 = fmul fast float %8341, 2.000000e+00
  %8343 = fsub fast float 0x3FF921FB60000000, %8342
  %8344 = select i1 %8330, float %8341, float %8343
  %8345 = bitcast float %8344 to i32
  %8346 = bitcast float %8327 to i32
  %8347 = and i32 %8346, -2147483648
  %8348 = xor i32 %8345, %8347
  %8349 = bitcast i32 %8348 to float
  %8350 = fadd fast float %8349, %8326
  %8351 = fmul fast float %8299, %8303
  %8352 = fsub fast float -0.000000e+00, %8351
  %8353 = call float @dx.op.unary.f32(i32 6, float %8352)  ; FAbs(value)
  %8354 = call float @dx.op.unary.f32(i32 7, float %8353)  ; Saturate(value)
  %8355 = fcmp fast olt float %8354, 5.000000e-01
  %8356 = fmul fast float %8354, %8354
  %8357 = fmul fast float %8354, 5.000000e-01
  %8358 = fsub fast float 5.000000e-01, %8357
  %8359 = select i1 %8355, float %8356, float %8358
  br i1 %8355, label %8362, label %8360

; <label>:8360                                    ; preds = %8337
  %8361 = call float @dx.op.unary.f32(i32 24, float %8359)  ; Sqrt(value)
  br label %8362

; <label>:8362                                    ; preds = %8360, %8337
  %8363 = phi float [ %8361, %8360 ], [ %8354, %8337 ]
  %8364 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8359, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8365 = call float @dx.op.tertiary.f32(i32 46, float %8364, float %8359, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8366 = fmul fast float %8365, %8363
  %8367 = fmul fast float %8366, 2.000000e+00
  %8368 = fsub fast float 0x3FF921FB60000000, %8367
  %8369 = select i1 %8355, float %8366, float %8368
  %8370 = bitcast float %8369 to i32
  %8371 = bitcast float %8352 to i32
  %8372 = and i32 %8371, -2147483648
  %8373 = xor i32 %8370, %8372
  %8374 = bitcast i32 %8373 to float
  %8375 = fmul fast float %8303, %8290
  %8376 = call float @dx.op.unary.f32(i32 6, float %8375)  ; FAbs(value)
  %8377 = call float @dx.op.unary.f32(i32 7, float %8376)  ; Saturate(value)
  %8378 = fcmp fast olt float %8377, 5.000000e-01
  %8379 = fmul fast float %8377, %8377
  %8380 = fmul fast float %8377, 5.000000e-01
  %8381 = fsub fast float 5.000000e-01, %8380
  %8382 = select i1 %8378, float %8379, float %8381
  br i1 %8378, label %8385, label %8383

; <label>:8383                                    ; preds = %8362
  %8384 = call float @dx.op.unary.f32(i32 24, float %8382)  ; Sqrt(value)
  br label %8385

; <label>:8385                                    ; preds = %8383, %8362
  %8386 = phi float [ %8384, %8383 ], [ %8377, %8362 ]
  %8387 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8382, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8388 = call float @dx.op.tertiary.f32(i32 46, float %8387, float %8382, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8389 = fmul fast float %8388, %8386
  %8390 = fmul fast float %8389, 2.000000e+00
  %8391 = fsub fast float 0x3FF921FB60000000, %8390
  %8392 = select i1 %8378, float %8389, float %8391
  %8393 = bitcast float %8392 to i32
  %8394 = bitcast float %8375 to i32
  %8395 = and i32 %8394, -2147483648
  %8396 = xor i32 %8393, %8395
  %8397 = bitcast i32 %8396 to float
  %8398 = fadd fast float %8397, %8374
  %8399 = fadd fast float %8350, %8398
  %8400 = fcmp fast ogt float %8399, 0x3F50624DE0000000
  %8401 = fmul fast float %8279, %8279
  br i1 %8400, label %8402, label %8445

; <label>:8402                                    ; preds = %8385
  %8403 = fmul fast float %8399, %7911
  %8404 = fsub fast float %8403, %8398
  %8405 = call float @dx.op.unary.f32(i32 12, float %8404)  ; Cos(value)
  %8406 = fmul fast float %8405, %8291
  %8407 = fadd fast float %8406, %8299
  %8408 = call float @dx.op.unary.f32(i32 13, float %8404)  ; Sin(value)
  %8409 = fdiv fast float %8407, %8408
  %8410 = fmul fast float %8409, %8409
  %8411 = fmul fast float %8290, %8290
  %8412 = fadd fast float %8410, %8411
  %8413 = call float @dx.op.unary.f32(i32 25, float %8412)  ; Rsqrt(value)
  %8414 = fcmp fast ogt float %8409, 0.000000e+00
  %8415 = select i1 %8414, float 1.000000e+00, float -1.000000e+00
  %8416 = fmul fast float %8415, %8413
  %8417 = call float @dx.op.binary.f32(i32 35, float %8416, float -1.000000e+00)  ; FMax(a,b)
  %8418 = call float @dx.op.binary.f32(i32 36, float %8417, float 1.000000e+00)  ; FMin(a,b)
  %8419 = fmul fast float %8418, %8418
  %8420 = fsub fast float 1.000000e+00, %8419
  %8421 = call float @dx.op.unary.f32(i32 25, float %8420)  ; Rsqrt(value)
  %8422 = fmul fast float %8279, %8418
  %8423 = fmul fast float %8422, %8421
  %8424 = call float @dx.op.binary.f32(i32 35, float %8423, float %8275)  ; FMax(a,b)
  %8425 = call float @dx.op.binary.f32(i32 36, float %8424, float %8276)  ; FMin(a,b)
  %8426 = fmul fast float %8425, %8425
  %8427 = fadd fast float %8426, %8401
  %8428 = fadd fast float %8427, %8287
  %8429 = call float @dx.op.unary.f32(i32 25, float %8428)  ; Rsqrt(value)
  %8430 = fmul fast float %8429, %8277
  %8431 = fadd fast float %8427, %8296
  %8432 = call float @dx.op.unary.f32(i32 25, float %8431)  ; Rsqrt(value)
  %8433 = fmul fast float %8432, %8278
  %8434 = fsub fast float %8433, %8430
  %8435 = fmul fast float %8434, %7912
  %8436 = fadd fast float %8435, %8430
  %8437 = fmul fast float %8436, %8436
  %8438 = fsub fast float 1.000000e+00, %8437
  %8439 = fcmp fast ogt float %8438, 0.000000e+00
  br i1 %8439, label %8440, label %8452

; <label>:8440                                    ; preds = %8402
  %8441 = fmul fast float %8436, %8427
  %8442 = fmul fast float %8438, %8427
  %8443 = call float @dx.op.unary.f32(i32 25, float %8442)  ; Rsqrt(value)
  %8444 = fmul fast float %8441, %8443
  br label %8452

; <label>:8445                                    ; preds = %8385
  %8446 = fmul fast float %7911, 2.000000e+00
  %8447 = fmul fast float %8446, %8264
  %8448 = fadd fast float %8275, %8447
  %8449 = fmul fast float %7912, 2.000000e+00
  %8450 = fmul fast float %8449, %8265
  %8451 = fadd fast float %8277, %8450
  br label %8452

; <label>:8452                                    ; preds = %8445, %8440, %8402
  %8453 = phi float [ %8448, %8445 ], [ %8425, %8402 ], [ %8425, %8440 ]
  %8454 = phi float [ %8451, %8445 ], [ %8278, %8402 ], [ %8444, %8440 ]
  %8455 = fmul fast float %8453, %8157
  %8456 = call float @dx.op.tertiary.f32(i32 46, float %8454, float %8118, float %8455)  ; FMad(a,b,c)
  %8457 = call float @dx.op.tertiary.f32(i32 46, float %8280, float %8283, float %8456)  ; FMad(a,b,c)
  %8458 = fmul fast float %8453, %8160
  %8459 = call float @dx.op.tertiary.f32(i32 46, float %8454, float %8119, float %8458)  ; FMad(a,b,c)
  %8460 = call float @dx.op.tertiary.f32(i32 46, float %8280, float %8284, float %8459)  ; FMad(a,b,c)
  %8461 = fmul fast float %8453, %8163
  %8462 = call float @dx.op.tertiary.f32(i32 46, float %8454, float %8120, float %8461)  ; FMad(a,b,c)
  %8463 = call float @dx.op.tertiary.f32(i32 46, float %8280, float %8285, float %8462)  ; FMad(a,b,c)
  %8464 = fmul fast float %8453, %8453
  %8465 = fmul fast float %8454, %8454
  %8466 = fadd fast float %8464, %8401
  %8467 = fadd fast float %8466, %8465
  %8468 = call float @dx.op.unary.f32(i32 25, float %8467)  ; Rsqrt(value)
  %8469 = fmul fast float %8468, %8467
  %8470 = fmul fast float %8468, %8457
  %8471 = fmul fast float %8468, %8460
  %8472 = fmul fast float %8468, %8463
  br label %9108

; <label>:8473                                    ; preds = %8112
  %8474 = fcmp fast ogt float %8141, 0.000000e+00
  br i1 %8474, label %8475, label %9001

; <label>:8475                                    ; preds = %8473
  %8476 = call float @dx.op.binary.f32(i32 35, float %8138, float 0x3F847AE140000000)  ; FMax(a,b)
  %8477 = fmul fast float %8476, %8476
  %8478 = call float @dx.op.dot3.f32(i32 55, float %8118, float %8119, float %8120, float %8151, float %8152, float %8153)  ; Dot3(ax,ay,az,bx,by,bz)
  %8479 = fmul fast float %8478, %8118
  %8480 = fmul fast float %8478, %8119
  %8481 = fmul fast float %8478, %8120
  %8482 = fsub fast float %8151, %8479
  %8483 = fsub fast float %8152, %8480
  %8484 = fsub fast float %8153, %8481
  %8485 = call float @dx.op.dot3.f32(i32 55, float %8482, float %8483, float %8484, float %8482, float %8483, float %8484)  ; Dot3(ax,ay,az,bx,by,bz)
  %8486 = fcmp fast ugt float %8485, %8477
  br i1 %8486, label %8522, label %8487

; <label>:8487                                    ; preds = %8475
  %8488 = fcmp fast ogt float %8478, 0.000000e+00
  %8489 = fcmp fast olt float %8478, 0.000000e+00
  %8490 = zext i1 %8488 to i32
  %8491 = zext i1 %8489 to i32
  %8492 = sub nsw i32 %8490, %8491
  %8493 = sitofp i32 %8492 to float
  %8494 = fmul fast float %8118, 5.000000e-01
  %8495 = fmul fast float %8494, %8141
  %8496 = fmul fast float %8495, %8493
  %8497 = fmul fast float %8119, 5.000000e-01
  %8498 = fmul fast float %8497, %8141
  %8499 = fmul fast float %8498, %8493
  %8500 = fmul fast float %8120, 5.000000e-01
  %8501 = fmul fast float %8500, %8141
  %8502 = fmul fast float %8501, %8493
  %8503 = fsub fast float %8151, %8496
  %8504 = fsub fast float %8152, %8499
  %8505 = fsub fast float %8153, %8502
  %8506 = call float @dx.op.dot3.f32(i32 55, float %8503, float %8504, float %8505, float %8503, float %8504, float %8505)  ; Dot3(ax,ay,az,bx,by,bz)
  %8507 = fdiv fast float %8477, %8506
  %8508 = call float @dx.op.unary.f32(i32 7, float %8507)  ; Saturate(value)
  %8509 = call float @dx.op.unary.f32(i32 25, float %8506)  ; Rsqrt(value)
  %8510 = fmul fast float %8509, %8503
  %8511 = fmul fast float %8509, %8504
  %8512 = fmul fast float %8509, %8505
  %8513 = fcmp fast olt float %8508, 0x3F847AE140000000
  br i1 %8513, label %8514, label %8518

; <label>:8514                                    ; preds = %8487
  %8515 = fmul fast float %8508, 1.250000e-01
  %8516 = fadd fast float %8515, 5.000000e-01
  %8517 = fmul fast float %8516, %8508
  br label %8800

; <label>:8518                                    ; preds = %8487
  %8519 = fsub fast float 1.000000e+00, %8508
  %8520 = call float @dx.op.unary.f32(i32 24, float %8519)  ; Sqrt(value)
  %8521 = fsub fast float 1.000000e+00, %8520
  br label %8800

; <label>:8522                                    ; preds = %8475
  %8523 = fsub fast float -0.000000e+00, %8482
  %8524 = fsub fast float -0.000000e+00, %8483
  %8525 = fsub fast float -0.000000e+00, %8484
  %8526 = call float @dx.op.dot3.f32(i32 55, float %8523, float %8524, float %8525, float %8523, float %8524, float %8525)  ; Dot3(ax,ay,az,bx,by,bz)
  %8527 = call float @dx.op.unary.f32(i32 25, float %8526)  ; Rsqrt(value)
  %8528 = fmul fast float %8527, %8523
  %8529 = fmul fast float %8527, %8524
  %8530 = fmul fast float %8527, %8525
  %8531 = fmul fast float %8529, %8120
  %8532 = fmul fast float %8528, %8120
  %8533 = fmul fast float %8530, %8118
  %8534 = fsub fast float %8532, %8533
  %8535 = fmul fast float %8528, %8119
  %8536 = call float @dx.op.unary.f32(i32 25, float %8485)  ; Rsqrt(value)
  %8537 = fmul fast float %8536, %8476
  %8538 = fmul fast float %8537, %8537
  %8539 = fsub fast float 1.000000e+00, %8538
  %8540 = call float @dx.op.unary.f32(i32 25, float %8539)  ; Rsqrt(value)
  br label %8541

; <label>:8541                                    ; preds = %8591, %8522
  %8542 = phi i32 [ 0, %8522 ], [ %8598, %8591 ]
  %8543 = icmp sgt i32 %8542, 0
  %8544 = select i1 %8543, float 5.000000e-01, float -5.000000e-01
  %8545 = fmul fast float %8544, %8141
  %8546 = fmul fast float %8545, %8118
  %8547 = fmul fast float %8545, %8119
  %8548 = fmul fast float %8545, %8120
  %8549 = fadd fast float %8546, %8151
  %8550 = fadd fast float %8547, %8152
  %8551 = fadd fast float %8548, %8153
  %8552 = call float @dx.op.dot3.f32(i32 55, float %8549, float %8550, float %8551, float %8549, float %8550, float %8551)  ; Dot3(ax,ay,az,bx,by,bz)
  %8553 = call float @dx.op.unary.f32(i32 25, float %8552)  ; Rsqrt(value)
  %8554 = fmul fast float %8553, %8476
  %8555 = call float @dx.op.unary.f32(i32 7, float %8554)  ; Saturate(value)
  %8556 = fmul fast float %8555, %8555
  %8557 = fcmp fast olt float %8556, 0x3F847AE140000000
  br i1 %8557, label %8558, label %8563

; <label>:8558                                    ; preds = %8541
  %8559 = fmul fast float %8556, 1.250000e-01
  %8560 = fadd fast float %8559, 5.000000e-01
  %8561 = fmul fast float %8560, %8556
  %8562 = fsub fast float 1.000000e+00, %8561
  br label %8566

; <label>:8563                                    ; preds = %8541
  %8564 = fsub fast float 1.000000e+00, %8556
  %8565 = call float @dx.op.unary.f32(i32 24, float %8564)  ; Sqrt(value)
  br label %8566

; <label>:8566                                    ; preds = %8563, %8558
  %8567 = phi float [ %8562, %8558 ], [ %8565, %8563 ]
  %8568 = call float @dx.op.dot3.f32(i32 55, float %8118, float %8119, float %8120, float %8549, float %8550, float %8551)  ; Dot3(ax,ay,az,bx,by,bz)
  %8569 = fmul fast float %8553, %8568
  %8570 = fsub fast float -0.000000e+00, %8569
  %8571 = fmul fast float %8545, %8570
  %8572 = fcmp fast ogt float %8571, 0.000000e+00
  %8573 = fcmp fast olt float %8571, 0.000000e+00
  %8574 = zext i1 %8572 to i32
  %8575 = zext i1 %8573 to i32
  %8576 = sub nsw i32 %8574, %8575
  %8577 = sitofp i32 %8576 to float
  %8578 = call float @dx.op.unary.f32(i32 6, float %8570)  ; FAbs(value)
  %8579 = call float @dx.op.unary.f32(i32 7, float %8578)  ; Saturate(value)
  %8580 = fmul fast float %8577, %8579
  %8581 = fmul fast float %8580, %8580
  %8582 = fcmp fast olt float %8581, 0x3F847AE140000000
  br i1 %8582, label %8583, label %8588

; <label>:8583                                    ; preds = %8566
  %8584 = fmul fast float %8581, 1.250000e-01
  %8585 = fadd fast float %8584, 5.000000e-01
  %8586 = fmul fast float %8585, %8581
  %8587 = fsub fast float 1.000000e+00, %8586
  br label %8591

; <label>:8588                                    ; preds = %8566
  %8589 = fsub fast float 1.000000e+00, %8581
  %8590 = call float @dx.op.unary.f32(i32 24, float %8589)  ; Sqrt(value)
  br label %8591

; <label>:8591                                    ; preds = %8588, %8583
  %8592 = phi float [ %8587, %8583 ], [ %8590, %8588 ]
  %8593 = fmul fast float %8592, %8567
  %8594 = fmul fast float %8580, %8555
  %8595 = fadd fast float %8593, %8594
  %8596 = fdiv fast float %8476, %8595
  %8597 = getelementptr inbounds [2 x float], [2 x float]* %42, i32 0, i32 %8542
  store float %8596, float* %8597, align 4, !tbaa !54, !noalias !139
  %8598 = add nuw nsw i32 %8542, 1
  %8599 = icmp eq i32 %8598, 2
  br i1 %8599, label %8600, label %8541

; <label>:8600                                    ; preds = %8591
  %8601 = fmul fast float %8530, %8119
  %8602 = fsub fast float %8601, %8531
  %8603 = fmul fast float %8529, %8118
  %8604 = fsub fast float %8603, %8535
  %8605 = fmul fast float %8540, %8476
  %8606 = getelementptr inbounds [2 x float], [2 x float]* %42, i32 0, i32 1
  %8607 = load float, float* %8606, align 4, !tbaa !54, !noalias !139
  %8608 = getelementptr inbounds [2 x float], [2 x float]* %42, i32 0, i32 0
  %8609 = load float, float* %8608, align 4, !tbaa !54, !noalias !139
  %8610 = fsub fast float %8607, %8609
  %8611 = fmul fast float %8610, 5.000000e-01
  %8612 = fmul fast float %8611, %8118
  %8613 = fmul fast float %8611, %8119
  %8614 = fmul fast float %8611, %8120
  %8615 = fadd fast float %8612, %8151
  %8616 = fadd fast float %8613, %8152
  %8617 = fadd fast float %8614, %8153
  %8618 = fadd fast float %8607, %8141
  %8619 = fadd fast float %8618, %8609
  %8620 = fmul fast float %8619, 5.000000e-01
  %8621 = fmul fast float %8620, %8118
  %8622 = fmul fast float %8620, %8119
  %8623 = fmul fast float %8620, %8120
  %8624 = fsub fast float %8615, %8621
  %8625 = fsub fast float %8616, %8622
  %8626 = fsub fast float %8617, %8623
  %8627 = fadd fast float %8615, %8621
  %8628 = fadd fast float %8616, %8622
  %8629 = fadd fast float %8617, %8623
  %8630 = call float @dx.op.dot3.f32(i32 55, float %8624, float %8625, float %8626, float %8624, float %8625, float %8626)  ; Dot3(ax,ay,az,bx,by,bz)
  %8631 = call float @dx.op.unary.f32(i32 25, float %8630)  ; Rsqrt(value)
  %8632 = call float @dx.op.dot3.f32(i32 55, float %8627, float %8628, float %8629, float %8627, float %8628, float %8629)  ; Dot3(ax,ay,az,bx,by,bz)
  %8633 = call float @dx.op.unary.f32(i32 25, float %8632)  ; Rsqrt(value)
  %8634 = fmul fast float %8615, %8602
  %8635 = call float @dx.op.tertiary.f32(i32 46, float %8534, float %8616, float %8634)  ; FMad(a,b,c)
  %8636 = call float @dx.op.tertiary.f32(i32 46, float %8604, float %8617, float %8635)  ; FMad(a,b,c)
  %8637 = fmul fast float %8615, %8118
  %8638 = call float @dx.op.tertiary.f32(i32 46, float %8119, float %8616, float %8637)  ; FMad(a,b,c)
  %8639 = call float @dx.op.tertiary.f32(i32 46, float %8120, float %8617, float %8638)  ; FMad(a,b,c)
  %8640 = fmul fast float %8615, %8528
  %8641 = call float @dx.op.tertiary.f32(i32 46, float %8529, float %8616, float %8640)  ; FMad(a,b,c)
  %8642 = call float @dx.op.tertiary.f32(i32 46, float %8530, float %8617, float %8641)  ; FMad(a,b,c)
  %8643 = fsub fast float %8636, %8605
  %8644 = fadd fast float %8636, %8605
  %8645 = fsub fast float %8639, %8620
  %8646 = fadd fast float %8639, %8620
  %8647 = call float @dx.op.unary.f32(i32 6, float %8642)  ; FAbs(value)
  %8648 = fsub fast float -0.000000e+00, %8647
  %8649 = fcmp fast ogt float %8642, 0.000000e+00
  %8650 = select i1 %8649, float -1.000000e+00, float 1.000000e+00
  %8651 = fmul fast float %8650, %8528
  %8652 = fmul fast float %8650, %8529
  %8653 = fmul fast float %8650, %8530
  %8654 = fmul fast float %8642, %8642
  %8655 = fmul fast float %8645, %8645
  %8656 = fadd fast float %8654, %8655
  %8657 = call float @dx.op.unary.f32(i32 25, float %8656)  ; Rsqrt(value)
  %8658 = fmul fast float %8657, %8645
  %8659 = fsub fast float -0.000000e+00, %8658
  %8660 = fmul fast float %8644, %8644
  %8661 = fadd fast float %8654, %8660
  %8662 = call float @dx.op.unary.f32(i32 25, float %8661)  ; Rsqrt(value)
  %8663 = fmul fast float %8662, %8644
  %8664 = fmul fast float %8646, %8646
  %8665 = fadd fast float %8654, %8664
  %8666 = call float @dx.op.unary.f32(i32 25, float %8665)  ; Rsqrt(value)
  %8667 = fmul fast float %8666, %8646
  %8668 = fmul fast float %8643, %8643
  %8669 = fadd fast float %8654, %8668
  %8670 = call float @dx.op.unary.f32(i32 25, float %8669)  ; Rsqrt(value)
  %8671 = fmul fast float %8670, %8643
  %8672 = fmul fast float %8663, %8659
  %8673 = call float @dx.op.unary.f32(i32 6, float %8672)  ; FAbs(value)
  %8674 = call float @dx.op.unary.f32(i32 7, float %8673)  ; Saturate(value)
  %8675 = fcmp fast olt float %8674, 5.000000e-01
  %8676 = fmul fast float %8674, %8674
  %8677 = fmul fast float %8674, 5.000000e-01
  %8678 = fsub fast float 5.000000e-01, %8677
  %8679 = select i1 %8675, float %8676, float %8678
  br i1 %8675, label %8682, label %8680

; <label>:8680                                    ; preds = %8600
  %8681 = call float @dx.op.unary.f32(i32 24, float %8679)  ; Sqrt(value)
  br label %8682

; <label>:8682                                    ; preds = %8680, %8600
  %8683 = phi float [ %8681, %8680 ], [ %8674, %8600 ]
  %8684 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8679, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8685 = call float @dx.op.tertiary.f32(i32 46, float %8684, float %8679, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8686 = fmul fast float %8685, %8683
  %8687 = fmul fast float %8686, 2.000000e+00
  %8688 = fsub fast float 0x3FF921FB60000000, %8687
  %8689 = select i1 %8675, float %8686, float %8688
  %8690 = bitcast float %8689 to i32
  %8691 = bitcast float %8672 to i32
  %8692 = and i32 %8691, -2147483648
  %8693 = xor i32 %8690, %8692
  %8694 = bitcast i32 %8693 to float
  %8695 = fmul fast float %8667, %8663
  %8696 = call float @dx.op.unary.f32(i32 6, float %8695)  ; FAbs(value)
  %8697 = call float @dx.op.unary.f32(i32 7, float %8696)  ; Saturate(value)
  %8698 = fcmp fast olt float %8697, 5.000000e-01
  %8699 = fmul fast float %8697, %8697
  %8700 = fmul fast float %8697, 5.000000e-01
  %8701 = fsub fast float 5.000000e-01, %8700
  %8702 = select i1 %8698, float %8699, float %8701
  br i1 %8698, label %8705, label %8703

; <label>:8703                                    ; preds = %8682
  %8704 = call float @dx.op.unary.f32(i32 24, float %8702)  ; Sqrt(value)
  br label %8705

; <label>:8705                                    ; preds = %8703, %8682
  %8706 = phi float [ %8704, %8703 ], [ %8697, %8682 ]
  %8707 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8702, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8708 = call float @dx.op.tertiary.f32(i32 46, float %8707, float %8702, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8709 = fmul fast float %8708, %8706
  %8710 = fmul fast float %8709, 2.000000e+00
  %8711 = fsub fast float 0x3FF921FB60000000, %8710
  %8712 = select i1 %8698, float %8709, float %8711
  %8713 = bitcast float %8712 to i32
  %8714 = bitcast float %8695 to i32
  %8715 = and i32 %8714, -2147483648
  %8716 = xor i32 %8713, %8715
  %8717 = bitcast i32 %8716 to float
  %8718 = fadd fast float %8717, %8694
  %8719 = fmul fast float %8667, %8671
  %8720 = fsub fast float -0.000000e+00, %8719
  %8721 = call float @dx.op.unary.f32(i32 6, float %8720)  ; FAbs(value)
  %8722 = call float @dx.op.unary.f32(i32 7, float %8721)  ; Saturate(value)
  %8723 = fcmp fast olt float %8722, 5.000000e-01
  %8724 = fmul fast float %8722, %8722
  %8725 = fmul fast float %8722, 5.000000e-01
  %8726 = fsub fast float 5.000000e-01, %8725
  %8727 = select i1 %8723, float %8724, float %8726
  br i1 %8723, label %8730, label %8728

; <label>:8728                                    ; preds = %8705
  %8729 = call float @dx.op.unary.f32(i32 24, float %8727)  ; Sqrt(value)
  br label %8730

; <label>:8730                                    ; preds = %8728, %8705
  %8731 = phi float [ %8729, %8728 ], [ %8722, %8705 ]
  %8732 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8727, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8733 = call float @dx.op.tertiary.f32(i32 46, float %8732, float %8727, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8734 = fmul fast float %8733, %8731
  %8735 = fmul fast float %8734, 2.000000e+00
  %8736 = fsub fast float 0x3FF921FB60000000, %8735
  %8737 = select i1 %8723, float %8734, float %8736
  %8738 = bitcast float %8737 to i32
  %8739 = bitcast float %8720 to i32
  %8740 = and i32 %8739, -2147483648
  %8741 = xor i32 %8738, %8740
  %8742 = bitcast i32 %8741 to float
  %8743 = fmul fast float %8671, %8658
  %8744 = call float @dx.op.unary.f32(i32 6, float %8743)  ; FAbs(value)
  %8745 = call float @dx.op.unary.f32(i32 7, float %8744)  ; Saturate(value)
  %8746 = fcmp fast olt float %8745, 5.000000e-01
  %8747 = fmul fast float %8745, %8745
  %8748 = fmul fast float %8745, 5.000000e-01
  %8749 = fsub fast float 5.000000e-01, %8748
  %8750 = select i1 %8746, float %8747, float %8749
  br i1 %8746, label %8753, label %8751

; <label>:8751                                    ; preds = %8730
  %8752 = call float @dx.op.unary.f32(i32 24, float %8750)  ; Sqrt(value)
  br label %8753

; <label>:8753                                    ; preds = %8751, %8730
  %8754 = phi float [ %8752, %8751 ], [ %8745, %8730 ]
  %8755 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB9AEC4A0000000, float %8750, float 0x3FC4E69F00000000)  ; FMad(a,b,c)
  %8756 = call float @dx.op.tertiary.f32(i32 46, float %8755, float %8750, float 0x3FF0007360000000)  ; FMad(a,b,c)
  %8757 = fmul fast float %8756, %8754
  %8758 = fmul fast float %8757, 2.000000e+00
  %8759 = fsub fast float 0x3FF921FB60000000, %8758
  %8760 = select i1 %8746, float %8757, float %8759
  %8761 = bitcast float %8760 to i32
  %8762 = bitcast float %8743 to i32
  %8763 = and i32 %8762, -2147483648
  %8764 = xor i32 %8761, %8763
  %8765 = bitcast i32 %8764 to float
  %8766 = fadd fast float %8765, %8742
  %8767 = fadd fast float %8718, %8766
  %8768 = fadd fast float %8633, %8631
  %8769 = fdiv fast float %8633, %8768
  %8770 = call float @dx.op.unary.f32(i32 7, float %8769)  ; Saturate(value)
  %8771 = fmul fast float %8619, %8118
  %8772 = fmul fast float %8619, %8119
  %8773 = fmul fast float %8619, %8120
  %8774 = fmul fast float %8771, %8770
  %8775 = fmul fast float %8772, %8770
  %8776 = fmul fast float %8773, %8770
  %8777 = fadd fast float %8774, %8624
  %8778 = fadd fast float %8775, %8625
  %8779 = fadd fast float %8776, %8626
  %8780 = call float @dx.op.dot3.f32(i32 55, float %8777, float %8778, float %8779, float %8777, float %8778, float %8779)  ; Dot3(ax,ay,az,bx,by,bz)
  %8781 = call float @dx.op.unary.f32(i32 25, float %8780)  ; Rsqrt(value)
  %8782 = fmul fast float %8777, %8781
  %8783 = fmul fast float %8778, %8781
  %8784 = fmul fast float %8779, %8781
  %8785 = call float @dx.op.dot3.f32(i32 55, float %8624, float %8625, float %8626, float %8627, float %8628, float %8629)  ; Dot3(ax,ay,az,bx,by,bz)
  %8786 = fmul fast float %8631, 5.000000e-01
  %8787 = fmul fast float %8786, %8633
  %8788 = fmul fast float %8787, %8785
  %8789 = fsub fast float 5.000000e-01, %8788
  %8790 = call float @dx.op.unary.f32(i32 7, float %8789)  ; Saturate(value)
  %8791 = fcmp fast olt float %8790, 0x3F847AE140000000
  br i1 %8791, label %8792, label %8796

; <label>:8792                                    ; preds = %8753
  %8793 = fmul fast float %8790, 1.250000e-01
  %8794 = fadd fast float %8793, 5.000000e-01
  %8795 = fmul fast float %8794, %8790
  br label %8800

; <label>:8796                                    ; preds = %8753
  %8797 = fsub fast float 1.000000e+00, %8790
  %8798 = call float @dx.op.unary.f32(i32 24, float %8797)  ; Sqrt(value)
  %8799 = fsub fast float 1.000000e+00, %8798
  br label %8800

; <label>:8800                                    ; preds = %8796, %8792, %8518, %8514
  %8801 = phi float [ %8795, %8792 ], [ %8799, %8796 ], [ %8517, %8514 ], [ %8521, %8518 ]
  %8802 = phi float [ %8602, %8792 ], [ %8602, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8803 = phi float [ %8534, %8792 ], [ %8534, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8804 = phi float [ %8604, %8792 ], [ %8604, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8805 = phi float [ %8118, %8792 ], [ %8118, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8806 = phi float [ %8119, %8792 ], [ %8119, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8807 = phi float [ %8120, %8792 ], [ %8120, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8808 = phi float [ %8651, %8792 ], [ %8651, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8809 = phi float [ %8652, %8792 ], [ %8652, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8810 = phi float [ %8653, %8792 ], [ %8653, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8811 = phi float [ %8643, %8792 ], [ %8643, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8812 = phi float [ %8644, %8792 ], [ %8644, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8813 = phi float [ %8645, %8792 ], [ %8645, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8814 = phi float [ %8646, %8792 ], [ %8646, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8815 = phi float [ %8648, %8792 ], [ %8648, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8816 = phi float [ %8659, %8792 ], [ %8659, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8817 = phi float [ %8667, %8792 ], [ %8667, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8818 = phi float [ %8766, %8792 ], [ %8766, %8796 ], [ 0.000000e+00, %8514 ], [ 0.000000e+00, %8518 ]
  %8819 = phi float [ %8767, %8792 ], [ %8767, %8796 ], [ 0x7FF0000000000000, %8514 ], [ 0x7FF0000000000000, %8518 ]
  %8820 = phi float [ %8782, %8792 ], [ %8782, %8796 ], [ %8510, %8514 ], [ %8510, %8518 ]
  %8821 = phi float [ %8783, %8792 ], [ %8783, %8796 ], [ %8511, %8514 ], [ %8511, %8518 ]
  %8822 = phi float [ %8784, %8792 ], [ %8784, %8796 ], [ %8512, %8514 ], [ %8512, %8518 ]
  %8823 = phi float [ %8790, %8792 ], [ %8790, %8796 ], [ %8508, %8514 ], [ %8508, %8518 ]
  %8824 = fmul fast float %8801, 0x401921FB60000000
  %8825 = fcmp fast olt float %8824, %8819
  br i1 %8825, label %8826, label %8875

; <label>:8826                                    ; preds = %8800
  %8827 = fmul fast float %7911, 0x401921FB60000000
  %8828 = fcmp fast olt float %8823, 0x3F847AE140000000
  br i1 %8828, label %8829, label %8833

; <label>:8829                                    ; preds = %8826
  %8830 = fmul fast float %8823, 1.250000e-01
  %8831 = fadd fast float %8830, 5.000000e-01
  %8832 = fmul fast float %8831, %8823
  br label %8837

; <label>:8833                                    ; preds = %8826
  %8834 = fsub fast float 1.000000e+00, %8823
  %8835 = call float @dx.op.unary.f32(i32 24, float %8834)  ; Sqrt(value)
  %8836 = fsub fast float 1.000000e+00, %8835
  br label %8837

; <label>:8837                                    ; preds = %8833, %8829
  %8838 = phi float [ %8832, %8829 ], [ %8836, %8833 ]
  %8839 = fmul fast float %8838, %7912
  %8840 = fsub fast float 1.000000e+00, %8839
  %8841 = fmul fast float %8840, %8840
  %8842 = fsub fast float 1.000000e+00, %8841
  %8843 = call float @dx.op.unary.f32(i32 24, float %8842)  ; Sqrt(value)
  %8844 = call float @dx.op.unary.f32(i32 12, float %8827)  ; Cos(value)
  %8845 = fmul fast float %8844, %8843
  %8846 = call float @dx.op.unary.f32(i32 13, float %8827)  ; Sin(value)
  %8847 = fmul fast float %8846, %8843
  %8848 = fcmp fast oge float %8822, 0.000000e+00
  %8849 = select i1 %8848, float 1.000000e+00, float -1.000000e+00
  %8850 = fadd fast float %8849, %8822
  %8851 = fdiv fast float 1.000000e+00, %8850
  %8852 = fsub fast float -0.000000e+00, %8851
  %8853 = fmul fast float %8821, %8820
  %8854 = fmul fast float %8853, %8852
  %8855 = fmul fast float %8820, %8820
  %8856 = fmul fast float %8855, %8849
  %8857 = fmul fast float %8856, %8852
  %8858 = fadd fast float %8857, 1.000000e+00
  %8859 = fmul fast float %8821, %8821
  %8860 = fmul fast float %8859, %8852
  %8861 = fadd fast float %8860, %8849
  %8862 = fsub fast float -0.000000e+00, %8821
  %8863 = fmul fast float %8858, %8845
  %8864 = call float @dx.op.tertiary.f32(i32 46, float %8847, float %8854, float %8863)  ; FMad(a,b,c)
  %8865 = call float @dx.op.tertiary.f32(i32 46, float %8840, float %8820, float %8864)  ; FMad(a,b,c)
  %8866 = fmul fast float %8845, %8849
  %8867 = fmul fast float %8866, %8854
  %8868 = call float @dx.op.tertiary.f32(i32 46, float %8847, float %8861, float %8867)  ; FMad(a,b,c)
  %8869 = call float @dx.op.tertiary.f32(i32 46, float %8840, float %8821, float %8868)  ; FMad(a,b,c)
  %8870 = fmul fast float %8820, %8849
  %8871 = fmul fast float %8870, %8845
  %8872 = fsub fast float -0.000000e+00, %8871
  %8873 = call float @dx.op.tertiary.f32(i32 46, float %8847, float %8862, float %8872)  ; FMad(a,b,c)
  %8874 = call float @dx.op.tertiary.f32(i32 46, float %8840, float %8822, float %8873)  ; FMad(a,b,c)
  br label %8951

; <label>:8875                                    ; preds = %8800
  %8876 = fcmp fast ogt float %8819, 0x3F50624DE0000000
  %8877 = fmul fast float %8815, %8815
  br i1 %8876, label %8878, label %8924

; <label>:8878                                    ; preds = %8875
  %8879 = fmul fast float %8819, %7911
  %8880 = fsub fast float %8879, %8818
  %8881 = call float @dx.op.unary.f32(i32 12, float %8880)  ; Cos(value)
  %8882 = fmul fast float %8881, %8816
  %8883 = fadd fast float %8882, %8817
  %8884 = call float @dx.op.unary.f32(i32 13, float %8880)  ; Sin(value)
  %8885 = fdiv fast float %8883, %8884
  %8886 = fmul fast float %8885, %8885
  %8887 = fmul fast float %8816, %8816
  %8888 = fadd fast float %8886, %8887
  %8889 = call float @dx.op.unary.f32(i32 25, float %8888)  ; Rsqrt(value)
  %8890 = fcmp fast ogt float %8885, 0.000000e+00
  %8891 = select i1 %8890, float 1.000000e+00, float -1.000000e+00
  %8892 = fmul fast float %8891, %8889
  %8893 = call float @dx.op.binary.f32(i32 35, float %8892, float -1.000000e+00)  ; FMax(a,b)
  %8894 = call float @dx.op.binary.f32(i32 36, float %8893, float 1.000000e+00)  ; FMin(a,b)
  %8895 = fmul fast float %8894, %8894
  %8896 = fsub fast float 1.000000e+00, %8895
  %8897 = call float @dx.op.unary.f32(i32 25, float %8896)  ; Rsqrt(value)
  %8898 = fmul fast float %8815, %8894
  %8899 = fmul fast float %8898, %8897
  %8900 = fsub fast float -0.000000e+00, %8899
  %8901 = call float @dx.op.binary.f32(i32 35, float %8900, float %8811)  ; FMax(a,b)
  %8902 = call float @dx.op.binary.f32(i32 36, float %8901, float %8812)  ; FMin(a,b)
  %8903 = fmul fast float %8902, %8902
  %8904 = fadd fast float %8903, %8877
  %8905 = fmul fast float %8813, %8813
  %8906 = fadd fast float %8904, %8905
  %8907 = call float @dx.op.unary.f32(i32 25, float %8906)  ; Rsqrt(value)
  %8908 = fmul fast float %8907, %8813
  %8909 = fmul fast float %8814, %8814
  %8910 = fadd fast float %8904, %8909
  %8911 = call float @dx.op.unary.f32(i32 25, float %8910)  ; Rsqrt(value)
  %8912 = fmul fast float %8911, %8814
  %8913 = fsub fast float %8912, %8908
  %8914 = fmul fast float %8913, %7912
  %8915 = fadd fast float %8914, %8908
  %8916 = fmul fast float %8915, %8915
  %8917 = fsub fast float 1.000000e+00, %8916
  %8918 = fcmp fast ogt float %8917, 0.000000e+00
  br i1 %8918, label %8919, label %8931

; <label>:8919                                    ; preds = %8878
  %8920 = fmul fast float %8915, %8904
  %8921 = fmul fast float %8917, %8904
  %8922 = call float @dx.op.unary.f32(i32 25, float %8921)  ; Rsqrt(value)
  %8923 = fmul fast float %8920, %8922
  br label %8931

; <label>:8924                                    ; preds = %8875
  %8925 = fsub fast float %8812, %8811
  %8926 = fmul fast float %8925, %7911
  %8927 = fadd fast float %8926, %8811
  %8928 = fsub fast float %8814, %8813
  %8929 = fmul fast float %8928, %7912
  %8930 = fadd fast float %8929, %8813
  br label %8931

; <label>:8931                                    ; preds = %8924, %8919, %8878
  %8932 = phi float [ %8927, %8924 ], [ %8902, %8878 ], [ %8902, %8919 ]
  %8933 = phi float [ %8930, %8924 ], [ %8814, %8878 ], [ %8923, %8919 ]
  %8934 = fmul fast float %8932, %8802
  %8935 = call float @dx.op.tertiary.f32(i32 46, float %8933, float %8805, float %8934)  ; FMad(a,b,c)
  %8936 = call float @dx.op.tertiary.f32(i32 46, float %8815, float %8808, float %8935)  ; FMad(a,b,c)
  %8937 = fmul fast float %8932, %8803
  %8938 = call float @dx.op.tertiary.f32(i32 46, float %8933, float %8806, float %8937)  ; FMad(a,b,c)
  %8939 = call float @dx.op.tertiary.f32(i32 46, float %8815, float %8809, float %8938)  ; FMad(a,b,c)
  %8940 = fmul fast float %8932, %8804
  %8941 = call float @dx.op.tertiary.f32(i32 46, float %8933, float %8807, float %8940)  ; FMad(a,b,c)
  %8942 = call float @dx.op.tertiary.f32(i32 46, float %8815, float %8810, float %8941)  ; FMad(a,b,c)
  %8943 = fmul fast float %8932, %8932
  %8944 = fmul fast float %8933, %8933
  %8945 = fadd fast float %8943, %8877
  %8946 = fadd fast float %8945, %8944
  %8947 = call float @dx.op.unary.f32(i32 25, float %8946)  ; Rsqrt(value)
  %8948 = fmul fast float %8947, %8936
  %8949 = fmul fast float %8947, %8939
  %8950 = fmul fast float %8947, %8942
  br label %8951

; <label>:8951                                    ; preds = %8931, %8837
  %8952 = phi float [ %8865, %8837 ], [ %8948, %8931 ]
  %8953 = phi float [ %8869, %8837 ], [ %8949, %8931 ]
  %8954 = phi float [ %8874, %8837 ], [ %8950, %8931 ]
  %8955 = call float @dx.op.dot3.f32(i32 55, float %8952, float %8953, float %8954, float %8118, float %8119, float %8120)  ; Dot3(ax,ay,az,bx,by,bz)
  %8956 = fmul fast float %8141, 5.000000e-01
  %8957 = fmul fast float %8141, -5.000000e-01
  %8958 = fmul fast float %8955, %8952
  %8959 = fmul fast float %8955, %8953
  %8960 = fmul fast float %8955, %8954
  %8961 = fsub fast float %8958, %8118
  %8962 = fsub fast float %8959, %8119
  %8963 = fsub fast float %8960, %8120
  %8964 = call float @dx.op.dot3.f32(i32 55, float %8151, float %8152, float %8153, float %8961, float %8962, float %8963)  ; Dot3(ax,ay,az,bx,by,bz)
  %8965 = fmul fast float %8955, %8955
  %8966 = fsub fast float 1.000000e+00, %8965
  %8967 = fdiv fast float %8964, %8966
  %8968 = call float @dx.op.binary.f32(i32 35, float %8967, float %8957)  ; FMax(a,b)
  %8969 = call float @dx.op.binary.f32(i32 36, float %8968, float %8956)  ; FMin(a,b)
  %8970 = fmul fast float %8969, %8118
  %8971 = fmul fast float %8969, %8119
  %8972 = fmul fast float %8969, %8120
  %8973 = fadd fast float %8970, %8151
  %8974 = fadd fast float %8971, %8152
  %8975 = fadd fast float %8972, %8153
  %8976 = fmul fast float %8975, %8953
  %8977 = fmul fast float %8974, %8954
  %8978 = fsub fast float %8976, %8977
  %8979 = fmul fast float %8973, %8954
  %8980 = fmul fast float %8975, %8952
  %8981 = fsub fast float %8979, %8980
  %8982 = fmul fast float %8974, %8952
  %8983 = fmul fast float %8973, %8953
  %8984 = fsub fast float %8982, %8983
  %8985 = call float @dx.op.dot3.f32(i32 55, float %8978, float %8981, float %8984, float %8978, float %8981, float %8984)  ; Dot3(ax,ay,az,bx,by,bz)
  %8986 = fcmp fast ugt float %8985, %8477
  br i1 %8986, label %8994, label %8987

; <label>:8987                                    ; preds = %8951
  %8988 = fmul fast float %8973, %8973
  %8989 = fmul fast float %8974, %8974
  %8990 = fadd fast float %8988, %8989
  %8991 = fmul fast float %8975, %8975
  %8992 = fadd fast float %8990, %8991
  %8993 = call float @dx.op.unary.f32(i32 24, float %8992)  ; Sqrt(value)
  br label %8994

; <label>:8994                                    ; preds = %8987, %8951
  %8995 = phi float [ %8993, %8987 ], [ -1.000000e+00, %8951 ]
  %8996 = fcmp fast ogt float %8995, 0.000000e+00
  %8997 = select i1 %8996, float %8995, float 0.000000e+00
  %8998 = select i1 %8996, float %8952, float 0.000000e+00
  %8999 = select i1 %8996, float %8953, float 0.000000e+00
  %9000 = select i1 %8996, float %8954, float 0.000000e+00
  br label %9108

; <label>:9001                                    ; preds = %8473
  %9002 = call float @dx.op.dot3.f32(i32 55, float %8151, float %8152, float %8153, float %8151, float %8152, float %8153)  ; Dot3(ax,ay,az,bx,by,bz)
  %9003 = fmul fast float %8138, %8138
  %9004 = fcmp fast ugt float %9002, %9003
  %9005 = fmul fast float %7912, 2.000000e+00
  br i1 %9004, label %9031, label %9006, !dx.controlflow.hints !155

; <label>:9006                                    ; preds = %9001
  %9007 = fmul fast float %7911, 0x401921FB60000000
  %9008 = fsub fast float 1.000000e+00, %9005
  %9009 = fmul fast float %9008, %9008
  %9010 = fsub fast float 1.000000e+00, %9009
  %9011 = call float @dx.op.unary.f32(i32 24, float %9010)  ; Sqrt(value)
  %9012 = call float @dx.op.unary.f32(i32 12, float %9007)  ; Cos(value)
  %9013 = fmul fast float %9012, %9011
  %9014 = call float @dx.op.unary.f32(i32 13, float %9007)  ; Sin(value)
  %9015 = fmul fast float %9014, %9011
  %9016 = fmul fast float %9013, %8138
  %9017 = fmul fast float %9015, %8138
  %9018 = fmul fast float %8138, %9008
  %9019 = fadd fast float %8151, %9016
  %9020 = fadd fast float %8152, %9017
  %9021 = fadd fast float %8153, %9018
  %9022 = fmul fast float %9019, %9019
  %9023 = fmul fast float %9020, %9020
  %9024 = fmul fast float %9021, %9021
  %9025 = fadd fast float %9022, %9024
  %9026 = fadd fast float %9025, %9023
  %9027 = call float @dx.op.unary.f32(i32 24, float %9026)  ; Sqrt(value)
  %9028 = fdiv fast float %9019, %9027
  %9029 = fdiv fast float %9020, %9027
  %9030 = fdiv fast float %9021, %9027
  br label %9108

; <label>:9031                                    ; preds = %9001
  %9032 = fdiv fast float %9003, %9002
  %9033 = fmul fast float %7911, 2.000000e+00
  %9034 = fadd fast float %9033, 0xBFEFFFFFE0000000
  %9035 = fadd fast float %9005, 0xBFEFFFFFE0000000
  %9036 = call float @dx.op.unary.f32(i32 6, float %9034)  ; FAbs(value)
  %9037 = call float @dx.op.unary.f32(i32 6, float %9035)  ; FAbs(value)
  %9038 = call float @dx.op.binary.f32(i32 36, float %9036, float %9037)  ; FMin(a,b)
  %9039 = call float @dx.op.binary.f32(i32 35, float %9036, float %9037)  ; FMax(a,b)
  %9040 = fadd fast float %9039, 0x3BF0000000000000
  %9041 = fdiv fast float %9038, %9040
  %9042 = fcmp fast oge float %9037, %9036
  %9043 = uitofp i1 %9042 to float
  %9044 = fmul fast float %9043, 2.000000e+00
  %9045 = fadd fast float %9041, %9044
  %9046 = fmul fast float %9045, 0x3FE921FB60000000
  %9047 = call float @dx.op.unary.f32(i32 12, float %9046)  ; Cos(value)
  %9048 = call float @dx.op.unary.f32(i32 13, float %9046)  ; Sin(value)
  %9049 = bitcast float %9047 to i32
  %9050 = bitcast float %9048 to i32
  %9051 = and i32 %9049, 2147483647
  %9052 = and i32 %9050, 2147483647
  %9053 = bitcast float %9034 to i32
  %9054 = bitcast float %9035 to i32
  %9055 = and i32 %9053, -2147483648
  %9056 = and i32 %9054, -2147483648
  %9057 = or i32 %9051, %9055
  %9058 = or i32 %9052, %9056
  %9059 = bitcast i32 %9057 to float
  %9060 = bitcast i32 %9058 to float
  %9061 = call float @dx.op.unary.f32(i32 24, float %9032)  ; Sqrt(value)
  %9062 = fmul fast float %9061, %9039
  %9063 = fmul fast float %9062, %9062
  %9064 = fsub fast float 1.000000e+00, %9063
  %9065 = call float @dx.op.unary.f32(i32 24, float %9064)  ; Sqrt(value)
  %9066 = fmul fast float %9059, %9062
  %9067 = fmul fast float %9060, %9062
  %9068 = fmul fast float %9065, %9065
  %9069 = call float @dx.op.unary.f32(i32 24, float %9002)  ; Sqrt(value)
  %9070 = fadd fast float %9069, 0x3F1A36E2E0000000
  %9071 = fdiv fast float 1.000000e+00, %9070
  %9072 = fmul fast float %9071, %8151
  %9073 = fmul fast float %9071, %8152
  %9074 = fmul fast float %9071, %8153
  %9075 = fcmp fast oge float %9074, 0.000000e+00
  %9076 = select i1 %9075, float 1.000000e+00, float -1.000000e+00
  %9077 = fadd fast float %9076, %9074
  %9078 = fdiv fast float 1.000000e+00, %9077
  %9079 = fsub fast float -0.000000e+00, %9078
  %9080 = fmul fast float %9072, %9073
  %9081 = fmul fast float %9080, %9079
  %9082 = fmul fast float %9072, %9072
  %9083 = fmul fast float %9082, %9079
  %9084 = fmul fast float %9083, %9076
  %9085 = fadd fast float %9084, 1.000000e+00
  %9086 = fmul fast float %9073, %9073
  %9087 = fmul fast float %9086, %9079
  %9088 = fadd fast float %9076, %9087
  %9089 = fsub fast float -0.000000e+00, %9073
  %9090 = fmul fast float %9085, %9066
  %9091 = call float @dx.op.tertiary.f32(i32 46, float %9067, float %9081, float %9090)  ; FMad(a,b,c)
  %9092 = call float @dx.op.tertiary.f32(i32 46, float %9065, float %9072, float %9091)  ; FMad(a,b,c)
  %9093 = fmul fast float %9081, %9066
  %9094 = fmul fast float %9093, %9076
  %9095 = call float @dx.op.tertiary.f32(i32 46, float %9067, float %9088, float %9094)  ; FMad(a,b,c)
  %9096 = call float @dx.op.tertiary.f32(i32 46, float %9065, float %9073, float %9095)  ; FMad(a,b,c)
  %9097 = fmul fast float %9066, %9072
  %9098 = fmul fast float %9097, %9076
  %9099 = fsub fast float -0.000000e+00, %9098
  %9100 = call float @dx.op.tertiary.f32(i32 46, float %9067, float %9089, float %9099)  ; FMad(a,b,c)
  %9101 = call float @dx.op.tertiary.f32(i32 46, float %9065, float %9074, float %9100)  ; FMad(a,b,c)
  %9102 = fadd fast float %9032, -1.000000e+00
  %9103 = fadd fast float %9102, %9068
  %9104 = call float @dx.op.binary.f32(i32 35, float %9103, float 0.000000e+00)  ; FMax(a,b)
  %9105 = call float @dx.op.unary.f32(i32 24, float %9104)  ; Sqrt(value)
  %9106 = fsub fast float %9065, %9105
  %9107 = fmul fast float %9106, %9069
  br label %9108

; <label>:9108                                    ; preds = %9031, %9006, %8994, %8452, %8110
  %9109 = phi float [ 0.000000e+00, %8110 ], [ %8469, %8452 ], [ %8997, %8994 ], [ %9107, %9031 ], [ %9027, %9006 ]
  %9110 = phi float [ 0.000000e+00, %8110 ], [ %8470, %8452 ], [ %8998, %8994 ], [ %9092, %9031 ], [ %9028, %9006 ]
  %9111 = phi float [ 0.000000e+00, %8110 ], [ %8471, %8452 ], [ %8999, %8994 ], [ %9096, %9031 ], [ %9029, %9006 ]
  %9112 = phi float [ 0.000000e+00, %8110 ], [ %8472, %8452 ], [ %9000, %8994 ], [ %9101, %9031 ], [ %9030, %9006 ]
  %9113 = call float @dx.op.dot3.f32(i32 55, float %7884, float %7885, float %7886, float 0x3FCB37C140000000, float 0x3FE6E2A960000000, float 0x3FB27B3220000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %9114 = fdiv fast float %7884, %9113
  %9115 = fdiv fast float %7885, %9113
  %9116 = fdiv fast float %7886, %9113
  %9117 = fmul fast float %9110, %9109
  %9118 = fmul fast float %9111, %9109
  %9119 = fmul fast float %9112, %9109
  %9120 = fadd fast float %9117, %387
  %9121 = fadd fast float %9118, %391
  %9122 = fadd fast float %9119, %395
  %9123 = icmp eq i32 %138, 0
  br i1 %9123, label %9129, label %9124

; <label>:9124                                    ; preds = %9108
  %9125 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %9126 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %9125, i32 0, i32 0, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %9127 = add i32 %9126, 1
  %9128 = icmp ult i32 %9127, %138
  br label %9129

; <label>:9129                                    ; preds = %9124, %9108
  %9130 = phi i32 [ %9126, %9124 ], [ 0, %9108 ]
  %9131 = phi i1 [ %9128, %9124 ], [ false, %9108 ]
  br i1 %9131, label %9132, label %9179

; <label>:9132                                    ; preds = %9129
  %9133 = shl i32 %137, 2
  %9134 = add i32 %9133, 4
  %9135 = shl i32 %9130, 3
  %9136 = add i32 %9134, %9135
  %9137 = call float @dx.op.unary.f32(i32 7, float %9114)  ; Saturate(value)
  %9138 = call float @dx.op.unary.f32(i32 7, float %9115)  ; Saturate(value)
  %9139 = call float @dx.op.unary.f32(i32 7, float %9116)  ; Saturate(value)
  %9140 = fmul fast float %9137, 2.550000e+02
  %9141 = fmul fast float %9138, 2.550000e+02
  %9142 = fmul fast float %9139, 2.550000e+02
  %9143 = fptoui float %9140 to i32
  %9144 = fptoui float %9141 to i32
  %9145 = fptoui float %9142 to i32
  %9146 = bitcast float %387 to i32
  %9147 = bitcast float %391 to i32
  %9148 = bitcast float %395 to i32
  %9149 = shl i32 %9143, 24
  %9150 = shl i32 %9144, 16
  %9151 = shl i32 %9145, 8
  %9152 = or i32 %9149, %9150
  %9153 = or i32 %9152, %9151
  %9154 = or i32 %9153, 255
  %9155 = bitcast float %9120 to i32
  %9156 = bitcast float %9121 to i32
  %9157 = bitcast float %9122 to i32
  %9158 = and i32 %9149, -33554432
  %9159 = and i32 %9150, 16646144
  %9160 = and i32 %9151, 65024
  %9161 = or i32 %9158, %9159
  %9162 = or i32 %9161, %9160
  %9163 = or i32 %9162, 254
  %9164 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9164, i32 %9136, i32 undef, i32 %9146, i32 %9146, i32 %9146, i32 %9146, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9165 = or i32 %9136, 1
  %9166 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9166, i32 %9165, i32 undef, i32 %9147, i32 %9147, i32 %9147, i32 %9147, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9167 = or i32 %9136, 2
  %9168 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9168, i32 %9167, i32 undef, i32 %9148, i32 %9148, i32 %9148, i32 %9148, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9169 = or i32 %9136, 3
  %9170 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9170, i32 %9169, i32 undef, i32 %9154, i32 %9154, i32 %9154, i32 %9154, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9171 = add i32 %9136, 4
  %9172 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9172, i32 %9171, i32 undef, i32 %9155, i32 %9155, i32 %9155, i32 %9155, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9173 = add i32 %9136, 5
  %9174 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9174, i32 %9173, i32 undef, i32 %9156, i32 %9156, i32 %9156, i32 %9156, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9175 = add i32 %9136, 6
  %9176 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9176, i32 %9175, i32 undef, i32 %9157, i32 %9157, i32 %9157, i32 %9157, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %9177 = add i32 %9136, 7
  %9178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %9178, i32 %9177, i32 undef, i32 %9163, i32 %9163, i32 %9163, i32 %9163, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %9179

; <label>:9179                                    ; preds = %9132, %9129, %8106, %7851
  %9180 = phi float [ %7924, %8106 ], [ %7852, %7851 ], [ %7924, %9129 ], [ %7924, %9132 ]
  %9181 = icmp eq i32 %7856, 4095
  br i1 %9181, label %9189, label %9182

; <label>:9182                                    ; preds = %9179
  %9183 = bitcast float %7866 to i32
  %9184 = lshr i32 %9183, 18
  %9185 = and i32 %9184, 1
  %9186 = xor i32 %9185, 1
  %9187 = fmul fast float %7858, 4.000000e+00
  %9188 = fdiv fast float %7730, %9187
  br label %9189

; <label>:9189                                    ; preds = %9182, %9179
  %9190 = phi i32 [ %9186, %9182 ], [ 1, %9179 ]
  %9191 = phi i32 [ 32768, %9182 ], [ 0, %9179 ]
  %9192 = phi float [ %9188, %9182 ], [ %7858, %9179 ]
  %9193 = icmp ne i32 %9190, 0
  %9194 = select i1 %9193, i32 16384, i32 0
  %9195 = call i32 @dx.op.legacyF32ToF16(i32 130, float %9192)  ; LegacyF32ToF16(value)
  %9196 = shl i32 %9195, 16
  %9197 = and i32 %9196, -131072
  %9198 = select i1 %7913, i32 73728, i32 8192
  %9199 = or i32 %9198, %7856
  %9200 = or i32 %9199, %9191
  %9201 = or i32 %9200, %9194
  %9202 = or i32 %9201, %9197
  %9203 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %9204 = extractvalue %dx.types.CBufRet.i32 %9203, 0
  %9205 = extractvalue %dx.types.CBufRet.i32 %9203, 1
  %9206 = mul i32 %9204, %60
  %9207 = mul i32 %9205, %61
  %9208 = add i32 %9206, %7892
  %9209 = add i32 %9207, %7893
  %9210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %9210, i32 %9208, i32 %9209, i32 undef, i32 %9202, i32 %9202, i32 %9202, i32 %9202, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %9211 = add nuw nsw i32 %7853, 1
  %9212 = icmp eq i32 %9211, 4
  br i1 %9212, label %9243, label %7851

; <label>:9213                                    ; preds = %346
  %9214 = or i32 %140, 94207
  %9215 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %9216 = extractvalue %dx.types.CBufRet.i32 %9215, 0
  %9217 = extractvalue %dx.types.CBufRet.i32 %9215, 1
  %9218 = mul i32 %9216, %60
  %9219 = mul i32 %9217, %61
  %9220 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %9220, i32 %9218, i32 %9219, i32 undef, i32 %9214, i32 %9214, i32 %9214, i32 %9214, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %9221 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %9222 = extractvalue %dx.types.CBufRet.i32 %9221, 0
  %9223 = extractvalue %dx.types.CBufRet.i32 %9221, 1
  %9224 = mul i32 %9222, %60
  %9225 = mul i32 %9223, %61
  %9226 = add i32 %9224, 1
  %9227 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %9227, i32 %9226, i32 %9225, i32 undef, i32 %9214, i32 %9214, i32 %9214, i32 %9214, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %9228 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %9229 = extractvalue %dx.types.CBufRet.i32 %9228, 0
  %9230 = extractvalue %dx.types.CBufRet.i32 %9228, 1
  %9231 = mul i32 %9229, %60
  %9232 = mul i32 %9230, %61
  %9233 = add i32 %9232, 1
  %9234 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %9234, i32 %9231, i32 %9233, i32 undef, i32 %9214, i32 %9214, i32 %9214, i32 %9214, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %9235 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %9236 = extractvalue %dx.types.CBufRet.i32 %9235, 0
  %9237 = extractvalue %dx.types.CBufRet.i32 %9235, 1
  %9238 = mul i32 %9236, %60
  %9239 = mul i32 %9237, %61
  %9240 = add i32 %9238, 1
  %9241 = add i32 %9239, 1
  %9242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %9242, i32 %9240, i32 %9241, i32 undef, i32 %9214, i32 %9214, i32 %9214, i32 %9214, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %9244

; <label>:9243                                    ; preds = %9189
  br label %9244

; <label>:9244                                    ; preds = %9243, %9213
  %9245 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %9245, i32 %60, i32 %61, i32 undef, float %173, float %173, float %173, float %173, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %9246 = fmul fast float %347, 5.000000e-01
  %9247 = fmul fast float %348, 5.000000e-01
  %9248 = fmul fast float %349, 5.000000e-01
  %9249 = fadd fast float %9246, 5.000000e-01
  %9250 = fadd fast float %9247, 5.000000e-01
  %9251 = fadd fast float %9248, 5.000000e-01
  %9252 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 782 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xUNormF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %9252, i32 %60, i32 %61, i32 undef, float %9249, float %9250, float %9251, float %9249, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %9253

; <label>:9253                                    ; preds = %9244, %47, %0
  ret void

; <label>:9254                                    ; preds = %4564
  %9255 = fsub fast float %4569, %4547
  %9256 = fsub fast float 1.000000e+00, %4547
  %9257 = fdiv fast float %9255, %9256
  store float %9257, float* %4568, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9258 = and i32 %1444, 4095
  %9259 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4175)  ; LegacyF32ToF16(value)
  %9260 = shl i32 %9259, 16
  %9261 = or i32 %9258, %9260
  %9262 = or i32 %9261, 32768
  %9263 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 1
  store i32 %9262, i32* %9263, align 4, !tbaa !50, !alias.scope !120, !noalias !123
  br label %9266

; <label>:9264                                    ; preds = %4564
  %9265 = fdiv fast float %4569, %4547
  store float %9265, float* %4568, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  br label %9266

; <label>:9266                                    ; preds = %9264, %9254
  %9267 = phi float [ %9257, %9254 ], [ %9265, %9264 ]
  %9268 = call float @dx.op.binary.f32(i32 35, float %9267, float 0.000000e+00)  ; FMax(a,b)
  %9269 = call float @dx.op.binary.f32(i32 36, float %9268, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9269, float* %4568, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9270 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 2
  %9271 = load float, float* %9270, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9272 = fcmp fast olt float %9271, %4547
  br i1 %9272, label %9283, label %9273

; <label>:9273                                    ; preds = %9266
  %9274 = fsub fast float %9271, %4547
  %9275 = fsub fast float 1.000000e+00, %4547
  %9276 = fdiv fast float %9274, %9275
  store float %9276, float* %9270, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9277 = and i32 %1444, 4095
  %9278 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4175)  ; LegacyF32ToF16(value)
  %9279 = shl i32 %9278, 16
  %9280 = or i32 %9277, %9279
  %9281 = or i32 %9280, 32768
  %9282 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 2
  store i32 %9281, i32* %9282, align 4, !tbaa !50, !alias.scope !120, !noalias !123
  br label %9285

; <label>:9283                                    ; preds = %9266
  %9284 = fdiv fast float %9271, %4547
  store float %9284, float* %9270, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  br label %9285

; <label>:9285                                    ; preds = %9283, %9273
  %9286 = phi float [ %9276, %9273 ], [ %9284, %9283 ]
  %9287 = call float @dx.op.binary.f32(i32 35, float %9286, float 0.000000e+00)  ; FMax(a,b)
  %9288 = call float @dx.op.binary.f32(i32 36, float %9287, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9288, float* %9270, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9289 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 3
  %9290 = load float, float* %9289, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9291 = fcmp fast olt float %9290, %4547
  br i1 %9291, label %9302, label %9292

; <label>:9292                                    ; preds = %9285
  %9293 = fsub fast float %9290, %4547
  %9294 = fsub fast float 1.000000e+00, %4547
  %9295 = fdiv fast float %9293, %9294
  store float %9295, float* %9289, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  %9296 = and i32 %1444, 4095
  %9297 = call i32 @dx.op.legacyF32ToF16(i32 130, float %4175)  ; LegacyF32ToF16(value)
  %9298 = shl i32 %9297, 16
  %9299 = or i32 %9296, %9298
  %9300 = or i32 %9299, 32768
  %9301 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 3
  store i32 %9300, i32* %9301, align 4, !tbaa !50, !alias.scope !120, !noalias !123
  br label %9304

; <label>:9302                                    ; preds = %9285
  %9303 = fdiv fast float %9290, %4547
  store float %9303, float* %9289, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  br label %9304

; <label>:9304                                    ; preds = %9302, %9292
  %9305 = phi float [ %9295, %9292 ], [ %9303, %9302 ]
  %9306 = call float @dx.op.binary.f32(i32 35, float %9305, float 0.000000e+00)  ; FMax(a,b)
  %9307 = call float @dx.op.binary.f32(i32 36, float %9306, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9307, float* %9289, align 4, !tbaa !54, !alias.scope !120, !noalias !123
  br label %4571

; <label>:9308                                    ; preds = %7715
  %9309 = fsub fast float %7720, %7698
  %9310 = fsub fast float 1.000000e+00, %7698
  %9311 = fdiv fast float %9309, %9310
  store float %9311, float* %7719, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9312 = and i32 %4587, 4095
  %9313 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7326)  ; LegacyF32ToF16(value)
  %9314 = shl i32 %9313, 16
  %9315 = or i32 %9312, %9314
  %9316 = or i32 %9315, 32768
  %9317 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 1
  store i32 %9316, i32* %9317, align 4, !tbaa !50, !alias.scope !125, !noalias !128
  br label %9320

; <label>:9318                                    ; preds = %7715
  %9319 = fdiv fast float %7720, %7698
  store float %9319, float* %7719, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  br label %9320

; <label>:9320                                    ; preds = %9318, %9308
  %9321 = phi float [ %9311, %9308 ], [ %9319, %9318 ]
  %9322 = call float @dx.op.binary.f32(i32 35, float %9321, float 0.000000e+00)  ; FMax(a,b)
  %9323 = call float @dx.op.binary.f32(i32 36, float %9322, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9323, float* %7719, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9324 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 2
  %9325 = load float, float* %9324, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9326 = fcmp fast olt float %9325, %7698
  br i1 %9326, label %9337, label %9327

; <label>:9327                                    ; preds = %9320
  %9328 = fsub fast float %9325, %7698
  %9329 = fsub fast float 1.000000e+00, %7698
  %9330 = fdiv fast float %9328, %9329
  store float %9330, float* %9324, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9331 = and i32 %4587, 4095
  %9332 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7326)  ; LegacyF32ToF16(value)
  %9333 = shl i32 %9332, 16
  %9334 = or i32 %9331, %9333
  %9335 = or i32 %9334, 32768
  %9336 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 2
  store i32 %9335, i32* %9336, align 4, !tbaa !50, !alias.scope !125, !noalias !128
  br label %9339

; <label>:9337                                    ; preds = %9320
  %9338 = fdiv fast float %9325, %7698
  store float %9338, float* %9324, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  br label %9339

; <label>:9339                                    ; preds = %9337, %9327
  %9340 = phi float [ %9330, %9327 ], [ %9338, %9337 ]
  %9341 = call float @dx.op.binary.f32(i32 35, float %9340, float 0.000000e+00)  ; FMax(a,b)
  %9342 = call float @dx.op.binary.f32(i32 36, float %9341, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9342, float* %9324, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9343 = getelementptr inbounds [4 x float], [4 x float]* %41, i32 0, i32 3
  %9344 = load float, float* %9343, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9345 = fcmp fast olt float %9344, %7698
  br i1 %9345, label %9356, label %9346

; <label>:9346                                    ; preds = %9339
  %9347 = fsub fast float %9344, %7698
  %9348 = fsub fast float 1.000000e+00, %7698
  %9349 = fdiv fast float %9347, %9348
  store float %9349, float* %9343, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  %9350 = and i32 %4587, 4095
  %9351 = call i32 @dx.op.legacyF32ToF16(i32 130, float %7326)  ; LegacyF32ToF16(value)
  %9352 = shl i32 %9351, 16
  %9353 = or i32 %9350, %9352
  %9354 = or i32 %9353, 32768
  %9355 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i32 0, i32 3
  store i32 %9354, i32* %9355, align 4, !tbaa !50, !alias.scope !125, !noalias !128
  br label %9358

; <label>:9356                                    ; preds = %9339
  %9357 = fdiv fast float %9344, %7698
  store float %9357, float* %9343, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  br label %9358

; <label>:9358                                    ; preds = %9356, %9346
  %9359 = phi float [ %9349, %9346 ], [ %9357, %9356 ]
  %9360 = call float @dx.op.binary.f32(i32 35, float %9359, float 0.000000e+00)  ; FMax(a,b)
  %9361 = call float @dx.op.binary.f32(i32 36, float %9360, float 0x3FEFFF2E40000000)  ; FMin(a,b)
  store float %9361, float* %9343, align 4, !tbaa !54, !alias.scope !125, !noalias !128
  br label %4589
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #1

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveOp.i32(i32, i32, i8, i8) #1

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneFirst.i32(i32, i32) #1

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!46}

!0 = !{!"dxc(private) 1.8.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 8}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !28, !35, !42}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !19, !21, !23, !24, !25, !26, !27}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2DArray<float>"* undef, !"", i32 0, i32 2, i32 1, i32 7, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !18}
!18 = !{i32 1, i32 16}
!19 = !{i32 11, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !20}
!20 = !{i32 1, i32 4}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !22}
!22 = !{i32 0, i32 5}
!23 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!24 = !{i32 14, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 12, i32 0, !18}
!25 = !{i32 15, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !22}
!26 = !{i32 16, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 16, i32 1, i32 12, i32 0, !20}
!27 = !{i32 17, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 12, i32 0, !20}
!28 = !{!29, !30, !31, !33, !34}
!29 = !{i32 0, %"class.RWBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 10, i1 false, i1 false, i1 false, !22}
!30 = !{i32 1, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!31 = !{i32 2, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !32}
!32 = !{i32 0, i32 14}
!33 = !{i32 3, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !22}
!34 = !{i32 4, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !22}
!35 = !{!36, !37, !38, !39, !40, !41}
!36 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 380, null}
!37 = !{i32 1, %hostlayout.View* undef, !"", i32 0, i32 1, i32 1, i32 6012, null}
!38 = !{i32 2, %BlueNoise* undef, !"", i32 0, i32 2, i32 1, i32 44, null}
!39 = !{i32 3, %hostlayout.ForwardLightData* undef, !"", i32 0, i32 3, i32 1, i32 684, null}
!40 = !{i32 4, %LightFunctionAtlas* undef, !"", i32 0, i32 4, i32 1, i32 28, null}
!41 = !{i32 5, %ShaderPrintData* undef, !"", i32 0, i32 5, i32 1, i32 72, null}
!42 = !{!43, !44, !45}
!43 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!44 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!45 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!46 = !{void ()* @GenerateLightSamplesCS, !"GenerateLightSamplesCS", null, !4, !47}
!47 = !{i32 0, i64 524304, i32 4, !48, i32 5, !49}
!48 = !{i32 8, i32 8, i32 1}
!49 = !{i32 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"int", !52, i64 0}
!52 = !{!"omnipotent char", !53, i64 0}
!53 = !{!"Simple C/C++ TBAA"}
!54 = !{!55, !55, i64 0}
!55 = !{!"float", !52, i64 0}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = !{!58}
!58 = distinct !{!58, !59, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!59 = distinct !{!59, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!62 = distinct !{!62, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!65 = distinct !{!65, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!68 = distinct !{!68, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!71 = distinct !{!71, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!74 = distinct !{!74, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!77 = distinct !{!77, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!80 = distinct !{!80, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!83 = distinct !{!83, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!86 = distinct !{!86, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!89 = distinct !{!89, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!90 = !{!91}
!91 = distinct !{!91, !92, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!92 = distinct !{!92, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!93 = !{!94}
!94 = distinct !{!94, !95, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!95 = distinct !{!95, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!98 = distinct !{!98, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!101 = distinct !{!101, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!102 = !{!103}
!103 = distinct !{!103, !104, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!104 = distinct !{!104, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!105 = !{!106}
!106 = distinct !{!106, !107, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!107 = distinct !{!107, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!108 = !{!109}
!109 = distinct !{!109, !110, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!110 = distinct !{!110, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!111 = !{!112}
!112 = distinct !{!112, !113, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!113 = distinct !{!113, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!116 = distinct !{!116, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!117 = distinct !{!117, !"dx.controlflow.hints", i32 1}
!118 = distinct !{!118, !"dx.controlflow.hints", i32 1}
!119 = distinct !{!119, !"dx.controlflow.hints", i32 1}
!120 = !{!121}
!121 = distinct !{!121, !122, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z: %LightSampler"}
!122 = distinct !{!122, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z"}
!123 = !{!124}
!124 = distinct !{!124, !122, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z: %Debug"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z: %LightSampler"}
!127 = distinct !{!127, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z"}
!128 = !{!129}
!129 = distinct !{!129, !127, !"\01?SampleLight@@YAXV?$vector@I$01@@V?$vector@M$02@@UFMegaLightsMaterial@@IY03I_NIUFLightSampler@@UFDebug@@@Z: %Debug"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!132 = distinct !{!132, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z: %Ctx"}
!135 = distinct !{!135, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@@Z"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z: %Ctx"}
!138 = distinct !{!138, !"\01?Print@@YAXUFShaderPrintContext@@UFShaderPrintText@@UFFontColor@@@Z"}
!139 = !{!140, !142, !144, !145, !146, !147, !148, !150, !151, !152, !153}
!140 = distinct !{!140, !141, !"\01?CapsuleGetSphericalBounds@@YA?AUFCapsuleSphericalBounds@@V?$vector@M$02@@0MM@Z: %agg.result"}
!141 = distinct !{!141, !"\01?CapsuleGetSphericalBounds@@YA?AUFCapsuleSphericalBounds@@V?$vector@M$02@@0MM@Z"}
!142 = distinct !{!142, !143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z: %RayOrigin"}
!143 = distinct !{!143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z"}
!144 = distinct !{!144, !143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z: %RayDirection"}
!145 = distinct !{!145, !143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z: %RayTMin"}
!146 = distinct !{!146, !143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z: %RayTMax"}
!147 = distinct !{!147, !143, !"\01?GenerateCapsuleLightOcclusionRayWithSolidAngleSampling@@YA_NUFLightShaderParameters@@V?$vector@M$02@@1V?$vector@M$01@@AIAV2@3AIAM44@Z: %RayPdf"}
!148 = distinct !{!148, !149, !"\01?GenerateShadowRay@@YA_NUFLightShaderParameters@@_N1V?$vector@M$02@@2V?$vector@M$01@@AIAV2@4AIAM5@Z: %RayOrigin"}
!149 = distinct !{!149, !"\01?GenerateShadowRay@@YA_NUFLightShaderParameters@@_N1V?$vector@M$02@@2V?$vector@M$01@@AIAV2@4AIAM5@Z"}
!150 = distinct !{!150, !149, !"\01?GenerateShadowRay@@YA_NUFLightShaderParameters@@_N1V?$vector@M$02@@2V?$vector@M$01@@AIAV2@4AIAM5@Z: %RayDirection"}
!151 = distinct !{!151, !149, !"\01?GenerateShadowRay@@YA_NUFLightShaderParameters@@_N1V?$vector@M$02@@2V?$vector@M$01@@AIAV2@4AIAM5@Z: %RayTMin"}
!152 = distinct !{!152, !149, !"\01?GenerateShadowRay@@YA_NUFLightShaderParameters@@_N1V?$vector@M$02@@2V?$vector@M$01@@AIAV2@4AIAM5@Z: %RayTMax"}
!153 = distinct !{!153, !154, !"\01?GetLightSampleTrace@@YA?AUFLightSampleTrace@@V?$vector@M$02@@IV?$vector@M$01@@@Z: %agg.result"}
!154 = distinct !{!154, !"\01?GetLightSampleTrace@@YA?AUFLightSampleTrace@@V?$vector@M$02@@IV?$vector@M$01@@@Z"}
!155 = distinct !{!155, !"dx.controlflow.hints", i32 1}
